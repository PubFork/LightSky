/* 
 * File:   bufferObject.h
 * Author: Miles Lacey
 *
 * Created on March 31, 2014, 8:00 PM
 */

#ifndef __LS_DRAW_BUFFER_OBJECT_H__
#define	__LS_DRAW_BUFFER_OBJECT_H__

#include <cstddef> // ptrdiff_t

#include "lightsky/draw/setup.h"

namespace ls {
namespace draw {

/*-----------------------------------------------------------------------------
    Enumerations
-----------------------------------------------------------------------------*/
/**
 * This enumeration outlines the basic types of buffers are available for use
 * in a render context. It will be updated as more features are written.
 */
enum vbo_use_t : GLenum {
    VBO_BUFFER_ARRAY                = GL_ARRAY_BUFFER,
    VBO_BUFFER_ELEMENT              = GL_ELEMENT_ARRAY_BUFFER,
    VBO_BUFFER_TRANSFORM_FEEDBACK   = GL_TRANSFORM_FEEDBACK_BUFFER,
    VBO_BUFFER_UNIFORM_BUFFER       = GL_UNIFORM_BUFFER
};

/**
 * Different usage parameters that determine how a buffer may be used.
 */
enum vbo_rw_t : GLenum {
    VBO_STATIC_READ  = GL_STATIC_READ,
    VBO_STATIC_DRAW  = GL_STATIC_DRAW,
    VBO_STATIC_COPY  = GL_STATIC_COPY,
    
    VBO_STREAM_READ  = GL_STREAM_READ,
    VBO_STREAM_DRAW  = GL_STREAM_DRAW,
    VBO_STREAM_COPY  = GL_STREAM_COPY,
    
    VBO_DYNAMIC_READ = GL_DYNAMIC_READ,
    VBO_DYNAMIC_DRAW = GL_DYNAMIC_DRAW,
    VBO_DYNAMIC_COPY = GL_DYNAMIC_COPY
};

/**
 * Memory mapping bit flags used for DMA transfers between CPU and GPU memory.
 */
enum vbo_map_t : GLbitfield {
    VBO_MAP_BIT_READ                = GL_MAP_READ_BIT,
    VBO_MAP_BIT_WRITE               = GL_MAP_WRITE_BIT,
    VBO_MAP_BIT_INVALIDATE_RANGE    = GL_MAP_INVALIDATE_RANGE_BIT,
    VBO_MAP_BIT_INVALIDATE_BUFFER   = GL_MAP_INVALIDATE_BUFFER_BIT,
    VBO_MAP_BIT_FLUSH_EXPLICIT      = GL_MAP_FLUSH_EXPLICIT_BIT,
    VBO_MAP_BIT_UNSYNCHRONIZED      = GL_MAP_UNSYNCHRONIZED_BIT
};

/*-----------------------------------------------------------------------------
    Classes
-----------------------------------------------------------------------------*/
/**
 * @brief Vertex Buffer Object
 * 
 * This object provides RAII to an OpenGL vertex Buffer Object. Different VBO
 * types can be generated by modifying the template parameter.
 */
template <vbo_use_t bufferType=VBO_BUFFER_ARRAY>
class vertexBuffer_t {
    private:
        /**
         * A handle to the vertex buffer object residing on the GPU.
         */
        GLuint vbo = 0;
        
    public:
        /**
         * @brief Constructor.
         */
        vertexBuffer_t();
        
        /**
         * Copy Constructor - DELETED
         */
        vertexBuffer_t(const vertexBuffer_t&) = delete;
        
        /**
         * @brief Move Constructor
         * 
         * This moves the data contained within the constructor parameter into
         * *this. No copies are performed.
         * 
         * @param vb
         * A vertex buffer object whose data will be moved into *this.
         */
        vertexBuffer_t(vertexBuffer_t&& vb);
        
        /**
         * @brief Destructor
         * 
         * Releases all resources used by *this.
         */
        ~vertexBuffer_t();
        
        /**
         * Copy Operator - DELETED
         */
        vertexBuffer_t& operator=(const vertexBuffer_t&) = delete;
        
        /**
         * @brief Move Operator
         * 
         * This moves the data contained within the method parameter into *this.
         * No copies are performed.
         * 
         * @param vb
         * A vertex buffer object whose data will be moved into *this.
         */
        vertexBuffer_t& operator=(vertexBuffer_t&& vb);
        
        /**
         * @brief Buffer initialization.
         * 
         * Generates a vertex buffer object on the GPY that will be used to
         * contain a large pool of data.
         * 
         * @return true if the buffer was successfully created, false if not.
         */
        bool init();
        
        /**
         * Terminate the vertex buffer and release all of its resources back to
         * the GPU.
         */
        void terminate();
        
        /**
         * Get the GPU-assigned handle of this buffer object
         * @return An unsigned integer, representing the GPU-side buffer that
         * this object represents.
         */
        unsigned getId() const;
        
        /**
         * Determine if there is data used by this object
         * 
         * @returns true if this object has data residing on GPU memory, false
         * if not.
         */
        bool isValid() const;
        
        /**
         * Bind this vertex buffer to the current global rendering context.
         */
        void bind() const;
        
        /**
         * Unbind this vertex buffer object from the current render context.
         */
        void unbind() const;
        
        /**
         * Set the data within the buffer to whatever is set at "pData."
         * 
         * @param size
         * The size, in bytes, of the data that the buffer should contain.
         * 
         * @param pData
         * A pointer to the data contained within the buffer. This argument can
         * be NULL to indicate that an empty buffer should be allocated and
         * will have its contents filled later.
         * 
         * @param usage
         * The usage of this buffer. This can indicate that the buffer is
         * static, should be used to stream data occasionally, or the data is
         * dynamic and will be updated on a regular basis.
         * 
         */
        void setData(ptrdiff_t size, const void* pData, vbo_rw_t usage);
        
        /**
         * Modify the data within a buffer to contain whatever is in "pData."
         * at an offset of a specified amount of bytes.
         * 
         * @param size
         * The size, in bytes, of the data that the buffer should contain.
         * 
         * @param offset
         * The offset, in bytes, to where the data should be placed in *this.
         * 
         * @param pData
         * A pointer to the data contained within the buffer.
         * 
         */
        void setSubData(ptrdiff_t offset, ptrdiff_t size, const void* pData);
        
        /**
         * Map the contents of the buffer into memory in order to perform a DMA
         * transfer of data to the GPU.
         * 
         * @param offset
         * The offset, in bytes, to where the data should be placed in *this.
         * 
         * @param range
         * The range of bytes that will be mapped to memory.
         * 
         * @param access
         * Specifies a combination of access flags indicating the desired
         * access to the range of memory.
         * 
         * @returns void*
         * A pointer to the location in memory where the data will be mapped.
         * A NULL pointer may be returned, indicating an error that may have
         * occurred while attempting to map the buffer to memory.
         * 
         */
        void* mapData(ptrdiff_t offset, ptrdiff_t range, vbo_map_t access);
        
        /**
         * Notify the GPU that all data has been uploaded to the requested
         * location in memory and that the DMA transfer can now be performed.
         */
        bool unmapData();
};

/*-----------------------------------------------------------------------------
    External template types
-----------------------------------------------------------------------------*/
LS_DECLARE_CLASS_TYPE(vertexBuffer, vertexBuffer_t, VBO_BUFFER_ARRAY);
LS_DECLARE_CLASS_TYPE(indexBuffer,  vertexBuffer_t, VBO_BUFFER_ELEMENT);
LS_DECLARE_CLASS_TYPE(uvBuffer,     vertexBuffer_t, VBO_BUFFER_ARRAY);
LS_DECLARE_CLASS_TYPE(colorBuffer,  vertexBuffer_t, VBO_BUFFER_ARRAY);

} // end draw namespace
} // end ls namespace

#include "lightsky/draw/generic/vertexBuffer_impl.h"

#endif	/* __LS_DRAW_BUFFER_OBJECT_H__ */
