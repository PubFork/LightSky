/* 
 * File:   draw/PrimitiveGeometryLoader.h
 * Author: miles
 *
 * Created on August 23, 2015, 6:45 PM
 */

#ifndef __LS_DRAW_PRIMITIVE_GEOMETRY_LOADER_H__
#define	__LS_DRAW_PRIMITIVE_GEOMETRY_LOADER_H__

namespace ls {
namespace draw {

enum buffer_access_t : GLenum;
enum index_element_t : int;
enum common_vertex_t : unsigned;
class BufferObject;

/**------------------------------------
 * @brief Initialize and allocate GPU memory for a buffer to be used
 * specifically for holding vertex data.
 * 
 * Upon failure, the BufferObjects passed into this function will be left in
 * the same state they were in before this function was called.
 * 
 * Upon success, this method will leave the output vertex buffer bound the the
 * current graphical context.
 * 
 * @param vertTypes
 * A bitmask, containing flags from the common_vertex_t enumeration which will
 * be used to determine the types of vertices to load into the input vertex
 * buffer object.
 * 
 * @param vbo
 * A reference to a BufferObject which will be used to contain the vertices
 * generated by this function.
 * 
 * @param vertCount
 * The number of vertices (of the types specified by "vertTypes") to allocate
 * GPU memory for.
 * 
 * @param usage
 * The usage of this buffer. This can indicate that the buffer is static,
 * should be used to stream data occasionally, or the data is dynamic and will
 * be updated on a regular basis.
-------------------------------------*/
bool init_geometry_vbo(
    const common_vertex_t vertTypes,
    BufferObject& vbo,
    const unsigned vertCount,
    const buffer_access_t usage
);

/**------------------------------------
 * @brief Initialize and allocate GPU memory for a buffer to be used
 * specifically for holding index data.
 * 
 * Upon failure, the BufferObjects passed into this function will be left in
 * the same state they were in before this function was called.
 * 
 * Upon success, this method will leave the output index buffer bound the the
 * current graphical context.
 * 
 * @param indexType
 * A reference to an index_element_t object which will contain the datatype
 * being used by the output IBO. This value will remain untouched if the
 * function fails or returns false.
 * 
 * @param ibo
 * A reference to an index buffer object which will be used to reference the
 * vertices of a VBO during a render pass.
 * 
 * @param vertCount
 * The number of vertices that are going to be referenced by the Index Buffer
 * Object. This value determines if the index buffer will be using unsigned
 * shorts or unsigned integers for the internal data type.
 * 
 * @param indexCount
 * Contains the number of indices to allocate GPU memory for.
 * 
 * @param usage
 * The usage of this buffer. This can indicate that the buffer is static,
 * should be used to stream data occasionally, or the data is dynamic and will
 * be updated on a regular basis.
-------------------------------------*/
bool init_geometry_ibo(
    BufferObject& ibo,
    const unsigned vertexCount,
    const unsigned indexCount,
    const buffer_access_t usage,
    index_element_t* const pOutIndexType = nullptr
);

/**------------------------------------
 * N-Sided polygon primitive loading method
 * 
 * @param vertTypes
 * A bitmask, containing flags from the common_vertex_t enumeration which will
 * be used to determine the types of vertices to load into the input vertex
 * buffer object.
 * 
 * @param vbo
 * A reference to a BufferObject which will be used to contain the vertices
 * generated by this function.
 * 
 * @param usage
 * The usage of this buffer. This can indicate that the buffer is static,
 * should be used to stream data occasionally, or the data is dynamic and will
 * be updated on a regular basis.
 * 
 * @param outDrawMode
 * A reference to a draw_mode_t enumeration which will hold the resulting draw
 * mode of the output polygon upon this function's success.
 * 
 * @param numPoints
 * The number of points that the polygon should contain. This number must be
 * greater than, or equal to, 3.
 * 
 * @return TRUE if the geometry was successfully loaded, FALSE if not.
-------------------------------------*/
bool load_polygon_geometry(
    const common_vertex_t vertTypes,
    BufferObject& vbo,
    const buffer_access_t usage,
    draw_mode_t& outDrawMode,
    unsigned numPoints = 3
);

/**------------------------------------
 * @brief Triangle primitive loading method
 * 
 * Triangle texture coordinates are as follows:
 * 
 * |----1---|
 * |   /\   |
 * |  /  \  |
 * | /    \ |
 * 0/______\2
 * 
 * @param vertTypes
 * A bitmask, containing flags from the common_vertex_t enumeration which will
 * be used to determine the types of vertices to load into the input vertex
 * buffer object.
 * 
 * @param vbo
 * A reference to a BufferObject which will be used to contain the vertices
 * generated by this function.
 * 
 * @param usage
 * The usage of this buffer. This can indicate that the buffer is static,
 * should be used to stream data occasionally, or the data is dynamic and will
 * be updated on a regular basis.
 * 
 * @param outDrawMode
 * A reference to a draw_mode_t enumeration which will hold the resulting draw
 * mode of the output polygon upon this function's success.
 * 
 * @return TRUE if the geometry was successfully loaded, FALSE if not.
-------------------------------------*/
inline bool load_triangle_geometry(
    const common_vertex_t vertTypes,
    BufferObject& vbo,
    const buffer_access_t usage,
    draw_mode_t& outDrawMode
) {
    return load_polygon_geometry(vertTypes, vbo, usage, outDrawMode, 3);
}

/**------------------------------------
 * @brief Load a set of vertices representing a square/quad.
 * 
 * @param vertTypes
 * A bitmask, containing flags from the common_vertex_t enumeration which will
 * be used to determine the types of vertices to load into the input vertex
 * buffer object.
 * 
 * @param vbo
 * A reference to a BufferObject which will be used to contain the vertices
 * generated by this function.
 * 
 * @param usage
 * The usage of this buffer. This can indicate that the buffer is static,
 * should be used to stream data occasionally, or the data is dynamic and will
 * be updated on a regular basis.
 * 
 * @param outDrawMode
 * A reference to a draw_mode_t enumeration which will hold the resulting draw
 * mode of the output polygon upon this function's success.
 * 
 * @return TRUE if the geometry was successfully loaded, FALSE if not.
-------------------------------------*/
inline bool load_quad_geometry(
    const common_vertex_t vertTypes,
    BufferObject& vbo,
    const buffer_access_t usage,
    draw_mode_t& outDrawMode
) {
    return load_polygon_geometry(vertTypes, vbo, usage, outDrawMode, 4);
}

/**------------------------------------
 * @brief Load a set of vertices representing a circle.
 * 
 * @param vertTypes
 * A bitmask, containing flags from the common_vertex_t enumeration which will
 * be used to determine the types of vertices to load into the input vertex
 * buffer object.
 * 
 * @param vbo
 * A reference to a BufferObject which will be used to contain the vertices
 * generated by this function.
 * 
 * @param usage
 * The usage of this buffer. This can indicate that the buffer is static,
 * should be used to stream data occasionally, or the data is dynamic and will
 * be updated on a regular basis.
 * 
 * @param outDrawMode
 * A reference to a draw_mode_t enumeration which will hold the resulting draw
 * mode of the output polygon upon this function's success.
 * 
 * @return TRUE if the geometry was successfully loaded, FALSE if not.
-------------------------------------*/
inline bool load_circle_geometry(
    const common_vertex_t vertTypes,
    BufferObject& vbo,
    const buffer_access_t usage,
    draw_mode_t& outDrawMode
) {
    return load_polygon_geometry(vertTypes, vbo, usage, outDrawMode, 10);
}

} // end draw namespace
} // end ls namespace

#endif	/* __LS_DRAW_PRIMITIVE_GEOMETRY_LOADER_H__ */

