<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="tuple__impl_8h" kind="file">
    <compoundname>tuple_impl.h</compoundname>
    <includedby refid="tuple_8h" local="yes">C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h</includedby>
    <invincdepgraph>
      <node id="7772">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/utils/src/tuple.cpp</label>
        <link refid="tuple_8cpp"/>
      </node>
      <node id="7771">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h</label>
        <link refid="tuple_8h"/>
        <childnode refid="7772" relation="include">
        </childnode>
        <childnode refid="7773" relation="include">
        </childnode>
      </node>
      <node id="7773">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/utils/utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="7774" relation="include">
        </childnode>
      </node>
      <node id="7774">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/lightsky.h</label>
        <link refid="lightsky_8h"/>
        <childnode refid="7775" relation="include">
        </childnode>
      </node>
      <node id="7770">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h</label>
        <link refid="tuple_impl.h"/>
        <childnode refid="7771" relation="include">
        </childnode>
      </node>
      <node id="7775">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/src/lightsky.cpp</label>
        <link refid="lightsky_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacels">ls</innernamespace>
    <innernamespace refid="namespacels_1_1utils">ls::utils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacels" kindref="compound">ls</ref><sp/>{</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utils<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>Static<sp/>Methods</highlight></codeline>
<codeline lineno="7"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>tuple_t&lt;data_t...&gt;::constructObjects<sp/>(Sentinel)</highlight></codeline>
<codeline lineno="10"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t&gt;<sp/>constexpr</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tuple_t&lt;data_t...&gt;::constructObjects(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset,<sp/>arg_t*)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(buffer+offset)<sp/>arg_t{}<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/>tuple_t&lt;data_t...&gt;::constructObjects</highlight></codeline>
<codeline lineno="19"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;<sp/>constexpr</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tuple_t&lt;data_t...&gt;::constructObjects(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset,<sp/>arg_t*,<sp/>args_t*...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(buffer+offset)<sp/>arg_t{}<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>constructObjects&lt;args_t...&gt;(buffer,<sp/>offset+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(arg_t),<sp/>args...)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/>tuple_t&lt;data_t...&gt;::destroyObjects</highlight></codeline>
<codeline lineno="30"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t&gt;<sp/>constexpr</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tuple_t&lt;data_t...&gt;::destroyObjects(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset,<sp/>arg_t*)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_destructible&lt;arg_t&gt;()</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>reinterpret_cast&lt;arg_t*&gt;(buffer+offset)-&gt;~arg_t()</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/>tuple_t&lt;data_t...&gt;::destroyObjects</highlight></codeline>
<codeline lineno="41"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tuple_t&lt;data_t...&gt;::destroyObjects(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset,<sp/>arg_t*,<sp/>args_t*...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_destructible&lt;arg_t&gt;())<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">arg_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buffer+offset)-&gt;~arg_t();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>destroyObjects&lt;args_t...&gt;(buffer,<sp/>offset+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(arg_t),<sp/>args...);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>Movement<sp/>Methods</highlight></codeline>
<codeline lineno="53"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/>tuple_t&lt;data_t...&gt;::copyObjects<sp/>(Sentinel)</highlight></codeline>
<codeline lineno="56"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tuple_t&lt;data_t...&gt;::copyObjects(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tuple_t&lt;data_t...&gt;&amp;<sp/>agg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset,<sp/>arg_t*)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_copy_assignable&lt;arg_t&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;Aggregated<sp/>objects<sp/>must<sp/>have<sp/>a<sp/>copy<sp/>operator<sp/>available.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_t*<sp/>pArg<sp/>=<sp/>(arg_t*)(buffer+offset);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>*pArg<sp/>=<sp/>*agg.getObject&lt;arg_t&gt;();</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/>tuple_t&lt;data_t...&gt;::copyObjects</highlight></codeline>
<codeline lineno="68"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tuple_t&lt;data_t...&gt;::copyObjects(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tuple_t&lt;data_t...&gt;&amp;<sp/>agg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset,<sp/>arg_t*,<sp/>args_t*...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_copy_assignable&lt;arg_t&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;Aggregated<sp/>objects<sp/>must<sp/>have<sp/>a<sp/>copy<sp/>operator<sp/>available.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_t*<sp/>pArg<sp/>=<sp/>(arg_t*)(buffer+offset);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>*pArg<sp/>=*agg.getObject&lt;arg_t&gt;();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>copyObjects(agg,<sp/>buffer,<sp/>offset+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(arg_t),<sp/>args...);</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/>tuple_t&lt;data_t...&gt;::moveObjects</highlight></codeline>
<codeline lineno="81"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tuple_t&lt;data_t...&gt;::moveObjects(tuple_t&lt;data_t...&gt;&amp;&amp;<sp/>agg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset,<sp/>arg_t*)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_copy_assignable&lt;arg_t&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;Aggregated<sp/>objects<sp/>must<sp/>have<sp/>a<sp/>move<sp/>operator<sp/>available.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_t*<sp/>pArg<sp/>=<sp/>(arg_t*)(buffer+offset);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>*pArg<sp/>=<sp/>std::move(*agg.getObject&lt;arg_t&gt;());</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/>tuple_t&lt;data_t...&gt;::moveObjects</highlight></codeline>
<codeline lineno="93"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tuple_t&lt;data_t...&gt;::moveObjects(tuple_t&lt;data_t...&gt;&amp;&amp;<sp/>agg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset,<sp/>arg_t*,<sp/>args_t*...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_copy_assignable&lt;arg_t&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;Aggregated<sp/>objects<sp/>must<sp/>have<sp/>a<sp/>move<sp/>operator<sp/>available.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_t*<sp/>pArg<sp/>=<sp/>(arg_t*)(buffer+offset);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>*pArg<sp/>=<sp/>std::move(*agg.getObject&lt;arg_t&gt;());</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>moveObjects(std::forward&lt;tuple_t&lt;data_t...&gt;&gt;(agg),<sp/>buffer,<sp/>offset+</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(arg_t),<sp/>args...);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/>Construction<sp/>and<sp/>Destruction</highlight></codeline>
<codeline lineno="106"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/>Private<sp/>Constructor</highlight></codeline>
<codeline lineno="109"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">constexpr<sp/><ref refid="classls_1_1utils_1_1tuple__t_1aa69f36b5b14f9f0e343089da721d83bc" kindref="member">tuple_t&lt;data_t...&gt;::tuple_t</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/>Constructor</highlight></codeline>
<codeline lineno="116"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="118" refid="classls_1_1utils_1_1tuple__t_1aa69f36b5b14f9f0e343089da721d83bc" refkind="member"><highlight class="normal">constexpr<sp/><ref refid="classls_1_1utils_1_1tuple__t_1aa69f36b5b14f9f0e343089da721d83bc" kindref="member">tuple_t&lt;data_t...&gt;::tuple_t</ref>()<sp/>:</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref>(constructObjects(dataBuffer,<sp/>0,<sp/>((data_t*)nullptr)...))</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/>Copy<sp/>Constructor</highlight></codeline>
<codeline lineno="124"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="126" refid="classls_1_1utils_1_1tuple__t_1a687461ea553a6789ad4c787cbcb71d7f" refkind="member"><highlight class="normal"><ref refid="classls_1_1utils_1_1tuple__t_1aa69f36b5b14f9f0e343089da721d83bc" kindref="member">tuple_t&lt;data_t...&gt;::tuple_t</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref>&amp;<sp/>a)<sp/>:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref>{}</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>copyObjects(a,<sp/>dataBuffer,<sp/>0,<sp/>((data_t*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)...);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/>Move<sp/>Constructor</highlight></codeline>
<codeline lineno="134"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="136" refid="classls_1_1utils_1_1tuple__t_1ae6d5752058916443b62f4d87f45e961e" refkind="member"><highlight class="normal"><ref refid="classls_1_1utils_1_1tuple__t_1aa69f36b5b14f9f0e343089da721d83bc" kindref="member">tuple_t&lt;data_t...&gt;::tuple_t</ref>(<ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref>&amp;&amp;<sp/>a)<sp/>:</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref>{}</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>moveObjects(std::forward&lt;<ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t&lt;data_t...&gt;</ref>&gt;(a),<sp/>dataBuffer,<sp/>0,<sp/>((data_t*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)...);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/>Destructor</highlight></codeline>
<codeline lineno="144"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="146" refid="classls_1_1utils_1_1tuple__t_1a58545786d0aa6237b4faf045c789426f" refkind="member"><highlight class="normal"><ref refid="classls_1_1utils_1_1tuple__t_1a58545786d0aa6237b4faf045c789426f" kindref="member">tuple_t&lt;data_t...&gt;::~tuple_t</ref>()<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>destroyObjects(dataBuffer,<sp/>0,<sp/>((data_t*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)...);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/>Copy<sp/>Operator</highlight></codeline>
<codeline lineno="152"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="154" refid="classls_1_1utils_1_1tuple__t_1af1efe78cd84fb2da7ab36f0386a031ef" refkind="member"><highlight class="normal"><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref>&lt;data_t...&gt;&amp;<sp/><ref refid="classls_1_1utils_1_1tuple__t_1af1efe78cd84fb2da7ab36f0386a031ef" kindref="member">tuple_t&lt;data_t...&gt;::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref>&amp;<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>copyObjects(a,<sp/>dataBuffer,<sp/>0,<sp/>((data_t*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)...);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/>Move<sp/>Operator</highlight></codeline>
<codeline lineno="161"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="163" refid="classls_1_1utils_1_1tuple__t_1aece8203f1a1d89680b383a1c34a3ee21" refkind="member"><highlight class="normal"><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref>&lt;data_t...&gt;&amp;<sp/><ref refid="classls_1_1utils_1_1tuple__t_1af1efe78cd84fb2da7ab36f0386a031ef" kindref="member">tuple_t&lt;data_t...&gt;::operator=</ref>(<ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref>&amp;&amp;<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>moveObjects(std::forward&lt;<ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t&lt;data_t...&gt;</ref>&gt;(a),<sp/>dataBuffer,<sp/>0,<sp/>((data_t*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)...);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>object<sp/>using<sp/>an<sp/>its<sp/>type<sp/>(const)</highlight></codeline>
<codeline lineno="170"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>the<sp/>last<sp/>object<sp/>in<sp/>the<sp/>data<sp/>buffer.<sp/>(Sentinel)</highlight></codeline>
<codeline lineno="173"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>request_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t&gt;<sp/>constexpr</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>request_t*<sp/><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t&lt;data_t...&gt;::getObjectAtOffset</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset,<sp/>arg_t*)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::is_same&lt;request_t,<sp/>arg_t&gt;()</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>request_t*)(dataBuffer+offset)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>object<sp/>from<sp/>the<sp/>data<sp/>buffer.</highlight></codeline>
<codeline lineno="184"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>request_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;<sp/>constexpr</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>request_t*<sp/>tuple_t&lt;data_t...&gt;::getObjectAtOffset(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset,<sp/>arg_t*,<sp/>args_t*...)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::is_same&lt;request_t,<sp/>arg_t&gt;()</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>request_t*)(dataBuffer+offset)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>getObjectAtOffset&lt;request_t,<sp/>args_t...&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(arg_t)+offset,<sp/>((args_t*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)...);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>object<sp/>contained<sp/>within<sp/>*this.<sp/>This<sp/>object<sp/>is<sp/>specified<sp/>using</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/>template<sp/>parameters.</highlight></codeline>
<codeline lineno="196"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>request_t&gt;<sp/>constexpr</highlight></codeline>
<codeline lineno="199" refid="classls_1_1utils_1_1tuple__t_1a621e95f44c4d00f76779447a84f1cb29" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>request_t*<sp/><ref refid="classls_1_1utils_1_1tuple__t_1a621e95f44c4d00f76779447a84f1cb29" kindref="member">tuple_t&lt;data_t...&gt;::getObject</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getObjectAtOffset&lt;request_t,<sp/>data_t...&gt;(0,<sp/>((data_t*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)...);</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>object<sp/>using<sp/>an<sp/>its<sp/>type</highlight></codeline>
<codeline lineno="205"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>the<sp/>last<sp/>object<sp/>in<sp/>the<sp/>data<sp/>buffer.</highlight></codeline>
<codeline lineno="208"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>request_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">request_t*<sp/><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t&lt;data_t...&gt;::getObjectAtOffset</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset,<sp/>arg_t*)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::is_same&lt;request_t,<sp/>arg_t&gt;()</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(request_t*)(dataBuffer+offset)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>object<sp/>from<sp/>the<sp/>data<sp/>buffer.</highlight></codeline>
<codeline lineno="219"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>request_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal">request_t*<sp/>tuple_t&lt;data_t...&gt;::getObjectAtOffset(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset,<sp/>arg_t*,<sp/>args_t*...)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::is_same&lt;request_t,<sp/>arg_t&gt;()</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(request_t*)(dataBuffer+offset)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>getObjectAtOffset&lt;request_t,<sp/>args_t...&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(arg_t)+offset,<sp/>((args_t*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)...);</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>object<sp/>contained<sp/>within<sp/>*this.<sp/>This<sp/>object<sp/>is<sp/>specified<sp/>using</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/>template<sp/>parameters.</highlight></codeline>
<codeline lineno="231"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>request_t&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="classls_1_1utils_1_1tuple__t_1a8101d05960bfede6c0596d85497a3aa7" refkind="member"><highlight class="normal">request_t*<sp/><ref refid="classls_1_1utils_1_1tuple__t_1a621e95f44c4d00f76779447a84f1cb29" kindref="member">tuple_t&lt;data_t...&gt;::getObject</ref>()<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getObjectAtOffset&lt;request_t,<sp/>data_t...&gt;(0,<sp/>((data_t*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)...);</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>object<sp/>using<sp/>an<sp/>its<sp/>index<sp/>(const)</highlight></codeline>
<codeline lineno="240"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>the<sp/>last<sp/>object<sp/>in<sp/>the<sp/>data<sp/>buffer.<sp/>(Sentinel)</highlight></codeline>
<codeline lineno="243"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t&gt;<sp/>constexpr</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t&lt;data_t...&gt;::getObjectAtIndex</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset,<sp/>arg_t*)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(dataBuffer+offset)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>object<sp/>from<sp/>the<sp/>data<sp/>buffer.</highlight></codeline>
<codeline lineno="254"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;<sp/>constexpr</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>tuple_t&lt;data_t...&gt;::getObjectAtIndex(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset,<sp/>arg_t*,<sp/>args_t*...)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(dataBuffer+offset)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>getObjectAtIndex&lt;args_t...&gt;(index-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(arg_t)+offset,<sp/>((args_t*)nullptr)...);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>object<sp/>contained<sp/>within<sp/>*this.<sp/>This<sp/>object<sp/>is<sp/>specified<sp/>using</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/>an<sp/>array-like<sp/>index.</highlight></codeline>
<codeline lineno="266"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">template<sp/>&lt;typename...<sp/>data_t&gt;<sp/>constexpr</highlight></codeline>
<codeline lineno="268" refid="classls_1_1utils_1_1tuple__t_1a65a5dd9fce3b3f078a9f54eb153c887c" refkind="member"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref>&lt;data_t...&gt;::getObject(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getObjectAtIndex&lt;data_t...&gt;(index,<sp/>0,<sp/>((data_t*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)...);</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>object<sp/>using<sp/>an<sp/>its<sp/>index</highlight></codeline>
<codeline lineno="274"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>the<sp/>last<sp/>object<sp/>in<sp/>the<sp/>data<sp/>buffer.</highlight></codeline>
<codeline lineno="277"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t&lt;data_t...&gt;::getObjectAtIndex</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset,<sp/>arg_t*)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(dataBuffer+offset)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>object<sp/>from<sp/>the<sp/>data<sp/>buffer.</highlight></codeline>
<codeline lineno="288"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>tuple_t&lt;data_t...&gt;::getObjectAtIndex(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>offset,<sp/>arg_t*,<sp/>args_t*...)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(dataBuffer+offset)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>getObjectAtIndex&lt;args_t...&gt;(index-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(arg_t)+offset,<sp/>((args_t*)nullptr)...);</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>an<sp/>object<sp/>contained<sp/>within<sp/>*this.<sp/>This<sp/>object<sp/>is<sp/>specified<sp/>using</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/>an<sp/>array-like<sp/>index.</highlight></codeline>
<codeline lineno="300"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">template<sp/>&lt;typename...<sp/>data_t&gt;<sp/>inline</highlight></codeline>
<codeline lineno="302" refid="classls_1_1utils_1_1tuple__t_1af2cfc0588dd8ceb6b89a005eb6675b18" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref>&lt;data_t...&gt;::getObject(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getObjectAtIndex&lt;data_t...&gt;(index,<sp/>0,<sp/>((data_t*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)...);</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/><sp/>Non-retrieval<sp/>methods</highlight></codeline>
<codeline lineno="308"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/><sp/><sp/>Retrieve<sp/>the<sp/>number<sp/>of<sp/>objects<sp/>contained<sp/>within<sp/>an<sp/>tuple_t.</highlight></codeline>
<codeline lineno="311"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>data_t&gt;<sp/>constexpr</highlight></codeline>
<codeline lineno="313" refid="classls_1_1utils_1_1tuple__t_1abb5724ccb8e0dca26868a19979b061e8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="classls_1_1utils_1_1tuple__t_1abb5724ccb8e0dca26868a19979b061e8" kindref="member">tuple_t&lt;data_t...&gt;::getNumObjects</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(data_t);</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>utils<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>ls<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h"/>
  </compounddef>
</doxygen>
