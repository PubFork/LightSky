<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="classls_1_1draw_1_1mesh" kind="class" prot="public">
    <compoundname>ls::draw::mesh</compoundname>
    <includes refid="mesh_8h" local="no">mesh.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classls_1_1draw_1_1mesh_1a6e2cda808507f3d6295eb8e8d6b97c87" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class meshResource</definition>
        <argsstring></argsstring>
        <name>meshResource</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow the mesh resource class to load vertices directly into a mesh. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="54" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classls_1_1draw_1_1mesh_1a53de484529a755835096ecabbfc34433" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class meshModel</definition>
        <argsstring></argsstring>
        <name>meshModel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow the draw model to access data held within this object&apos;s VBO. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="59" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classls_1_1draw_1_1mesh_1a552125e7af791cd92129300ff2d9e65a" prot="private" static="no" mutable="no">
        <type>vertexBuffer</type>
        <definition>vertexBuffer ls::draw::mesh::vbo</definition>
        <argsstring></argsstring>
        <name>vbo</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vertex Buffer Object to be used with this mesh </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="65" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classls_1_1draw_1_1mesh_1a2a7d9914a5f094e3d94b6508b57dc407" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned ls::draw::mesh::numVertices</definition>
        <argsstring></argsstring>
        <name>numVertices</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Member to help determine the number of vertices contained within a mesh object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="71" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classls_1_1draw_1_1mesh_1ab6ae2e6e2a8e074b39201bc4147f2dbf" prot="private" static="no" mutable="no">
        <type><ref refid="namespacels_1_1draw_1ae8e45123197ab63f5b0f34a1913e5546" kindref="member">draw_mode_t</ref></type>
        <definition>draw_mode_t ls::draw::mesh::drawMode</definition>
        <argsstring></argsstring>
        <name>drawMode</name>
        <initializer>= draw_mode_t::DRAW_MODE_DEFAULT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw mode for each mesh </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="76" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classls_1_1draw_1_1mesh_1af0210757664ccfb54bf9ec50e35692a4" prot="private" static="no" mutable="no">
        <type><ref refid="classls_1_1draw_1_1bounding_box" kindref="compound">boundingBox</ref></type>
        <definition>boundingBox ls::draw::mesh::bounds</definition>
        <argsstring></argsstring>
        <name>bounds</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow the mesh class to contain some sort of bounding area. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="81" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_1afd7d52363d2a7210eee2cf966fecc7cf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::mesh::initVertices</definition>
        <argsstring>(unsigned numVerts)</argsstring>
        <name>initVertices</name>
        <param>
          <type>unsigned</type>
          <declname>numVerts</declname>
        </param>
        <briefdescription>
<para>Vertex Buffer Initialization. </para>        </briefdescription>
        <detaileddescription>
<para>Helper function to ensure that the vao/vbo combos are loaded. This function will cause the VBO member to be bound to the active OpenGL rendering context.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numVerts</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of vertices that will be allocated on the GPU.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the internal vertex buffer was successfully initialized, false if not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="96" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/mesh.cpp" bodystart="86" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_1ac93f6805f97788c2beec13e20c60093b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::mesh::uploadTextGlyph</definition>
        <argsstring>(float xOffset, float yOffset, const atlasEntry &amp;rGlyph, vertex *pVerts)</argsstring>
        <name>uploadTextGlyph</name>
        <param>
          <type>float</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yOffset</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1draw_1_1atlas_entry" kindref="compound">atlasEntry</ref> &amp;</type>
          <declname>rGlyph</declname>
        </param>
        <param>
          <type><ref refid="structls_1_1draw_1_1vertex" kindref="compound">vertex</ref> *</type>
          <declname>pVerts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Private helper function to upload a number of text vertices to the GPU. When using a font atlas, a total number of VERTICES_PER_GLYPH will be sent to the array pointed at by the parameter pVerts.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The current x-offset of all the vertices to be uploaded.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The current y-offset of all the vertices to be uploaded.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rGlyph</parametername>
</parameternamelist>
<parameterdescription>
<para>The particular atlas glyph to be sent to the GPU at the x/y offsets.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pVerts</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the DMA-mapped buffer of vertices where the current glyph is to be sent. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="116" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/mesh.cpp" bodystart="224" bodyend="268"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_1a296b86e84f16f8bf7db93ee6ae4ce0da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::draw::mesh::mesh</definition>
        <argsstring>()</argsstring>
        <name>mesh</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Initializes all members in *this to their default values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="124" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/mesh.cpp" bodystart="56" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_1a61bb5225d6751fda7ad8e9cc493f9b8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::draw::mesh::mesh</definition>
        <argsstring>(const mesh &amp;)=delete</argsstring>
        <name>mesh</name>
        <param>
          <type>const <ref refid="classls_1_1draw_1_1mesh" kindref="compound">mesh</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy Constructor <ndash/> DELETED. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_1ad98def56899f8b6aa5ba6ed461165d13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::draw::mesh::mesh</definition>
        <argsstring>(mesh &amp;&amp;m)</argsstring>
        <name>mesh</name>
        <param>
          <type><ref refid="classls_1_1draw_1_1mesh" kindref="compound">mesh</ref> &amp;&amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Move Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Moves all data from the input parameter into *this. No copies are performed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>An r-value reference to a temporary mesh object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="140" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/mesh.cpp" bodystart="43" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_1a4d9ced67b11a040e9043294bc3fbd1a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::draw::mesh::~mesh</definition>
        <argsstring>()</argsstring>
        <name>~mesh</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
<para>Unloads all resources used by *this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="147" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/mesh.cpp" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_1ab69d72e1f8f58868cb8764f45ee67c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classls_1_1draw_1_1mesh" kindref="compound">mesh</ref> &amp;</type>
        <definition>mesh&amp; ls::draw::mesh::operator=</definition>
        <argsstring>(const mesh &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classls_1_1draw_1_1mesh" kindref="compound">mesh</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy Operator <ndash/> DELETED. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_1a7335f3dbc1136ec618854341ccb17a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classls_1_1draw_1_1mesh" kindref="compound">mesh</ref> &amp;</type>
        <definition>mesh &amp; ls::draw::mesh::operator=</definition>
        <argsstring>(mesh &amp;&amp;m)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classls_1_1draw_1_1mesh" kindref="compound">mesh</ref> &amp;&amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Move Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Moves all data from the input parameter into *this. No copies are performed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>An r-value reference to a temporary mesh object.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to *this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="165" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/mesh.cpp" bodystart="62" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_1abf18de6bbee55129e03def2e01b4162e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned ls::draw::mesh::getId</definition>
        <argsstring>() const </argsstring>
        <name>getId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an general identification to be used for this object</para><para><simplesect kind="return"><para>an unsigned integral variable representing the GPU-side handle to the vertex buffer object used by *this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="173" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/mesh_impl.h" bodystart="8" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_1a5c1b5f46185fa2c78b00c2eaf2a84fa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::mesh::init</definition>
        <argsstring>(const meshResource &amp;mr)</argsstring>
        <name>init</name>
        <param>
          <type>const <ref refid="classls_1_1draw_1_1mesh_resource" kindref="compound">meshResource</ref> &amp;</type>
          <declname>mr</declname>
        </param>
        <briefdescription>
<para>Initialize. </para>        </briefdescription>
        <detaileddescription>
<para>This method send a set of vertices from a mesh resource object to the GPU using OpenGL.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mr</parametername>
</parameternamelist>
<parameterdescription>
<para>A mesh loader that contains raw vertex data in memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the data was successfully sent to the GPU, or FALSE if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="187" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/mesh.cpp" bodystart="112" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_1ac60b2c3397de8f2d0e42bb2753eaa1f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::mesh::init</definition>
        <argsstring>(const atlas &amp;glyphAtlas, const std::string &amp;str)</argsstring>
        <name>init</name>
        <param>
          <type>const <ref refid="classls_1_1draw_1_1atlas" kindref="compound">atlas</ref> &amp;</type>
          <declname>glyphAtlas</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Initialize. </para>        </briefdescription>
        <detaileddescription>
<para>Similar to its overload, this method sends text/string data to the GPU using a texture atlas and a corresponding string object. This method will generate a mesh on the fly, attempting to match the characters in the input string, and send the vertices to the GPU.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>glyphAtlas</parametername>
</parameternamelist>
<parameterdescription>
<para>A texture Atlas containing pre-loaded font glyphs and their offsets.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a character string, containing data which is to be loaded onto the GPU.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the data was successfully sent to the GPU, or FALSE if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="208" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/mesh.cpp" bodystart="136" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_1aecc0faf7d2061c5882121e5bb778b15f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::mesh::terminate</definition>
        <argsstring>()</argsstring>
        <name>terminate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unload all GPU-based resource that are used by *this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="213" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/mesh_impl.h" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_1a05d2ae8850e7d0b887c0e4300de4a6d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned ls::draw::mesh::getNumVertices</definition>
        <argsstring>() const </argsstring>
        <name>getNumVertices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of vertices contained within this mesh object&apos;s VBO.</para><para><simplesect kind="return"><para>The number of vertices used to draw this mesh. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="220" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/mesh_impl.h" bodystart="23" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_1a110476a35cd95eee211793819d64189d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacels_1_1draw_1ae8e45123197ab63f5b0f34a1913e5546" kindref="member">draw_mode_t</ref></type>
        <definition>draw_mode_t ls::draw::mesh::getDrawMode</definition>
        <argsstring>() const </argsstring>
        <name>getDrawMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current Draw Mode for this mesh.</para><para><simplesect kind="return"><para>an enumeration representing the proper draw mode that should be used to render the vertices within *this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="228" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/mesh_impl.h" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_1a67fc002e4577323079221a38f198bc10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::mesh::setDrawMode</definition>
        <argsstring>(draw_mode_t dm)</argsstring>
        <name>setDrawMode</name>
        <param>
          <type><ref refid="namespacels_1_1draw_1ae8e45123197ab63f5b0f34a1913e5546" kindref="member">draw_mode_t</ref></type>
          <declname>dm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the method of drawing that should be used for this mesh. Its recommended not to use this method as it is set during initialization. If the current draw mode is changed, it should be cached in the event that the mode should be restored.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dm</parametername>
</parameternamelist>
<parameterdescription>
<para>An enumeration that will be used to determine how to render the vertices contained within *this. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="240" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/mesh_impl.h" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_1a38187a087b97195d5e49df6e4ac34739" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classls_1_1draw_1_1bounding_box" kindref="compound">boundingBox</ref> &amp;</type>
        <definition>const boundingBox &amp; ls::draw::mesh::getBounds</definition>
        <argsstring>() const </argsstring>
        <name>getBounds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the maximum vertex bounds for this mesh object.</para><para><simplesect kind="return"><para>a constant reference to a <ref refid="classls_1_1draw_1_1bounding_box" kindref="compound">boundingBox</ref> objext. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="247" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/mesh_impl.h" bodystart="44" bodyend="46"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Mesh Object. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
 A mesh object contains information about the layout of vertex data located on the GPU. It&apos;s designed to be used directly with OpenGL. These classes are rather large. It is recommended to instantiate them using <heading level="2">dynamic allocation. </heading>
</para>    </detaileddescription>
    <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" line="50" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/mesh.h" bodystart="50" bodyend="248"/>
    <listofallmembers>
      <member refid="classls_1_1draw_1_1mesh_1af0210757664ccfb54bf9ec50e35692a4" prot="private" virt="non-virtual"><scope>ls::draw::mesh</scope><name>bounds</name></member>
      <member refid="classls_1_1draw_1_1mesh_1ab6ae2e6e2a8e074b39201bc4147f2dbf" prot="private" virt="non-virtual"><scope>ls::draw::mesh</scope><name>drawMode</name></member>
      <member refid="classls_1_1draw_1_1mesh_1a38187a087b97195d5e49df6e4ac34739" prot="public" virt="non-virtual"><scope>ls::draw::mesh</scope><name>getBounds</name></member>
      <member refid="classls_1_1draw_1_1mesh_1a110476a35cd95eee211793819d64189d" prot="public" virt="non-virtual"><scope>ls::draw::mesh</scope><name>getDrawMode</name></member>
      <member refid="classls_1_1draw_1_1mesh_1abf18de6bbee55129e03def2e01b4162e" prot="public" virt="non-virtual"><scope>ls::draw::mesh</scope><name>getId</name></member>
      <member refid="classls_1_1draw_1_1mesh_1a05d2ae8850e7d0b887c0e4300de4a6d2" prot="public" virt="non-virtual"><scope>ls::draw::mesh</scope><name>getNumVertices</name></member>
      <member refid="classls_1_1draw_1_1mesh_1a5c1b5f46185fa2c78b00c2eaf2a84fa3" prot="public" virt="non-virtual"><scope>ls::draw::mesh</scope><name>init</name></member>
      <member refid="classls_1_1draw_1_1mesh_1ac60b2c3397de8f2d0e42bb2753eaa1f8" prot="public" virt="non-virtual"><scope>ls::draw::mesh</scope><name>init</name></member>
      <member refid="classls_1_1draw_1_1mesh_1afd7d52363d2a7210eee2cf966fecc7cf" prot="private" virt="non-virtual"><scope>ls::draw::mesh</scope><name>initVertices</name></member>
      <member refid="classls_1_1draw_1_1mesh_1a296b86e84f16f8bf7db93ee6ae4ce0da" prot="public" virt="non-virtual"><scope>ls::draw::mesh</scope><name>mesh</name></member>
      <member refid="classls_1_1draw_1_1mesh_1a61bb5225d6751fda7ad8e9cc493f9b8d" prot="public" virt="non-virtual"><scope>ls::draw::mesh</scope><name>mesh</name></member>
      <member refid="classls_1_1draw_1_1mesh_1ad98def56899f8b6aa5ba6ed461165d13" prot="public" virt="non-virtual"><scope>ls::draw::mesh</scope><name>mesh</name></member>
      <member refid="classls_1_1draw_1_1mesh_1a53de484529a755835096ecabbfc34433" prot="private" virt="non-virtual"><scope>ls::draw::mesh</scope><name>meshModel</name></member>
      <member refid="classls_1_1draw_1_1mesh_1a6e2cda808507f3d6295eb8e8d6b97c87" prot="private" virt="non-virtual"><scope>ls::draw::mesh</scope><name>meshResource</name></member>
      <member refid="classls_1_1draw_1_1mesh_1a2a7d9914a5f094e3d94b6508b57dc407" prot="private" virt="non-virtual"><scope>ls::draw::mesh</scope><name>numVertices</name></member>
      <member refid="classls_1_1draw_1_1mesh_1ab69d72e1f8f58868cb8764f45ee67c4c" prot="public" virt="non-virtual"><scope>ls::draw::mesh</scope><name>operator=</name></member>
      <member refid="classls_1_1draw_1_1mesh_1a7335f3dbc1136ec618854341ccb17a7c" prot="public" virt="non-virtual"><scope>ls::draw::mesh</scope><name>operator=</name></member>
      <member refid="classls_1_1draw_1_1mesh_1a67fc002e4577323079221a38f198bc10" prot="public" virt="non-virtual"><scope>ls::draw::mesh</scope><name>setDrawMode</name></member>
      <member refid="classls_1_1draw_1_1mesh_1aecc0faf7d2061c5882121e5bb778b15f" prot="public" virt="non-virtual"><scope>ls::draw::mesh</scope><name>terminate</name></member>
      <member refid="classls_1_1draw_1_1mesh_1ac93f6805f97788c2beec13e20c60093b" prot="private" virt="non-virtual"><scope>ls::draw::mesh</scope><name>uploadTextGlyph</name></member>
      <member refid="classls_1_1draw_1_1mesh_1a552125e7af791cd92129300ff2d9e65a" prot="private" virt="non-virtual"><scope>ls::draw::mesh</scope><name>vbo</name></member>
      <member refid="classls_1_1draw_1_1mesh_1a4d9ced67b11a040e9043294bc3fbd1a5" prot="public" virt="non-virtual"><scope>ls::draw::mesh</scope><name>~mesh</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
