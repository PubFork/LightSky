<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="functor__impl_8h" kind="file">
    <compoundname>functor_impl.h</compoundname>
    <includedby refid="functor_8h" local="yes">C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h</includedby>
    <invincdepgraph>
      <node id="6812">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/lightsky.h</label>
        <link refid="lightsky_8h"/>
        <childnode refid="6813" relation="include">
        </childnode>
      </node>
      <node id="6809">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/script/generic/functor_impl.h</label>
        <link refid="functor_impl.h"/>
        <childnode refid="6810" relation="include">
        </childnode>
      </node>
      <node id="6810">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h</label>
        <link refid="functor_8h"/>
        <childnode refid="6811" relation="include">
        </childnode>
        <childnode refid="6814" relation="include">
        </childnode>
      </node>
      <node id="6811">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/script/script.h</label>
        <link refid="script_8h"/>
        <childnode refid="6812" relation="include">
        </childnode>
      </node>
      <node id="6814">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/script/src/functor.cpp</label>
        <link refid="functor_8cpp"/>
      </node>
      <node id="6813">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/src/lightsky.cpp</label>
        <link refid="lightsky_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacels">ls</innernamespace>
    <innernamespace refid="namespacels_1_1script">ls::script</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacels" kindref="compound">ls</ref><sp/>{</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">script<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>Functor<sp/>Base<sp/>Class</highlight></codeline>
<codeline lineno="7"><highlight class="comment">-----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>Retrieve<sp/>the<sp/>next<sp/>function<sp/>to<sp/>run</highlight></codeline>
<codeline lineno="10"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="classls_1_1script_1_1functor_1a060497e0e2440b8e808dca09cd3ef00d" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor" kindref="compound">functor</ref>*<sp/><ref refid="classls_1_1script_1_1functor_1a060497e0e2440b8e808dca09cd3ef00d" kindref="member">functor::getNextFunc</ref>()<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor_1acbfe9e8f75165199dbb1f844889420d8" kindref="member">nextFunc</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/>Set<sp/>the<sp/>next<sp/>function<sp/>to<sp/>run.</highlight></codeline>
<codeline lineno="18"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="classls_1_1script_1_1functor_1af6ba6622fdf347e7db2760ee30e7556f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor_1af6ba6622fdf347e7db2760ee30e7556f" kindref="member">functor::setNextFunc</ref>(<ref refid="classls_1_1script_1_1functor" kindref="compound">functor</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1acbfe9e8f75165199dbb1f844889420d8" kindref="member">nextFunc</ref><sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>the<sp/>scriptable<sp/>type.</highlight></codeline>
<codeline lineno="26"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="classls_1_1script_1_1functor_1ac47c53ecc1323ad42a22bc1d822ca7ad" refkind="member"><highlight class="normal"><ref refid="namespacels_1_1script_1aa2320f4ac1ff7ade16588ce1f5c59f1a" kindref="member">script_base_t</ref><sp/><ref refid="classls_1_1script_1_1functor_1ac47c53ecc1323ad42a22bc1d822ca7ad" kindref="member">functor::getScriptType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacels_1_1script_1aa2320f4ac1ff7ade16588ce1f5c59f1aae04b2be0a46321b419482976b06a28ac" kindref="member">script_base_t::SCRIPT_FUNC</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/>Get<sp/>a<sp/>functor<sp/>argument</highlight></codeline>
<codeline lineno="34"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="classls_1_1script_1_1functor_1a618828b53466cb566e4b3021731cc365" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1variable" kindref="compound">variable</ref>*<sp/><ref refid="classls_1_1script_1_1functor_1a618828b53466cb566e4b3021731cc365" kindref="member">functor::getArg</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1a7be2750fc0336b79413cdbe2a456cc00" kindref="member">LS_DEBUG_ASSERT</ref>(index<sp/>&lt;<sp/>this-&gt;<ref refid="classls_1_1script_1_1functor_1add592ec77ef606c708a43ae5191f45e3" kindref="member">getNumArgs</ref>());</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor_1ae941567add854b32d89c3100200a3da0" kindref="member">pArgs</ref>[index];</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/>Set<sp/>a<sp/>functor<sp/>argument</highlight></codeline>
<codeline lineno="43"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="classls_1_1script_1_1functor_1abaffa911b2d74b755f817fe7090b82b6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor_1abaffa911b2d74b755f817fe7090b82b6" kindref="member">functor::setArg</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>index,<sp/><ref refid="classls_1_1script_1_1variable" kindref="compound">variable</ref>*<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assert_8h_1a7be2750fc0336b79413cdbe2a456cc00" kindref="member">LS_DEBUG_ASSERT</ref>(index<sp/>&lt;<sp/>this-&gt;<ref refid="classls_1_1script_1_1functor_1add592ec77ef606c708a43ae5191f45e3" kindref="member">getNumArgs</ref>());</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1ae941567add854b32d89c3100200a3da0" kindref="member">pArgs</ref>[index]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/>Functor<sp/>parameter<sp/>type-checking<sp/>for<sp/>a<sp/>single<sp/>argument.</highlight></codeline>
<codeline lineno="52"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t&gt;</highlight></codeline>
<codeline lineno="54" refid="classls_1_1script_1_1functor_1a987920da0ac130e7ef4886244da54462" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor_1a987920da0ac130e7ef4886244da54462" kindref="member">functor::checkSingleArg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor" kindref="compound">functor</ref>&amp;<sp/>f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>arg_t*<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>f.<ref refid="classls_1_1script_1_1functor_1add592ec77ef606c708a43ae5191f45e3" kindref="member">getNumArgs</ref>())<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Incorrect<sp/>number<sp/>of<sp/>arguments<sp/>being<sp/>compiled:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\tFunction:<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&amp;f<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>f.<ref refid="classls_1_1script_1_1functor_1a4c872e2fd539ac19f8059714c263e30b" kindref="member">getScriptSubType</ref>()</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\tParameter:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>f.<ref refid="classls_1_1script_1_1functor_1add592ec77ef606c708a43ae5191f45e3" kindref="member">getNumArgs</ref>()</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f.<ref refid="classls_1_1script_1_1functor_1a618828b53466cb566e4b3021731cc365" kindref="member">getArg</ref>(i)<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Function<sp/>contains<sp/>a<sp/>null<sp/>parameter:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\tFunction:<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&amp;f<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>f.<ref refid="classls_1_1script_1_1functor_1a4c872e2fd539ac19f8059714c263e30b" kindref="member">getScriptSubType</ref>()</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\tParameter:<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>f.<ref refid="classls_1_1script_1_1functor_1add592ec77ef606c708a43ae5191f45e3" kindref="member">getNumArgs</ref>()</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dynamic_cast&lt;const<sp/>arg_t*&gt;(f.<ref refid="classls_1_1script_1_1functor_1a618828b53466cb566e4b3021731cc365" kindref="member">getArg</ref>(i))<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>TypeID<sp/>of<sp/>function<sp/>argument<sp/>does<sp/>not<sp/>match<sp/>the<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>declared<sp/>in<sp/>its<sp/>parent<sp/>function.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\tFunction:<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&amp;f<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>f.<ref refid="classls_1_1script_1_1functor_1a4c872e2fd539ac19f8059714c263e30b" kindref="member">getScriptSubType</ref>()</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\tInput<sp/>type:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(f.<ref refid="classls_1_1script_1_1functor_1a618828b53466cb566e4b3021731cc365" kindref="member">getArg</ref>(i)).name()</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\tActual<sp/>type:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(t).name()</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/>Run<sp/>a<sp/>functor</highlight></codeline>
<codeline lineno="88"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="classls_1_1script_1_1functor_1a7598508969b165e43cf0b59d604a9e96" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor_1a7598508969b165e43cf0b59d604a9e96" kindref="member">functor::run</ref>()<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1a617aa828e6583631566752ed312e12e8" kindref="member">pFunction</ref>(<ref refid="classls_1_1script_1_1functor_1ae941567add854b32d89c3100200a3da0" kindref="member">pArgs</ref>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/>Functor<sp/>parameter<sp/>type-checking<sp/>(Recursive)</highlight></codeline>
<codeline lineno="96"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="classls_1_1script_1_1functor_1acfec7ad11fcb55d1f3ee340ad90defda" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor_1a8941b6c017a655154efe36670588bb62" kindref="member">functor::checkArgs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor" kindref="compound">functor</ref>&amp;<sp/>f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>arg_t*<sp/>t,<sp/>args_t*...)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>checkSingleArg&lt;arg_t&gt;(f,<sp/>i,<sp/>t)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>checkArgs&lt;args_t...&gt;(f,<sp/>i+1,<sp/>((args_t*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)...);</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/>Functor<sp/>parameter<sp/>type-checking<sp/>(Sentinel)</highlight></codeline>
<codeline lineno="105"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>arg_t&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="classls_1_1script_1_1functor_1a28e482e376b79bd66a2d4555065b78fa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor_1a8941b6c017a655154efe36670588bb62" kindref="member">functor::checkArgs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor" kindref="compound">functor</ref>&amp;<sp/>f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>arg_t*<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>checkSingleArg&lt;arg_t&gt;(f,<sp/>i,<sp/>t);</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/>Functor<sp/>Derived<sp/>Template<sp/>Types</highlight></codeline>
<codeline lineno="113"><highlight class="comment">-----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/>Destructor</highlight></codeline>
<codeline lineno="116"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacels_1_1utils_1a53ed44f6f1c3753ed11e1241ac36647b" kindref="member">hash_t</ref><sp/>hashId,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;</highlight></codeline>
<codeline lineno="118" refid="classls_1_1script_1_1functor__t_1acf20eeb5edbffbdc3d88dc06896eb01a" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor__t_1acf20eeb5edbffbdc3d88dc06896eb01a" kindref="member">functor_t&lt;hashId, args_t...&gt;::~functor_t</ref>()<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/>Constructor</highlight></codeline>
<codeline lineno="123"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacels_1_1utils_1a53ed44f6f1c3753ed11e1241ac36647b" kindref="member">hash_t</ref><sp/>hashId,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;</highlight></codeline>
<codeline lineno="125" refid="classls_1_1script_1_1functor__t_1a25ee21bf7fd2d0a22107485d7c18dd51" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor__t_1a25ee21bf7fd2d0a22107485d7c18dd51" kindref="member">functor_t&lt;hashId, args_t...&gt;::functor_t</ref>()<sp/>:</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor" kindref="compound">functor</ref>{parameters,<sp/>functionImpl}</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/>Copy<sp/>Constructor</highlight></codeline>
<codeline lineno="131"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacels_1_1utils_1a53ed44f6f1c3753ed11e1241ac36647b" kindref="member">hash_t</ref><sp/>hashId,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;</highlight></codeline>
<codeline lineno="133" refid="classls_1_1script_1_1functor__t_1a6dafff72940422f4df719cb4f7c59443" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor__t_1a25ee21bf7fd2d0a22107485d7c18dd51" kindref="member">functor_t&lt;hashId, args_t...&gt;::functor_t</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor__t" kindref="compound">functor_t</ref>&amp;<sp/>f)<sp/>:</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor" kindref="compound">functor</ref>{parameters,<sp/>functionImpl}</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1ac4b5de93a8ba47fa09f0ea186b5e55f4" kindref="member">functor::operator=</ref>(f);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/>Move<sp/>Constructor</highlight></codeline>
<codeline lineno="141"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacels_1_1utils_1a53ed44f6f1c3753ed11e1241ac36647b" kindref="member">hash_t</ref><sp/>hashId,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;</highlight></codeline>
<codeline lineno="143" refid="classls_1_1script_1_1functor__t_1a5e8ff68e5195b1f623b2f44397c53057" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor__t_1a25ee21bf7fd2d0a22107485d7c18dd51" kindref="member">functor_t&lt;hashId, args_t...&gt;::functor_t</ref>(<ref refid="classls_1_1script_1_1functor__t" kindref="compound">functor_t</ref>&amp;&amp;<sp/>f)<sp/>:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor" kindref="compound">functor</ref>{parameters,<sp/>functionImpl}</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1ac4b5de93a8ba47fa09f0ea186b5e55f4" kindref="member">functor::operator=</ref>(std::move(f));</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/>Copy<sp/>Assignment</highlight></codeline>
<codeline lineno="151"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacels_1_1utils_1a53ed44f6f1c3753ed11e1241ac36647b" kindref="member">hash_t</ref><sp/>hashId,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;</highlight></codeline>
<codeline lineno="153" refid="classls_1_1script_1_1functor__t_1a25e654a8cd67c26060fcc2d410ff7bc0" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor__t" kindref="compound">functor_t</ref>&lt;hashId,<sp/>args_t...&gt;&amp;<sp/><ref refid="classls_1_1script_1_1functor__t_1a25e654a8cd67c26060fcc2d410ff7bc0" kindref="member">functor_t&lt;hashId, args_t...&gt;::operator =</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor__t" kindref="compound">functor_t</ref>&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1ac4b5de93a8ba47fa09f0ea186b5e55f4" kindref="member">functor::operator=</ref>(f);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/>Move<sp/>Assignment</highlight></codeline>
<codeline lineno="160"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacels_1_1utils_1a53ed44f6f1c3753ed11e1241ac36647b" kindref="member">hash_t</ref><sp/>hashId,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;</highlight></codeline>
<codeline lineno="162" refid="classls_1_1script_1_1functor__t_1a597111cd4d91c9bb0f2224346f490237" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor__t" kindref="compound">functor_t</ref>&lt;hashId,<sp/>args_t...&gt;&amp;<sp/><ref refid="classls_1_1script_1_1functor__t_1a25e654a8cd67c26060fcc2d410ff7bc0" kindref="member">functor_t&lt;hashId, args_t...&gt;::operator =</ref>(<ref refid="classls_1_1script_1_1functor__t" kindref="compound">functor_t</ref>&amp;&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1ac4b5de93a8ba47fa09f0ea186b5e55f4" kindref="member">functor::operator=</ref>(std::move(f));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/>RTTI</highlight></codeline>
<codeline lineno="169"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacels_1_1utils_1a53ed44f6f1c3753ed11e1241ac36647b" kindref="member">hash_t</ref><sp/>hashId,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="classls_1_1script_1_1functor__t_1a1a794cef9de1a011b506d9e651355c42" refkind="member"><highlight class="normal"><ref refid="namespacels_1_1utils_1a53ed44f6f1c3753ed11e1241ac36647b" kindref="member">hash_t</ref><sp/><ref refid="classls_1_1script_1_1functor__t_1a1a794cef9de1a011b506d9e651355c42" kindref="member">functor_t&lt;hashId, args_t...&gt;::getScriptSubType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hashId;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/>Argument<sp/>Count<sp/>Retrieval</highlight></codeline>
<codeline lineno="177"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacels_1_1utils_1a53ed44f6f1c3753ed11e1241ac36647b" kindref="member">hash_t</ref><sp/>hashId,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="classls_1_1script_1_1functor__t_1a7c46627a05c0db60f0eda54ef697c709" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor__t_1a7c46627a05c0db60f0eda54ef697c709" kindref="member">functor_t&lt;hashId, args_t...&gt;::getNumArgs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(args_t);</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/>Load<sp/>from<sp/>an<sp/>Input<sp/>Stream</highlight></codeline>
<codeline lineno="185"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacels_1_1utils_1a53ed44f6f1c3753ed11e1241ac36647b" kindref="member">hash_t</ref><sp/>hashId,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;</highlight></codeline>
<codeline lineno="187" refid="classls_1_1script_1_1functor__t_1a9750105d975196ff332133c856f9dfb1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor__t_1a9750105d975196ff332133c856f9dfb1" kindref="member">functor_t&lt;hashId, args_t...&gt;::load</ref>(std::istream&amp;<sp/>istr,<sp/><ref refid="namespacels_1_1script_1a7269f0f5e6dd192ead0637331c331671" kindref="member">varLoaderMap</ref>&amp;<sp/>vlm,<sp/><ref refid="namespacels_1_1script_1acbb0b98d89aa532fe62e508927abb22c" kindref="member">funcLoaderMap</ref>&amp;<sp/>flm)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1affeea1a5c68be54375de86a3d93ec99e" kindref="member">functor::load</ref>(istr,<sp/>vlm,<sp/>flm);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(args_t);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istr<sp/>&gt;&gt;<sp/>ptr;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pArgs[<sp/>i<sp/>]<sp/>=<sp/>vlm[<sp/>ptr<sp/>];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/>Save<sp/>to<sp/>an<sp/>Output<sp/>Stream</highlight></codeline>
<codeline lineno="200"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacels_1_1utils_1a53ed44f6f1c3753ed11e1241ac36647b" kindref="member">hash_t</ref><sp/>hashId,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;</highlight></codeline>
<codeline lineno="202" refid="classls_1_1script_1_1functor__t_1a1f2609b0c5207e65c06ab7690f5ee206" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor__t_1a1f2609b0c5207e65c06ab7690f5ee206" kindref="member">functor_t&lt;hashId, args_t...&gt;::save</ref>(std::ostream&amp;<sp/>ostr)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1a912026d4acf2de9d1e647afb11e881b1" kindref="member">functor::save</ref>(ostr);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(args_t);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ostr<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>pArgs[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/><sp/>Argument<sp/>Verification/Compilation</highlight></codeline>
<codeline lineno="212"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="namespacels_1_1utils_1a53ed44f6f1c3753ed11e1241ac36647b" kindref="member">hash_t</ref><sp/>hashId,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>args_t&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="classls_1_1script_1_1functor__t_1aec1084fc2df539f699310246317b4b46" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor__t_1aec1084fc2df539f699310246317b4b46" kindref="member">functor_t&lt;hashId, args_t...&gt;::compile</ref>()<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor_1a8941b6c017a655154efe36670588bb62" kindref="member">functor::checkArgs</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>0,<sp/>((args_t*)</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)...);</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/>Functor<sp/>Derived<sp/>Template<sp/>Types<sp/>(Void<sp/>Functor<sp/>Specialization).</highlight></codeline>
<codeline lineno="220"><highlight class="comment">-----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/>Destructor</highlight></codeline>
<codeline lineno="223"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;hash_t<sp/>hashId&gt;</highlight></codeline>
<codeline lineno="225" refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a8d15e82cac8b71f5f55d0f7711b12670" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor__t_1acf20eeb5edbffbdc3d88dc06896eb01a" kindref="member">functor_t&lt;hashId, void&gt;::~functor_t</ref>()<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/>Constructor</highlight></codeline>
<codeline lineno="230"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;hash_t<sp/>hashId&gt;</highlight></codeline>
<codeline lineno="232" refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a2b1a4d79ddfdfbb3d02ffdeb4d94dc9a" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor__t_1a25ee21bf7fd2d0a22107485d7c18dd51" kindref="member">functor_t&lt;hashId, void&gt;::functor_t</ref>()<sp/>:</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor" kindref="compound">functor</ref>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>functionImpl}</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/>Copy<sp/>Constructor</highlight></codeline>
<codeline lineno="238"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;hash_t<sp/>hashId&gt;</highlight></codeline>
<codeline lineno="240" refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a890b9f6e3a197700816f101a3a170792" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor__t_1a25ee21bf7fd2d0a22107485d7c18dd51" kindref="member">functor_t&lt;hashId, void&gt;::functor_t</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor__t" kindref="compound">functor_t</ref>&amp;<sp/>f)<sp/>:</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor" kindref="compound">functor</ref>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>functionImpl}</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1ac4b5de93a8ba47fa09f0ea186b5e55f4" kindref="member">functor::operator=</ref>(f);</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/>Move<sp/>Constructor</highlight></codeline>
<codeline lineno="248"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;hash_t<sp/>hashId&gt;</highlight></codeline>
<codeline lineno="250" refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a7dabbb79b93a820aaaead00fe99760b2" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor__t_1a25ee21bf7fd2d0a22107485d7c18dd51" kindref="member">functor_t&lt;hashId, void&gt;::functor_t</ref>(<ref refid="classls_1_1script_1_1functor__t" kindref="compound">functor_t</ref>&amp;&amp;<sp/>f)<sp/>:</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor" kindref="compound">functor</ref>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>functionImpl}</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1ac4b5de93a8ba47fa09f0ea186b5e55f4" kindref="member">functor::operator=</ref>(std::move(f));</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/>Copy<sp/>Assignment</highlight></codeline>
<codeline lineno="258"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;hash_t<sp/>hashId&gt;</highlight></codeline>
<codeline lineno="260" refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a6a6d1575a97e1d0ab71fd653a29fb2e6" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4" kindref="compound">functor_t&lt;hashId, void&gt;</ref>&amp;<sp/><ref refid="classls_1_1script_1_1functor__t_1a25e654a8cd67c26060fcc2d410ff7bc0" kindref="member">functor_t&lt;hashId, void&gt;::operator =</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor__t" kindref="compound">functor_t</ref>&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1ac4b5de93a8ba47fa09f0ea186b5e55f4" kindref="member">functor::operator=</ref>(f);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/>Move<sp/>Assignment</highlight></codeline>
<codeline lineno="267"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;hash_t<sp/>hashId&gt;</highlight></codeline>
<codeline lineno="269" refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a0e9f55ebe81499bb65fde0adbfa73506" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4" kindref="compound">functor_t&lt;hashId, void&gt;</ref>&amp;<sp/><ref refid="classls_1_1script_1_1functor__t_1a25e654a8cd67c26060fcc2d410ff7bc0" kindref="member">functor_t&lt;hashId, void&gt;::operator =</ref>(<ref refid="classls_1_1script_1_1functor__t" kindref="compound">functor_t</ref>&amp;&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1ac4b5de93a8ba47fa09f0ea186b5e55f4" kindref="member">functor::operator=</ref>(std::move(f));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/>RTTI</highlight></codeline>
<codeline lineno="276"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;hash_t<sp/>hashId&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a7815911fbd19d04dd799efb38d381829" refkind="member"><highlight class="normal"><ref refid="namespacels_1_1utils_1a53ed44f6f1c3753ed11e1241ac36647b" kindref="member">hash_t</ref><sp/><ref refid="classls_1_1script_1_1functor__t_1a1a794cef9de1a011b506d9e651355c42" kindref="member">functor_t&lt;hashId, void&gt;::getScriptSubType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hashId;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/>Argument<sp/>Count<sp/>Retrieval</highlight></codeline>
<codeline lineno="284"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;hash_t<sp/>hashId&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a43539fe25b3d5743528e6fc95eefe3ff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor__t_1a7c46627a05c0db60f0eda54ef697c709" kindref="member">functor_t&lt;hashId, void&gt;::getNumArgs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/><sp/>Load<sp/>from<sp/>an<sp/>Input<sp/>Stream</highlight></codeline>
<codeline lineno="292"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;hash_t<sp/>hashId&gt;</highlight></codeline>
<codeline lineno="294" refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a4e39c884f5aaa7c4c6f662945c1cd429" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor__t_1a9750105d975196ff332133c856f9dfb1" kindref="member">functor_t&lt;hashId, void&gt;::load</ref>(std::istream&amp;<sp/>istr,<sp/><ref refid="namespacels_1_1script_1a7269f0f5e6dd192ead0637331c331671" kindref="member">varLoaderMap</ref>&amp;<sp/>vlm,<sp/><ref refid="namespacels_1_1script_1acbb0b98d89aa532fe62e508927abb22c" kindref="member">funcLoaderMap</ref>&amp;<sp/>flm)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor_1affeea1a5c68be54375de86a3d93ec99e" kindref="member">functor::load</ref>(istr,<sp/>vlm,<sp/>flm);</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/>Save<sp/>to<sp/>an<sp/>Output<sp/>Stream</highlight></codeline>
<codeline lineno="300"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;hash_t<sp/>hashId&gt;</highlight></codeline>
<codeline lineno="302" refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a722036b4ec6ba3e47331958afb416040" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor__t_1a1f2609b0c5207e65c06ab7690f5ee206" kindref="member">functor_t&lt;hashId, void&gt;::save</ref>(std::ostream&amp;<sp/>ostr)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1a912026d4acf2de9d1e647afb11e881b1" kindref="member">functor::save</ref>(ostr);</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/><sp/>Argument<sp/>Verification/Compilation</highlight></codeline>
<codeline lineno="308"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;hash_t<sp/>hashId&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a533ac1076440101169868d933a37e3d2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor__t_1aec1084fc2df539f699310246317b4b46" kindref="member">functor_t&lt;hashId, void&gt;::compile</ref>()<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>script<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>ls<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/generic/functor_impl.h"/>
  </compounddef>
</doxygen>
