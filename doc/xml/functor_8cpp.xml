<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="functor_8cpp" kind="file">
    <compoundname>functor.cpp</compoundname>
    <includes local="no">utility</includes>
    <includes refid="functor_8h" local="yes">lightsky/script/functor.h</includes>
    <incdepgraph>
      <node id="6880">
        <label>lightsky/utils/hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="6881" relation="include">
        </childnode>
        <childnode refid="6882" relation="include">
        </childnode>
      </node>
      <node id="6881">
        <label>cstdint</label>
      </node>
      <node id="6887">
        <label>lightsky/script/generic/functor_impl.h</label>
        <link refid="functor__impl_8h"/>
      </node>
      <node id="6885">
        <label>string</label>
      </node>
      <node id="6879">
        <label>map</label>
      </node>
      <node id="6873">
        <label>lightsky/script/functor.h</label>
        <link refid="functor_8h"/>
        <childnode refid="6874" relation="include">
        </childnode>
        <childnode refid="6872" relation="include">
        </childnode>
        <childnode refid="6875" relation="include">
        </childnode>
        <childnode refid="6876" relation="include">
        </childnode>
        <childnode refid="6878" relation="include">
        </childnode>
        <childnode refid="6883" relation="include">
        </childnode>
        <childnode refid="6884" relation="include">
        </childnode>
        <childnode refid="6887" relation="include">
        </childnode>
      </node>
      <node id="6877">
        <label>lightsky/setup/macros.h</label>
        <link refid="macros_8h"/>
      </node>
      <node id="6886">
        <label>lightsky/script/generic/variable_impl.h</label>
        <link refid="variable__impl_8h"/>
      </node>
      <node id="6884">
        <label>lightsky/script/variable.h</label>
        <link refid="variable_8h"/>
        <childnode refid="6885" relation="include">
        </childnode>
        <childnode refid="6874" relation="include">
        </childnode>
        <childnode refid="6878" relation="include">
        </childnode>
        <childnode refid="6883" relation="include">
        </childnode>
        <childnode refid="6886" relation="include">
        </childnode>
      </node>
      <node id="6882">
        <label>lightsky/utils/generic/hash_impl.h</label>
        <link refid="hash__impl_8h"/>
      </node>
      <node id="6883">
        <label>lightsky/script/scriptable.h</label>
        <link refid="scriptable_8h"/>
        <childnode refid="6874" relation="include">
        </childnode>
        <childnode refid="6880" relation="include">
        </childnode>
        <childnode refid="6878" relation="include">
        </childnode>
      </node>
      <node id="6875">
        <label>typeinfo</label>
      </node>
      <node id="6872">
        <label>utility</label>
      </node>
      <node id="6871">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/script/src/functor.cpp</label>
        <link refid="functor.cpp"/>
        <childnode refid="6872" relation="include">
        </childnode>
        <childnode refid="6873" relation="include">
        </childnode>
      </node>
      <node id="6874">
        <label>iostream</label>
      </node>
      <node id="6878">
        <label>lightsky/script/setup.h</label>
        <link refid="script_2setup_8h"/>
        <childnode refid="6879" relation="include">
        </childnode>
        <childnode refid="6877" relation="include">
        </childnode>
        <childnode refid="6880" relation="include">
        </childnode>
      </node>
      <node id="6876">
        <label>lightsky/utils/assert.h</label>
        <link refid="assert_8h"/>
        <childnode refid="6877" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacels">ls</innernamespace>
    <innernamespace refid="namespacels_1_1script">ls::script</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>File:<sp/><sp/><sp/>functor.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Miles<sp/>Lacey</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Created<sp/>on<sp/>April<sp/>13,<sp/>2014,<sp/>9:07<sp/>PM</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>std::move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="functor_8h" kindref="compound">lightsky/script/functor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacels" kindref="compound">ls</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">script<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/>Functor<sp/>Base<sp/>Class</highlight></codeline>
<codeline lineno="17"><highlight class="comment">-----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/>Destructor</highlight></codeline>
<codeline lineno="20"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="classls_1_1script_1_1functor_1ae00c4fbeafb2768e853d2a5c30224de0" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor_1ae00c4fbeafb2768e853d2a5c30224de0" kindref="member">functor::~functor</ref>()<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/>Constructor</highlight></codeline>
<codeline lineno="26"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classls_1_1script_1_1functor_1a3c6f0053bd2205db6fa764b4ad747b46" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor_1ad26e83423084b818c23a309dbee38de9" kindref="member">functor::functor</ref>(<ref refid="classls_1_1script_1_1variable" kindref="compound">variable</ref>**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pArguments,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacels_1_1script_1a319408b52de3d462183e0a84e1cf353b" kindref="member">func_ref_t</ref><sp/>pFunc)<sp/>:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1scriptable" kindref="compound">scriptable</ref>{},</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>nextFunc{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>pFunction{pFunc},</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>pArgs{pArguments}</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/>Copy<sp/>Operator</highlight></codeline>
<codeline lineno="36"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classls_1_1script_1_1functor_1ac4b5de93a8ba47fa09f0ea186b5e55f4" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor" kindref="compound">functor</ref>&amp;<sp/><ref refid="classls_1_1script_1_1functor_1ac4b5de93a8ba47fa09f0ea186b5e55f4" kindref="member">functor::operator =</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor" kindref="compound">functor</ref>&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1scriptable_1a0a44fbbc1ef4ebb824a82163257cc490" kindref="member">scriptable::operator=</ref>(f);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>f.<ref refid="classls_1_1script_1_1functor_1add592ec77ef606c708a43ae5191f45e3" kindref="member">getNumArgs</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1ae941567add854b32d89c3100200a3da0" kindref="member">pArgs</ref>[i]<sp/>=<sp/>f.<ref refid="classls_1_1script_1_1functor_1ae941567add854b32d89c3100200a3da0" kindref="member">pArgs</ref>[i];</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1acbfe9e8f75165199dbb1f844889420d8" kindref="member">nextFunc</ref><sp/>=<sp/>f.<ref refid="classls_1_1script_1_1functor_1acbfe9e8f75165199dbb1f844889420d8" kindref="member">nextFunc</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/>Move<sp/>Operator</highlight></codeline>
<codeline lineno="50"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="classls_1_1script_1_1functor_1a1e9ef5080b2e94cf64c93934520c4232" refkind="member"><highlight class="normal"><ref refid="classls_1_1script_1_1functor" kindref="compound">functor</ref>&amp;<sp/><ref refid="classls_1_1script_1_1functor_1ac4b5de93a8ba47fa09f0ea186b5e55f4" kindref="member">functor::operator =</ref>(<ref refid="classls_1_1script_1_1functor" kindref="compound">functor</ref>&amp;&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1scriptable_1a0a44fbbc1ef4ebb824a82163257cc490" kindref="member">scriptable::operator=</ref>(std::move(f));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>f.getNumArgs();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1ae941567add854b32d89c3100200a3da0" kindref="member">pArgs</ref>[i]<sp/>=<sp/>f.pArgs[i];</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.pArgs[i]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1acbfe9e8f75165199dbb1f844889420d8" kindref="member">nextFunc</ref><sp/>=<sp/>f.<ref refid="classls_1_1script_1_1functor_1acbfe9e8f75165199dbb1f844889420d8" kindref="member">nextFunc</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>f.<ref refid="classls_1_1script_1_1functor_1acbfe9e8f75165199dbb1f844889420d8" kindref="member">nextFunc</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/>Loading<sp/>a<sp/>functor<sp/>from<sp/>an<sp/>input<sp/>stream</highlight></codeline>
<codeline lineno="67"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classls_1_1script_1_1functor_1affeea1a5c68be54375de86a3d93ec99e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor_1affeea1a5c68be54375de86a3d93ec99e" kindref="member">functor::load</ref>(std::istream&amp;<sp/>istr,<sp/><ref refid="namespacels_1_1script_1a7269f0f5e6dd192ead0637331c331671" kindref="member">varLoaderMap</ref>&amp;,<sp/><ref refid="namespacels_1_1script_1acbb0b98d89aa532fe62e508927abb22c" kindref="member">funcLoaderMap</ref>&amp;<sp/>flm)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacels_1_1utils_1a53ed44f6f1c3753ed11e1241ac36647b" kindref="member">hash_t</ref><sp/>nextType<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>istr<sp/>&gt;&gt;<sp/>nextType<sp/>&gt;&gt;<sp/>ptr;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1acbfe9e8f75165199dbb1f844889420d8" kindref="member">nextFunc</ref><sp/>=<sp/>flm[ptr];</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>instance<sp/>of<sp/>the<sp/>next<sp/>function<sp/>if<sp/>it<sp/>wasn&apos;t<sp/>in<sp/>the<sp/>functor<sp/>loader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classls_1_1script_1_1functor_1acbfe9e8f75165199dbb1f844889420d8" kindref="member">nextFunc</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>ptr<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1functor_1acbfe9e8f75165199dbb1f844889420d8" kindref="member">nextFunc</ref><sp/>=<sp/>flm[ptr]<sp/>=<sp/>(*<ref refid="namespacels_1_1script_1a19d0e7d2d56f7a43dd886035ded61afd" kindref="member">gFuncFactory</ref>.at(nextType))();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*-------------------------------------</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/>Saving<sp/>a<sp/>functor<sp/>to<sp/>an<sp/>output<sp/>stream</highlight></codeline>
<codeline lineno="86"><highlight class="comment">-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="classls_1_1script_1_1functor_1a912026d4acf2de9d1e647afb11e881b1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1functor_1a912026d4acf2de9d1e647afb11e881b1" kindref="member">functor::save</ref>(std::ostream&amp;<sp/>ostr)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classls_1_1script_1_1functor_1acbfe9e8f75165199dbb1f844889420d8" kindref="member">nextFunc</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ostr<sp/>&lt;&lt;<sp/>0<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ostr<sp/>&lt;&lt;<sp/><ref refid="classls_1_1script_1_1functor_1acbfe9e8f75165199dbb1f844889420d8" kindref="member">nextFunc</ref>-&gt;<ref refid="classls_1_1script_1_1functor_1a4c872e2fd539ac19f8059714c263e30b" kindref="member">getScriptSubType</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<ref refid="classls_1_1script_1_1functor_1acbfe9e8f75165199dbb1f844889420d8" kindref="member">nextFunc</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/>Built-In<sp/>Types</highlight></codeline>
<codeline lineno="98"><highlight class="comment">-----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="namespacels_1_1script_1af3e61aa6733be06569b760af95918a05" refkind="member"><highlight class="normal"><ref refid="namespacels_1_1script_1af3e61aa6733be06569b760af95918a05" kindref="member">LS_SCRIPT_DEFINE_FUNC</ref>(empty,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)pArgs;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>script<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>ls<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/src/functor.cpp"/>
  </compounddef>
</doxygen>
