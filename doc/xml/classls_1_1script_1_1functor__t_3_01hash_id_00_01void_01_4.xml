<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4" kind="class" prot="public" final="yes">
    <compoundname>ls::script::functor_t&lt; hashId, void &gt;</compoundname>
    <basecompoundref refid="classls_1_1script_1_1functor" prot="public" virt="non-virtual">ls::script::functor</basecompoundref>
    <includes refid="functor_8h" local="no">functor.h</includes>
    <templateparamlist>
      <param>
        <type>hash_t</type>
        <declname>hashId</declname>
        <defname>hashId</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1aec7f709cf5566871a2cfd1cd8c0835a7" prot="private" static="yes" mutable="no">
        <type>const <ref refid="namespacels_1_1script_1a319408b52de3d462183e0a84e1cf353b" kindref="member">func_ref_t</ref></type>
        <definition>const func_ref_t ls::script::functor_t&lt; hashId, void &gt;::functionImpl</definition>
        <argsstring></argsstring>
        <name>functionImpl</name>
        <briefdescription>
<para>Implementation of the function to be run. </para>        </briefdescription>
        <detaileddescription>
<para>This static member is defined through the LS_SCRIPT_DEFINE_FUNC macro. The static functionImpl member is what will actually be called when this function is run. Use this to define mappings of internal argument indices to actual native function parameters and return values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pArgs</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an array of pointers to scriptable variables (this will actually be the &apos;parameters&apos; member in *this). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h" line="574" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h" bodystart="574" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a8d15e82cac8b71f5f55d0f7711b12670" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>ls::script::functor_t&lt; hashId, void &gt;::~functor_t</definition>
        <argsstring>()</argsstring>
        <name>~functor_t</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
<para>Frees all resources used by *this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h" line="582" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/generic/functor_impl.h" bodystart="225" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a2b1a4d79ddfdfbb3d02ffdeb4d94dc9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::script::functor_t&lt; hashId, void &gt;::functor_t</definition>
        <argsstring>()</argsstring>
        <name>functor_t</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Initializes *this and all base classes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h" line="589" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/generic/functor_impl.h" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a890b9f6e3a197700816f101a3a170792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::script::functor_t&lt; hashId, void &gt;::functor_t</definition>
        <argsstring>(const functor_t &amp;f)</argsstring>
        <name>functor_t</name>
        <param>
          <type>const <ref refid="classls_1_1script_1_1functor__t" kindref="compound">functor_t</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Copy Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Copies all data from a functor of the same type into *this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to another functor of the same template type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h" line="599" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/generic/functor_impl.h" bodystart="240" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a7dabbb79b93a820aaaead00fe99760b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::script::functor_t&lt; hashId, void &gt;::functor_t</definition>
        <argsstring>(functor_t &amp;&amp;f)</argsstring>
        <name>functor_t</name>
        <param>
          <type><ref refid="classls_1_1script_1_1functor__t" kindref="compound">functor_t</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Move Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Moves all data from a functor of the same type into *this without performing any copies.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>An r-value reference to another functor of the same template type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h" line="610" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/generic/functor_impl.h" bodystart="250" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a6a6d1575a97e1d0ab71fd653a29fb2e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classls_1_1script_1_1functor__t" kindref="compound">functor_t</ref> &amp;</type>
        <definition>functor_t&lt; hashId, void &gt; &amp; ls::script::functor_t&lt; hashId, void &gt;::operator=</definition>
        <argsstring>(const functor_t &amp;f)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classls_1_1script_1_1functor__t" kindref="compound">functor_t</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Copy Assignment. </para>        </briefdescription>
        <detaileddescription>
<para>Copies all data from a functor of the same type into *this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to another functor of the same template type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to *this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h" line="622" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/generic/functor_impl.h" bodystart="260" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a0e9f55ebe81499bb65fde0adbfa73506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classls_1_1script_1_1functor__t" kindref="compound">functor_t</ref> &amp;</type>
        <definition>functor_t&lt; hashId, void &gt; &amp; ls::script::functor_t&lt; hashId, void &gt;::operator=</definition>
        <argsstring>(functor_t &amp;&amp;f)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classls_1_1script_1_1functor__t" kindref="compound">functor_t</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Move Assignment. </para>        </briefdescription>
        <detaileddescription>
<para>Moves all data from a functor of the same type into *this without performing any copies.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>An r-value reference to another functor of the same template type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to *this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h" line="635" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/generic/functor_impl.h" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a7815911fbd19d04dd799efb38d381829" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>hash_t</type>
        <definition>hash_t ls::script::functor_t&lt; hashId, void &gt;::getScriptSubType</definition>
        <argsstring>() const final</argsstring>
        <name>getScriptSubType</name>
        <reimplements refid="classls_1_1script_1_1functor_1a4c872e2fd539ac19f8059714c263e30b">getScriptSubType</reimplements>
        <briefdescription>
<para>Get the run-time-type information of *this functor. </para>        </briefdescription>
        <detaileddescription>
<para>This method will return a hash-code, indicating what type of functor *this is. The has code is unique to types of functors, not individual functor objects. This hash code is used by the global script factories in order to generate a functor at run-time.</para><para><simplesect kind="return"><para>hash_t A hash-code that identifies the RTTI information of *this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h" line="648" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/generic/functor_impl.h" bodystart="278" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a43539fe25b3d5743528e6fc95eefe3ff" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>unsigned</type>
        <definition>unsigned ls::script::functor_t&lt; hashId, void &gt;::getNumArgs</definition>
        <argsstring>() const final</argsstring>
        <name>getNumArgs</name>
        <reimplements refid="classls_1_1script_1_1functor_1add592ec77ef606c708a43ae5191f45e3">getNumArgs</reimplements>
        <briefdescription>
<para>Retrieve the number of arguments required to run *this. </para>        </briefdescription>
        <detaileddescription>
<para>The number of arguments to the functor is not always the same number of arguments that *this functor&apos;s native function needs. Functor arguments can be mapped to return values, or to sequences of internal functions. It is up to the definition code to determine where functor arguments are mapped.</para><para><simplesect kind="return"><para>An unsigned integral type, indicating how many arguments *this functor needs to run. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h" line="662" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/generic/functor_impl.h" bodystart="286" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a4e39c884f5aaa7c4c6f662945c1cd429" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool ls::script::functor_t&lt; hashId, void &gt;::load</definition>
        <argsstring>(std::istream &amp;istr, varLoaderMap &amp;vlm, funcLoaderMap &amp;flm) final</argsstring>
        <name>load</name>
        <reimplements refid="classls_1_1script_1_1functor_1affeea1a5c68be54375de86a3d93ec99e">load</reimplements>
        <param>
          <type>std::istream &amp;</type>
          <declname>istr</declname>
        </param>
        <param>
          <type><ref refid="namespacels_1_1script_1a7269f0f5e6dd192ead0637331c331671" kindref="member">varLoaderMap</ref> &amp;</type>
          <declname>vlm</declname>
        </param>
        <param>
          <type><ref refid="namespacels_1_1script_1acbb0b98d89aa532fe62e508927abb22c" kindref="member">funcLoaderMap</ref> &amp;</type>
          <declname>flm</declname>
        </param>
        <briefdescription>
<para>Load functor data from an std::istream. </para>        </briefdescription>
        <detaileddescription>
<para>A serialization method to will help reload data from a standard input stream. This method uses the overloaded input stream operator &apos;std::istream::operator&gt;&gt; (T)&apos; in order to load functor data into *this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>istr</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a std::istream object which contains functor data to be loaded into *this.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vlm</parametername>
</parameternamelist>
<parameterdescription>
<para>A variable-loading factory that will be used to map variable data from the input stream into *this.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flm</parametername>
</parameternamelist>
<parameterdescription>
<para>A function-loading factory that will be used to map functor data from the input stream into *this.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a boolean value that will determine if data was successfully loaded into *this (TRUE) or not (FALSE). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h" line="687" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/generic/functor_impl.h" bodystart="294" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a722036b4ec6ba3e47331958afb416040" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void ls::script::functor_t&lt; hashId, void &gt;::save</definition>
        <argsstring>(std::ostream &amp;ostr) const final</argsstring>
        <name>save</name>
        <reimplements refid="classls_1_1script_1_1functor_1a912026d4acf2de9d1e647afb11e881b1">save</reimplements>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ostr</declname>
        </param>
        <briefdescription>
<para>Save all data from *this into an std::ostream. </para>        </briefdescription>
        <detaileddescription>
<para>In this instance, functors, references to other functors, and variables are all saved using RTTI information. Scriptable objects are not saved, just their type-info. All data is mapped to/from the &apos;loaderMap&apos; objects in order to ensure cross-references are maintained when reloaded from an input stream.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ostr</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to an std::ostream object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h" line="701" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/generic/functor_impl.h" bodystart="302" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a533ac1076440101169868d933a37e3d2" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool ls::script::functor_t&lt; hashId, void &gt;::compile</definition>
        <argsstring>() final</argsstring>
        <name>compile</name>
        <reimplements refid="classls_1_1script_1_1functor_1a7a8f015d962fbe40d172661a5d31c4ca">compile</reimplements>
        <briefdescription>
<para>Compile/Verify function arguments. </para>        </briefdescription>
        <detaileddescription>
<para>This method ensures that a functor is safe to operate at run-time. It uses custom RTTI information, combined with derived-type&apos;s template parameters to ensure that the proper arguments are placed in the correct order at run-time.</para><para><simplesect kind="note"><para>Because the scripting system does not manage the order in which you actually use arguments, please ensure that your functor-mapping code is consistent with the derived functor&apos;s template parameters.</para></simplesect>
<simplesect kind="return"><para>TRUE if a functor managed to compile correctly, FALSE if not. If this function returns false, please check std::cerr for information on what went wrong. This will be changed in the future in order to provide more convenient error tracking. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h" line="721" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/generic/functor_impl.h" bodystart="310" bodyend="312"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><heading level="2">Functor Template Type with Void Parameters </heading>
</para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
 </para>    </detaileddescription>
    <inheritancegraph>
      <node id="49">
        <label>ls::script::functor</label>
        <link refid="classls_1_1script_1_1functor"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
      <node id="48">
        <label>ls::script::functor_t&lt; hashId, void &gt;</label>
        <link refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4"/>
        <childnode refid="49" relation="public-inheritance">
        </childnode>
      </node>
      <node id="50">
        <label>ls::script::scriptable</label>
        <link refid="classls_1_1script_1_1scriptable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="52">
        <label>ls::script::functor</label>
        <link refid="classls_1_1script_1_1functor"/>
        <childnode refid="53" relation="public-inheritance">
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>pArgs</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>nextFunc</edgelabel>
        </childnode>
      </node>
      <node id="54">
        <label>ls::script::variable</label>
        <link refid="classls_1_1script_1_1variable"/>
        <childnode refid="53" relation="public-inheritance">
        </childnode>
      </node>
      <node id="51">
        <label>ls::script::functor_t&lt; hashId, void &gt;</label>
        <link refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4"/>
        <childnode refid="52" relation="public-inheritance">
        </childnode>
      </node>
      <node id="53">
        <label>ls::script::scriptable</label>
        <link refid="classls_1_1script_1_1scriptable"/>
      </node>
    </collaborationgraph>
    <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h" line="558" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h" bodystart="558" bodyend="722"/>
    <listofallmembers>
      <member refid="classls_1_1script_1_1functor_1a8941b6c017a655154efe36670588bb62" prot="protected" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>checkArgs</name></member>
      <member refid="classls_1_1script_1_1functor_1a28e482e376b79bd66a2d4555065b78fa" prot="protected" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>checkArgs</name></member>
      <member refid="classls_1_1script_1_1functor_1acfec7ad11fcb55d1f3ee340ad90defda" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>checkArgs</name></member>
      <member refid="classls_1_1script_1_1functor_1a987920da0ac130e7ef4886244da54462" prot="protected" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>checkSingleArg</name></member>
      <member refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a533ac1076440101169868d933a37e3d2" prot="public" virt="virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>compile</name></member>
      <member refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1aec7f709cf5566871a2cfd1cd8c0835a7" prot="private" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>functionImpl</name></member>
      <member refid="classls_1_1script_1_1functor_1a3c6f0053bd2205db6fa764b4ad747b46" prot="protected" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>functor</name></member>
      <member refid="classls_1_1script_1_1functor_1ad26e83423084b818c23a309dbee38de9" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>functor</name></member>
      <member refid="classls_1_1script_1_1functor_1af7dd673af12b19cd6b9ce9ae5f1fe4c6" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>functor</name></member>
      <member refid="classls_1_1script_1_1functor_1af05cc14d2af4787968ca11b20e0f853d" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>functor</name></member>
      <member refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a2b1a4d79ddfdfbb3d02ffdeb4d94dc9a" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>functor_t</name></member>
      <member refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a890b9f6e3a197700816f101a3a170792" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>functor_t</name></member>
      <member refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a7dabbb79b93a820aaaead00fe99760b2" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>functor_t</name></member>
      <member refid="classls_1_1script_1_1functor_1a618828b53466cb566e4b3021731cc365" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>getArg</name></member>
      <member refid="classls_1_1script_1_1functor_1a060497e0e2440b8e808dca09cd3ef00d" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>getNextFunc</name></member>
      <member refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a43539fe25b3d5743528e6fc95eefe3ff" prot="public" virt="virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>getNumArgs</name></member>
      <member refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a7815911fbd19d04dd799efb38d381829" prot="public" virt="virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>getScriptSubType</name></member>
      <member refid="classls_1_1script_1_1functor_1ac47c53ecc1323ad42a22bc1d822ca7ad" prot="public" virt="virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>getScriptType</name></member>
      <member refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a4e39c884f5aaa7c4c6f662945c1cd429" prot="public" virt="virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>load</name></member>
      <member refid="classls_1_1script_1_1functor_1acbfe9e8f75165199dbb1f844889420d8" prot="protected" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>nextFunc</name></member>
      <member refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a6a6d1575a97e1d0ab71fd653a29fb2e6" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>operator=</name></member>
      <member refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a0e9f55ebe81499bb65fde0adbfa73506" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>operator=</name></member>
      <member refid="classls_1_1script_1_1functor_1ac4b5de93a8ba47fa09f0ea186b5e55f4" prot="public" virt="non-virtual" ambiguityscope="ls::script::functor::"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>operator=</name></member>
      <member refid="classls_1_1script_1_1functor_1a1e9ef5080b2e94cf64c93934520c4232" prot="public" virt="non-virtual" ambiguityscope="ls::script::functor::"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>operator=</name></member>
      <member refid="classls_1_1script_1_1scriptable_1a0a44fbbc1ef4ebb824a82163257cc490" prot="public" virt="non-virtual" ambiguityscope="ls::script::scriptable::"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>operator=</name></member>
      <member refid="classls_1_1script_1_1scriptable_1ae5ab31974a89ab5b3ce4e5b4c3d51591" prot="public" virt="non-virtual" ambiguityscope="ls::script::scriptable::"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>operator=</name></member>
      <member refid="classls_1_1script_1_1functor_1ae941567add854b32d89c3100200a3da0" prot="protected" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>pArgs</name></member>
      <member refid="classls_1_1script_1_1functor_1a617aa828e6583631566752ed312e12e8" prot="protected" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>pFunction</name></member>
      <member refid="classls_1_1script_1_1functor_1a7598508969b165e43cf0b59d604a9e96" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>run</name></member>
      <member refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a722036b4ec6ba3e47331958afb416040" prot="public" virt="virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>save</name></member>
      <member refid="classls_1_1script_1_1scriptable_1adf074cf8a86531adc5e273e5bbfb46e2" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>scriptable</name></member>
      <member refid="classls_1_1script_1_1scriptable_1a99f50f8744279cbbd954c124b3dbb9f9" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>scriptable</name></member>
      <member refid="classls_1_1script_1_1scriptable_1a7838ffef45488993cbd83305ac2a121b" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>scriptable</name></member>
      <member refid="classls_1_1script_1_1functor_1abaffa911b2d74b755f817fe7090b82b6" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>setArg</name></member>
      <member refid="classls_1_1script_1_1functor_1af6ba6622fdf347e7db2760ee30e7556f" prot="public" virt="non-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>setNextFunc</name></member>
      <member refid="classls_1_1script_1_1functor_1ae00c4fbeafb2768e853d2a5c30224de0" prot="public" virt="pure-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>~functor</name></member>
      <member refid="classls_1_1script_1_1functor__t_3_01hash_id_00_01void_01_4_1a8d15e82cac8b71f5f55d0f7711b12670" prot="public" virt="virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>~functor_t</name></member>
      <member refid="classls_1_1script_1_1scriptable_1a7ac9302b44878e7e1ed78400e3651cde" prot="public" virt="pure-virtual"><scope>ls::script::functor_t&lt; hashId, void &gt;</scope><name>~scriptable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
