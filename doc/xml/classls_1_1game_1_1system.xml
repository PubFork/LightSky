<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="classls_1_1game_1_1system" kind="class" prot="public">
    <compoundname>ls::game::system</compoundname>
    <includes refid="system_8h" local="no">system.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classls_1_1game_1_1system_1ac773f96f0d76c6ae6f08cedc64f5271f" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float ls::game::system::prevTime</definition>
        <argsstring></argsstring>
        <name>prevTime</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stores the previous hardware time since the last update. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="36" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classls_1_1game_1_1system_1af3c992dbd57da4bb46168d766cbaff80" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float ls::game::system::tickTime</definition>
        <argsstring></argsstring>
        <name>tickTime</name>
        <initializer>= 0.f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Duration of the last &quot;tick,&quot; or the last time that the &quot;run()&quot; function had been called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="42" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classls_1_1game_1_1system_1a3b9f177c35d0a007ed72d7b83c722e98" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classls_1_1game_1_1game_state" kindref="compound">gameState</ref> * &gt;</type>
        <definition>std::vector&lt;gameState*&gt; ls::game::system::gameList</definition>
        <argsstring></argsstring>
        <name>gameList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A vector of game states. The game will stop running when there are no more states left in the list. Push a state into *this, then call &quot;run()&quot; in a loop in order to keep a game running. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="50" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classls_1_1game_1_1system_1a69aa01c91a70a5b2a22bea187fb4e86c" prot="private" static="no" mutable="no">
        <type><ref refid="classls_1_1draw_1_1display" kindref="compound">ls::draw::display</ref> *</type>
        <definition>ls::draw::display* ls::game::system::pDisplay</definition>
        <argsstring></argsstring>
        <name>pDisplay</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display object owned by *this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="55" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classls_1_1game_1_1system_1a2530a2db88fe3f15beaa092cb92c513d" prot="private" static="no" mutable="no">
        <type><ref refid="classls_1_1draw_1_1context" kindref="compound">ls::draw::context</ref></type>
        <definition>ls::draw::context ls::game::system::renderContext</definition>
        <argsstring></argsstring>
        <name>renderContext</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>OpenGL render context owned by *this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="60" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classls_1_1game_1_1system_1ae325cf7c3b7f98adcea4fd28b7503330" prot="private" static="no" mutable="no">
        <type><ref refid="classls_1_1utils_1_1random_num" kindref="compound">ls::utils::randomNum</ref> *</type>
        <definition>ls::utils::randomNum* ls::game::system::prng</definition>
        <argsstring></argsstring>
        <name>prng</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pseudo-Random Number Generator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="65" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classls_1_1game_1_1system_1af478ebe575015562c58168a15732fe04" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ls::game::system::passHardwareEvents</definition>
        <argsstring>(const SDL_Event &amp;evt, gameState *const pState)</argsstring>
        <name>passHardwareEvents</name>
        <param>
          <type>const SDL_Event &amp;</type>
          <declname>evt</declname>
        </param>
        <param>
          <type><ref refid="classls_1_1game_1_1game_state" kindref="compound">gameState</ref> *const</type>
          <declname>pState</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send SDL hardware events to each object in the game list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evt</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to the event which was generated by SDL;</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pState</parametername>
</parameternamelist>
<parameterdescription>
<para>A pionter to a game state which will be sent hardware events. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="76" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/src/system.cpp" bodystart="176" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1af69069ed9c174883b2412a5f74221cff" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ls::game::system::updateGameStates</definition>
        <argsstring>(float tickTime)</argsstring>
        <name>updateGameStates</name>
        <param>
          <type>float</type>
          <declname>tickTime</declname>
        </param>
        <briefdescription>
<para>Update all game states in the list. </para>        </briefdescription>
        <detaileddescription>
<para>This method will iterate through all game states and pass hardware events to them. After the events are passed to each state, then the game states will be queried for their current state. States that are stopped will be removed from the state stack, others will have their &apos;onStart()&apos; or &apos;onPause()&apos; method called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tickTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of time, in milliseconds, which has passed since the last update. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="91" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/src/system.cpp" bodystart="213" bodyend="243"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classls_1_1game_1_1system_1a4e9868ae6d5a6145abb292eb1c0cff8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::game::system::system</definition>
        <argsstring>()</argsstring>
        <name>system</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Initializes all members in *this to their default values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="99" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/src/system.cpp" bodystart="24" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1a3fafbffadadfa756846d93ef67745296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::game::system::system</definition>
        <argsstring>(const system &amp;)=delete</argsstring>
        <name>system</name>
        <param>
          <type>const <ref refid="classls_1_1game_1_1system" kindref="compound">system</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy Constructor <ndash/> DELETED. </para>        </briefdescription>
        <detaileddescription>
<para>Deleted as this would require a copy of all game states held by this object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1ab51c000faa6135fdb2d9341ccc9dcdaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::game::system::system</definition>
        <argsstring>(system &amp;&amp;sys)</argsstring>
        <name>system</name>
        <param>
          <type><ref refid="classls_1_1game_1_1system" kindref="compound">system</ref> &amp;&amp;</type>
          <declname>sys</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sys</parametername>
</parameternamelist>
<parameterdescription>
<para>An r-value reference to another state object who&apos;s members will be moved into *this. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="116" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/src/system.cpp" bodystart="30" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1a7f37c4ac8fb66d664a5d3fd452a39a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::game::system::~system</definition>
        <argsstring>()</argsstring>
        <name>~system</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
<para>The subsystem destructor will call &quot;terminate(),&quot; releasing the memory of all <ref refid="classls_1_1game_1_1game_state" kindref="compound">gameState</ref> objects held within the gameStack. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="124" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/src/system.cpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1a5415fa3d18468f19822f53d28f2a83ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classls_1_1game_1_1system" kindref="compound">system</ref> &amp;</type>
        <definition>system&amp; ls::game::system::operator=</definition>
        <argsstring>(const system &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classls_1_1game_1_1system" kindref="compound">system</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy operator <ndash/> DELETED. </para>        </briefdescription>
        <detaileddescription>
<para>This method has been deleted in order to avoid a copy of all gameStates managed by this container. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1a0cd84c7e27d23d4979ef79785e38ca1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classls_1_1game_1_1system" kindref="compound">system</ref> &amp;</type>
        <definition>system &amp; ls::game::system::operator=</definition>
        <argsstring>(system &amp;&amp;sys)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classls_1_1game_1_1system" kindref="compound">system</ref> &amp;&amp;</type>
          <declname>sys</declname>
        </param>
        <briefdescription>
<para>Move operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sys</parametername>
</parameternamelist>
<parameterdescription>
<para>An r-value reference to another state object who&apos;s members will be moved into *this.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to *this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="143" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/src/system.cpp" bodystart="44" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1a8b125963dfa4a13c6c9f5305f891465f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::game::system::init</definition>
        <argsstring>(ls::draw::display &amp;disp, bool useVsync=true)</argsstring>
        <name>init</name>
        <param>
          <type><ref refid="classls_1_1draw_1_1display" kindref="compound">ls::draw::display</ref> &amp;</type>
          <declname>disp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useVsync</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>SubSystem initialization. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>disp</parametername>
</parameternamelist>
<parameterdescription>
<para>A display object. If the display is not already running, this method will cause if to be created. The display will remain attached to *this object until &quot;terminate()&quot; is called.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useVsync</parametername>
</parameternamelist>
<parameterdescription>
<para>Determine if the display should have VSync enabled.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if this object was successfully initialized. FALSE if something went wrong. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="159" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/src/system.cpp" bodystart="71" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1aa3b7c235eb1ca974e6c1a725ab339176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ls::game::system::terminate</definition>
        <argsstring>()</argsstring>
        <name>terminate</name>
        <briefdescription>
<para>Terminate *this and all sub-states. </para>        </briefdescription>
        <detaileddescription>
<para>This method will free all memory and resources of all game states managed by this container. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="167" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/src/system.cpp" bodystart="116" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1ad97510a2a09e92649fe4ddb03f7fa008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ls::game::system::run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <briefdescription>
<para>Begin a game loop. </para>        </briefdescription>
        <detaileddescription>
<para>This method will iterate through all gameStates , pass them hardware events, and call their methods to start, stop, pause, or update. This method must be called in a program&apos;s main loop. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="176" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/src/system.cpp" bodystart="135" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1a00ed5b74e003305caf14a005cb9b07a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ls::game::system::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <briefdescription>
<para>Stop. </para>        </briefdescription>
        <detaileddescription>
<para>This method will iterate through each managed game state and stop them, thereby destroying each owned state. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="184" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/src/system.cpp" bodystart="324" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1aac718c57b9bfbd0d0267d1356d03e5ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::game::system::pushGameState</definition>
        <argsstring>(gameState *const pState)</argsstring>
        <name>pushGameState</name>
        <param>
          <type><ref refid="classls_1_1game_1_1game_state" kindref="compound">gameState</ref> *const</type>
          <declname>pState</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Push a game state onto the state list. All prior states will be paused, allowing the topmost state to receive hardware events.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pState</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classls_1_1game_1_1game_state" kindref="compound">gameState</ref> object allocated with &quot;new.&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="193" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/src/system.cpp" bodystart="248" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1a39018d0bcfc02ca94a43f3e1a6aa2b78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ls::game::system::popGameState</definition>
        <argsstring>()</argsstring>
        <name>popGameState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pop the last game state from the list. If there are no states left in the list, the system will stop. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="199" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/src/system.cpp" bodystart="264" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1a5705451210d89fc000bfbba8a788bb8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ls::game::system::popGameState</definition>
        <argsstring>(gameState *const pState)</argsstring>
        <name>popGameState</name>
        <param>
          <type><ref refid="classls_1_1game_1_1game_state" kindref="compound">gameState</ref> *const</type>
          <declname>pState</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search for a game state in the list and remove it if it exists.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pState</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the desired game state. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="207" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/src/system.cpp" bodystart="273" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1a8aa1c83984297a48c56af85792d4c444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ls::game::system::popGameState</definition>
        <argsstring>(unsigned index)</argsstring>
        <name>popGameState</name>
        <param>
          <type>unsigned</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search for a game state in the list and remove it if it exists.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>An index of the desired game state. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="215" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/src/system.cpp" bodystart="285" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1a17633e04150210df0c30abb8fe72647a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classls_1_1game_1_1game_state" kindref="compound">gameState</ref> const *</type>
        <definition>gameState const * ls::game::system::getGameState</definition>
        <argsstring>(unsigned index) const </argsstring>
        <name>getGameState</name>
        <param>
          <type>unsigned</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a game state using an index.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the desired gamestate contained in *this.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the desired game state. Null if the index was out of bounds. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="226" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/src/system.cpp" bodystart="297" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1aca5978b0126c16a90323a9b3b7189717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned ls::game::system::getGameStateIndex</definition>
        <argsstring>(gameState *const pState)</argsstring>
        <name>getGameStateIndex</name>
        <param>
          <type><ref refid="classls_1_1game_1_1game_state" kindref="compound">gameState</ref> *const</type>
          <declname>pState</declname>
        </param>
        <briefdescription>
<para>Get the index of a game state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pState</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the desired game state contained in *this.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index of the game state held within the game list. GAME_INVALID if the state was not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="237" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/src/system.cpp" bodystart="310" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1a8fdec050c5ee307ebc1ba4a388b29004" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned ls::game::system::getGameStackSize</definition>
        <argsstring>() const </argsstring>
        <name>getGameStackSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of game states contained within *this.</para><para><simplesect kind="return"><para>The number of states managed by this system. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="244" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/generic/system_impl.h" bodystart="8" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1a608484eeda70cd7c41134d9f66d36881" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classls_1_1draw_1_1display" kindref="compound">ls::draw::display</ref> &amp;</type>
        <definition>const ls::draw::display &amp; ls::game::system::getDisplay</definition>
        <argsstring>() const </argsstring>
        <name>getDisplay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a reference to the current display object.</para><para><simplesect kind="return"><para>a const reference to a display object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="251" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/generic/system_impl.h" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1a28f2eb4c52fa9da521b0e0915244b908" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classls_1_1draw_1_1display" kindref="compound">ls::draw::display</ref> &amp;</type>
        <definition>ls::draw::display &amp; ls::game::system::getDisplay</definition>
        <argsstring>()</argsstring>
        <name>getDisplay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a reference to the current display object.</para><para><simplesect kind="return"><para>a reference to a display object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="258" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/generic/system_impl.h" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1ab34c7fa2a9bbb0bc1d0d371debd79c67" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classls_1_1draw_1_1context" kindref="compound">ls::draw::context</ref> &amp;</type>
        <definition>const ls::draw::context &amp; ls::game::system::getContext</definition>
        <argsstring>() const </argsstring>
        <name>getContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a constant reference to the object responsible for managing the OpenGL render context.</para><para><simplesect kind="return"><para>a const reference to a <ref refid="classls_1_1draw_1_1context" kindref="compound">ls::draw::context</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="266" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/generic/system_impl.h" bodystart="29" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1ab092c128f71326d12b957cd66c2600ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classls_1_1draw_1_1context" kindref="compound">ls::draw::context</ref> &amp;</type>
        <definition>ls::draw::context &amp; ls::game::system::getContext</definition>
        <argsstring>()</argsstring>
        <name>getContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a reference to the object responsible for managing the OpenGL render context.</para><para><simplesect kind="return"><para>a reference to an <ref refid="classls_1_1draw_1_1context" kindref="compound">ls::draw::context</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="274" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/generic/system_impl.h" bodystart="36" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1a20d4f0d48776628c46657b0b266371cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classls_1_1utils_1_1random_num" kindref="compound">ls::utils::randomNum</ref> &amp;</type>
        <definition>const ls::utils::randomNum &amp; ls::game::system::getPrng</definition>
        <argsstring>() const </argsstring>
        <name>getPrng</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a reference to the system prng (pseudo-random number generator).</para><para><simplesect kind="return"><para>a const reference to a <ref refid="classls_1_1utils_1_1random_num" kindref="compound">ls::utils::randomNum</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="281" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/generic/system_impl.h" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1ab668f981d946b4dbdc7aef9e9645adf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classls_1_1utils_1_1random_num" kindref="compound">ls::utils::randomNum</ref> &amp;</type>
        <definition>ls::utils::randomNum &amp; ls::game::system::getPrng</definition>
        <argsstring>()</argsstring>
        <name>getPrng</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a reference to the system prng (pseudo-random number generator).</para><para><simplesect kind="return"><para>a reference to a <ref refid="classls_1_1utils_1_1random_num" kindref="compound">ls::utils::randomNum</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="288" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/generic/system_impl.h" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1a205732814452ecdd8e74b70bc137592c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float ls::game::system::getTickTime</definition>
        <argsstring>() const </argsstring>
        <name>getTickTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current number of ticks per frame (in milliseconds).</para><para><simplesect kind="return"><para>A floating point number which represents the number of milliseconds which have passed since the last complete update. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="296" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/generic/system_impl.h" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1game_1_1system_1ad1f7cc3596d49d92cd4f054cd4d9723d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::game::system::isRunning</definition>
        <argsstring>() const </argsstring>
        <name>isRunning</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if *this system is still running and operational. This function has the same effect as querying this-&gt;<ref refid="classls_1_1game_1_1system_1a8fdec050c5ee307ebc1ba4a388b29004" kindref="member">getGameStackSize()</ref> &gt; 0</para><para><simplesect kind="return"><para>TRUE if the game list has something pushed onto it, FALSE if otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="306" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/generic/system_impl.h" bodystart="64" bodyend="66"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><hruler/>
 The system object commands all hardware events and passes them to any <ref refid="classls_1_1game_1_1game_state" kindref="compound">gameState</ref> objects that it manages. Game state objects are freed from memory when this object gets destroyed, therefore, all <ref refid="classls_1_1game_1_1game_state" kindref="compound">gameState</ref> objects managed by <heading level="2">a subSystem must be created using the &quot;new&quot; operator. </heading>
</para>    </detaileddescription>
    <location file="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" line="31" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/game/system.h" bodystart="31" bodyend="307"/>
    <listofallmembers>
      <member refid="classls_1_1game_1_1system_1a3b9f177c35d0a007ed72d7b83c722e98" prot="private" virt="non-virtual"><scope>ls::game::system</scope><name>gameList</name></member>
      <member refid="classls_1_1game_1_1system_1ab34c7fa2a9bbb0bc1d0d371debd79c67" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>getContext</name></member>
      <member refid="classls_1_1game_1_1system_1ab092c128f71326d12b957cd66c2600ec" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>getContext</name></member>
      <member refid="classls_1_1game_1_1system_1a608484eeda70cd7c41134d9f66d36881" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>getDisplay</name></member>
      <member refid="classls_1_1game_1_1system_1a28f2eb4c52fa9da521b0e0915244b908" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>getDisplay</name></member>
      <member refid="classls_1_1game_1_1system_1a8fdec050c5ee307ebc1ba4a388b29004" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>getGameStackSize</name></member>
      <member refid="classls_1_1game_1_1system_1a17633e04150210df0c30abb8fe72647a" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>getGameState</name></member>
      <member refid="classls_1_1game_1_1system_1aca5978b0126c16a90323a9b3b7189717" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>getGameStateIndex</name></member>
      <member refid="classls_1_1game_1_1system_1a20d4f0d48776628c46657b0b266371cc" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>getPrng</name></member>
      <member refid="classls_1_1game_1_1system_1ab668f981d946b4dbdc7aef9e9645adf9" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>getPrng</name></member>
      <member refid="classls_1_1game_1_1system_1a205732814452ecdd8e74b70bc137592c" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>getTickTime</name></member>
      <member refid="classls_1_1game_1_1system_1a8b125963dfa4a13c6c9f5305f891465f" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>init</name></member>
      <member refid="classls_1_1game_1_1system_1ad1f7cc3596d49d92cd4f054cd4d9723d" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>isRunning</name></member>
      <member refid="classls_1_1game_1_1system_1a5415fa3d18468f19822f53d28f2a83ad" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>operator=</name></member>
      <member refid="classls_1_1game_1_1system_1a0cd84c7e27d23d4979ef79785e38ca1f" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>operator=</name></member>
      <member refid="classls_1_1game_1_1system_1af478ebe575015562c58168a15732fe04" prot="private" virt="non-virtual"><scope>ls::game::system</scope><name>passHardwareEvents</name></member>
      <member refid="classls_1_1game_1_1system_1a69aa01c91a70a5b2a22bea187fb4e86c" prot="private" virt="non-virtual"><scope>ls::game::system</scope><name>pDisplay</name></member>
      <member refid="classls_1_1game_1_1system_1a39018d0bcfc02ca94a43f3e1a6aa2b78" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>popGameState</name></member>
      <member refid="classls_1_1game_1_1system_1a5705451210d89fc000bfbba8a788bb8f" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>popGameState</name></member>
      <member refid="classls_1_1game_1_1system_1a8aa1c83984297a48c56af85792d4c444" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>popGameState</name></member>
      <member refid="classls_1_1game_1_1system_1ac773f96f0d76c6ae6f08cedc64f5271f" prot="private" virt="non-virtual"><scope>ls::game::system</scope><name>prevTime</name></member>
      <member refid="classls_1_1game_1_1system_1ae325cf7c3b7f98adcea4fd28b7503330" prot="private" virt="non-virtual"><scope>ls::game::system</scope><name>prng</name></member>
      <member refid="classls_1_1game_1_1system_1aac718c57b9bfbd0d0267d1356d03e5ad" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>pushGameState</name></member>
      <member refid="classls_1_1game_1_1system_1a2530a2db88fe3f15beaa092cb92c513d" prot="private" virt="non-virtual"><scope>ls::game::system</scope><name>renderContext</name></member>
      <member refid="classls_1_1game_1_1system_1ad97510a2a09e92649fe4ddb03f7fa008" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>run</name></member>
      <member refid="classls_1_1game_1_1system_1a00ed5b74e003305caf14a005cb9b07a9" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>stop</name></member>
      <member refid="classls_1_1game_1_1system_1a4e9868ae6d5a6145abb292eb1c0cff8d" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>system</name></member>
      <member refid="classls_1_1game_1_1system_1a3fafbffadadfa756846d93ef67745296" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>system</name></member>
      <member refid="classls_1_1game_1_1system_1ab51c000faa6135fdb2d9341ccc9dcdaa" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>system</name></member>
      <member refid="classls_1_1game_1_1system_1aa3b7c235eb1ca974e6c1a725ab339176" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>terminate</name></member>
      <member refid="classls_1_1game_1_1system_1af3c992dbd57da4bb46168d766cbaff80" prot="private" virt="non-virtual"><scope>ls::game::system</scope><name>tickTime</name></member>
      <member refid="classls_1_1game_1_1system_1af69069ed9c174883b2412a5f74221cff" prot="private" virt="non-virtual"><scope>ls::game::system</scope><name>updateGameStates</name></member>
      <member refid="classls_1_1game_1_1system_1a7f37c4ac8fb66d664a5d3fd452a39a6e" prot="public" virt="non-virtual"><scope>ls::game::system</scope><name>~system</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
