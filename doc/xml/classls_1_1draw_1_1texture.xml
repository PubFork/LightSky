<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="classls_1_1draw_1_1texture" kind="class" prot="public">
    <compoundname>ls::draw::texture</compoundname>
    <includes refid="texture_8h" local="no">texture.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classls_1_1draw_1_1texture_1a462e9ff1a25a3d7dfc07fd4c46a2b1e3" prot="private" static="no" mutable="no">
        <type><ref refid="namespacels_1_1draw_1a3a6c34c66ec4270fffa88ee2abc50d84" kindref="member">ls_tex_desc_t</ref></type>
        <definition>ls_tex_desc_t ls::draw::texture::dimensions</definition>
        <argsstring></argsstring>
        <name>dimensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dimension is a constant which is initialized upon construction of a texture object. This provides information to the GPU in order to determine if *this is a 1D, 2D, 3D texture, and so on. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="76" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classls_1_1draw_1_1texture_1ac14476b7177e7d03ee2f768bb7a04ba9" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned ls::draw::texture::texId</definition>
        <argsstring></argsstring>
        <name>texId</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Texture ID The handle to the current texture used by OpenGL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="82" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1ae53946335eb62543ba14cad0421277c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::draw::texture::texture</definition>
        <argsstring>(ls_tex_desc_t td=LS_TEX_2D)</argsstring>
        <name>texture</name>
        <param>
          <type><ref refid="namespacels_1_1draw_1a3a6c34c66ec4270fffa88ee2abc50d84" kindref="member">ls_tex_desc_t</ref></type>
          <declname>td</declname>
          <defval><ref refid="namespacels_1_1draw_1a3a6c34c66ec4270fffa88ee2abc50d84a112277c029293ad136970dcea79a3991" kindref="member">LS_TEX_2D</ref></defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="88" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/texture.cpp" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a0d7d9d03d8818bd7d52dd19523f5a8d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::draw::texture::texture</definition>
        <argsstring>(const texture &amp;)=delete</argsstring>
        <name>texture</name>
        <param>
          <type>const <ref refid="classls_1_1draw_1_1texture" kindref="compound">texture</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy Constructor <ndash/> DELETED. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1affb36fdd39dc167d302080f7932c20a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::draw::texture::texture</definition>
        <argsstring>(texture &amp;&amp;t)</argsstring>
        <name>texture</name>
        <param>
          <type><ref refid="classls_1_1draw_1_1texture" kindref="compound">texture</ref> &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Move Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Reassigns the texture ID at *this to the one referenced by the source operand. Resets the source operand to 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>An r-value reference to another texture object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="104" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/texture.cpp" bodystart="46" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a5047b0e10b3310bd5417a547c741ef63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::draw::texture::~texture</definition>
        <argsstring>()</argsstring>
        <name>~texture</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
<para>Releases all memory referenced by texId </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="111" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/texture.cpp" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1ab822eaabd0b31b093db03e8c60d182bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classls_1_1draw_1_1texture" kindref="compound">texture</ref> &amp;</type>
        <definition>texture&amp; ls::draw::texture::operator=</definition>
        <argsstring>(const texture &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classls_1_1draw_1_1texture" kindref="compound">texture</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy Operator <ndash/> DELETED. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a999a59e3874bd108cd416cf685a2b9df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classls_1_1draw_1_1texture" kindref="compound">texture</ref> &amp;</type>
        <definition>texture &amp; ls::draw::texture::operator=</definition>
        <argsstring>(texture &amp;&amp;t)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classls_1_1draw_1_1texture" kindref="compound">texture</ref> &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Move Operator <ndash/> DELETED. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="121" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/texture.cpp" bodystart="63" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1aaff59d6160bd0b65a3e70201c3a8b5c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned ls::draw::texture::getId</definition>
        <argsstring>() const </argsstring>
        <name>getId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the GPU-Assigned ID used by *this.</para><para><simplesect kind="return"><para>An unsigned integral type that correlates to a texture on the GPU. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="129" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="8" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a23e1d0ad54357b48fd701cb1ec7ba383" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::texture::bind</definition>
        <argsstring>() const </argsstring>
        <name>bind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bind the current texture to OpenGL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="134" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1aa7c112e4b0bb6577eacb5d8c345fdc2d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::texture::unbind</definition>
        <argsstring>() const </argsstring>
        <name>unbind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unbind the current texture to OpenGL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="139" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a282d5931287e2ef82d281396cbe3c98c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::texture::setParameter</definition>
        <argsstring>(int paramName, int param) const </argsstring>
        <name>setParameter</name>
        <param>
          <type>int</type>
          <declname>paramName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a integer texture parameter. Make sure that &quot;bind()&quot; has been called before using this method.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>paramName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name/type of texture parameter which should be modified on the GPU.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>The particular texture setting to use for *this. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="152" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a325e02b7a183d75c91076f09f228a95f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::texture::setParameter</definition>
        <argsstring>(int paramName, float param) const </argsstring>
        <name>setParameter</name>
        <param>
          <type>int</type>
          <declname>paramName</declname>
        </param>
        <param>
          <type>float</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Set a float texture parameter. </para>        </briefdescription>
        <detaileddescription>
<para>Make sure that &quot;bind()&quot; has been called before using this method.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>paramName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name/type of texture parameter which should be modified on the GPU.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>The particular texture setting to use for *this. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="166" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a3ca36d7a8df529f27881574e19691b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::texture::init</definition>
        <argsstring>(int mipmapLevel, pixel_format_t internalFormat, int size, pixel_layout_t format, color_type_t dataType, void *const data)</argsstring>
        <name>init</name>
        <param>
          <type>int</type>
          <declname>mipmapLevel</declname>
        </param>
        <param>
          <type><ref refid="namespacels_1_1draw_1a41ea06202f1f4631682c080ef7e3ab31" kindref="member">pixel_format_t</ref></type>
          <declname>internalFormat</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespacels_1_1draw_1a720c31963d2ec9ddd5397d92e101fc39" kindref="member">pixel_layout_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="namespacels_1_1draw_1afaef2be618862b3e5b465e3cc70e668b" kindref="member">color_type_t</ref></type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an OpenGL texture by using preexisting image data.</para><para><simplesect kind="see"><para>OpenGL&apos;s documentation for glTexImage()</para></simplesect>
<simplesect kind="return"><para>true if the operation was successful. False if otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="175" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/texture.cpp" bodystart="75" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a5494359ffdb98e322c506573f6029fe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::texture::init</definition>
        <argsstring>(int mipmapLevel, pixel_format_t internalFormat, math::vec2i size, pixel_layout_t format, color_type_t dataType, void *const data)</argsstring>
        <name>init</name>
        <param>
          <type>int</type>
          <declname>mipmapLevel</declname>
        </param>
        <param>
          <type><ref refid="namespacels_1_1draw_1a41ea06202f1f4631682c080ef7e3ab31" kindref="member">pixel_format_t</ref></type>
          <declname>internalFormat</declname>
        </param>
        <param>
          <type>math::vec2i</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespacels_1_1draw_1a720c31963d2ec9ddd5397d92e101fc39" kindref="member">pixel_layout_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="namespacels_1_1draw_1afaef2be618862b3e5b465e3cc70e668b" kindref="member">color_type_t</ref></type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an OpenGL texture by using preexisting image data.</para><para><simplesect kind="see"><para>OpenGL&apos;s documentation for glTexImage()</para></simplesect>
<simplesect kind="return"><para>true if the operation was successful. False if otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="191" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/texture.cpp" bodystart="99" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1ab5c363fbdac98319d5e47603df2c9c28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::texture::init</definition>
        <argsstring>(int mipmapLevel, pixel_format_t internalFormat, math::vec3i size, pixel_layout_t format, color_type_t dataType, void *const data)</argsstring>
        <name>init</name>
        <param>
          <type>int</type>
          <declname>mipmapLevel</declname>
        </param>
        <param>
          <type><ref refid="namespacels_1_1draw_1a41ea06202f1f4631682c080ef7e3ab31" kindref="member">pixel_format_t</ref></type>
          <declname>internalFormat</declname>
        </param>
        <param>
          <type>math::vec3i</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespacels_1_1draw_1a720c31963d2ec9ddd5397d92e101fc39" kindref="member">pixel_layout_t</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="namespacels_1_1draw_1afaef2be618862b3e5b465e3cc70e668b" kindref="member">color_type_t</ref></type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an OpenGL texture by using preexisting image data.</para><para><simplesect kind="see"><para>OpenGL&apos;s documentation for glTexImage()</para></simplesect>
<simplesect kind="return"><para>true if the operation was successful. False if otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="207" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/texture.cpp" bodystart="126" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a0e33d87be878e3db2564510aa5409103" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::texture::init</definition>
        <argsstring>(int mipmapLevel, int size, const imageResource &amp;)</argsstring>
        <name>init</name>
        <param>
          <type>int</type>
          <declname>mipmapLevel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="classls_1_1draw_1_1image_resource" kindref="compound">imageResource</ref> &amp;</type>
          <defname>resource</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an OpenGL texture by using preexisting image data.</para><para><simplesect kind="see"><para>OpenGL&apos;s documentation for glTexImage()</para></simplesect>
<simplesect kind="return"><para>true if the operation was successful. False if otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="223" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="45" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1acb8f0254ba8b98b046a74f88ae63b528" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::texture::init</definition>
        <argsstring>(int mipmapLevel, math::vec2i size, const imageResource &amp;)</argsstring>
        <name>init</name>
        <param>
          <type>int</type>
          <declname>mipmapLevel</declname>
        </param>
        <param>
          <type>math::vec2i</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="classls_1_1draw_1_1image_resource" kindref="compound">imageResource</ref> &amp;</type>
          <defname>resource</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an OpenGL texture by using preexisting image data.</para><para><simplesect kind="see"><para>OpenGL&apos;s documentation for glTexImage()</para></simplesect>
<simplesect kind="return"><para>true if the operation was successful. False if otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="232" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="59" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a5cd6fa7e86dcfa5f346133a6d7c999ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::texture::init</definition>
        <argsstring>(int mipmapLevel, math::vec3i size, const imageResource &amp;)</argsstring>
        <name>init</name>
        <param>
          <type>int</type>
          <declname>mipmapLevel</declname>
        </param>
        <param>
          <type>math::vec3i</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="classls_1_1draw_1_1image_resource" kindref="compound">imageResource</ref> &amp;</type>
          <defname>resource</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an OpenGL texture by using preexisting image data.</para><para><simplesect kind="see"><para>OpenGL&apos;s documentation for glTexImage()</para></simplesect>
<simplesect kind="return"><para>true if the operation was successful. False if otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="241" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="73" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a429915012dc328eec2558cd29a0de985" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::texture::modify</definition>
        <argsstring>(int offset, int size, int format, int dataType, void *data)</argsstring>
        <name>modify</name>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>format</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify the internal data of a texture.</para><para><simplesect kind="see"><para>OpenGL&apos;s documentation for glTexImage() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="248" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1acd9895711d14d992070610eb55816e23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::texture::modify</definition>
        <argsstring>(math::vec2i offset, math::vec2i size, int format, int dataType, void *data)</argsstring>
        <name>modify</name>
        <param>
          <type>math::vec2i</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>math::vec2i</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>format</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify the internal data of a texture. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="253" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a9d96db48f4ce7b17967b79c9b1d30c00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::texture::modify</definition>
        <argsstring>(math::vec3i offset, math::vec3i size, int format, int dataType, void *data)</argsstring>
        <name>modify</name>
        <param>
          <type>math::vec3i</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>math::vec3i</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>format</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dataType</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify the internal data of a texture. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="258" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a010bc9e89d0a128f4dae40faaf68c8f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::texture::terminate</definition>
        <argsstring>()</argsstring>
        <name>terminate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Release all memory referenced by *this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="263" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a45d7e24d8fa948390f81d944f8980aa4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned ls::draw::texture::getWidth</definition>
        <argsstring>() const </argsstring>
        <name>getWidth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the width of the texture referenced by texId</para><para><simplesect kind="return"><para>an unsigned integral type which indicates the size, in pixels of the texture width used by *this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="271" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a382d08cf3780ef4205d6b04ba92d3e92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned ls::draw::texture::getHeight</definition>
        <argsstring>() const </argsstring>
        <name>getHeight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the height of the texture referenced by texId.</para><para><simplesect kind="return"><para>an unsigned integral type which indicates the size, in pixels of the texture height used by *this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="279" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="128" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a338b9b19b475106e8725406c6d34071e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned ls::draw::texture::getDepth</definition>
        <argsstring>() const </argsstring>
        <name>getDepth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the depth of the texture referenced by texId.</para><para><simplesect kind="return"><para>an unsigned integral type which indicates the size, in pixels of the texture depth used by *this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="287" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="137" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1ad8e00841282ffc1525711f75524b3876" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacels_1_1draw_1a3a6c34c66ec4270fffa88ee2abc50d84" kindref="member">ls_tex_desc_t</ref></type>
        <definition>ls_tex_desc_t ls::draw::texture::getTextType</definition>
        <argsstring>() const </argsstring>
        <name>getTextType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the texture type of that this texture uses in OpenGL.</para><para><simplesect kind="return"><para>the GPU-descriptor that&apos;s used to apply *this texture object onto polygons. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="295" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="146" bodyend="148"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classls_1_1draw_1_1texture_1a36bb093b51e4ef394bedfcc151b5506a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ls::draw::texture::getMaxTextureSize</definition>
        <argsstring>()</argsstring>
        <name>getMaxTextureSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the maximum texture size supported by OpenGL.</para><para><simplesect kind="return"><para>an integral type which can be used to determine the maximum byte size of a texture supported by the GPU. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="303" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/texture_impl.h" bodystart="153" bodyend="157"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><hruler/>
 <heading level="2">Texture Objects </heading>
</para>    </detaileddescription>
    <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" line="69" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/texture.h" bodystart="69" bodyend="304"/>
    <listofallmembers>
      <member refid="classls_1_1draw_1_1texture_1a23e1d0ad54357b48fd701cb1ec7ba383" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>bind</name></member>
      <member refid="classls_1_1draw_1_1texture_1a462e9ff1a25a3d7dfc07fd4c46a2b1e3" prot="private" virt="non-virtual"><scope>ls::draw::texture</scope><name>dimensions</name></member>
      <member refid="classls_1_1draw_1_1texture_1a338b9b19b475106e8725406c6d34071e" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>getDepth</name></member>
      <member refid="classls_1_1draw_1_1texture_1a382d08cf3780ef4205d6b04ba92d3e92" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>getHeight</name></member>
      <member refid="classls_1_1draw_1_1texture_1aaff59d6160bd0b65a3e70201c3a8b5c6" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>getId</name></member>
      <member refid="classls_1_1draw_1_1texture_1a36bb093b51e4ef394bedfcc151b5506a" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>getMaxTextureSize</name></member>
      <member refid="classls_1_1draw_1_1texture_1ad8e00841282ffc1525711f75524b3876" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>getTextType</name></member>
      <member refid="classls_1_1draw_1_1texture_1a45d7e24d8fa948390f81d944f8980aa4" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>getWidth</name></member>
      <member refid="classls_1_1draw_1_1texture_1a3ca36d7a8df529f27881574e19691b9e" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>init</name></member>
      <member refid="classls_1_1draw_1_1texture_1a5494359ffdb98e322c506573f6029fe1" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>init</name></member>
      <member refid="classls_1_1draw_1_1texture_1ab5c363fbdac98319d5e47603df2c9c28" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>init</name></member>
      <member refid="classls_1_1draw_1_1texture_1a0e33d87be878e3db2564510aa5409103" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>init</name></member>
      <member refid="classls_1_1draw_1_1texture_1acb8f0254ba8b98b046a74f88ae63b528" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>init</name></member>
      <member refid="classls_1_1draw_1_1texture_1a5cd6fa7e86dcfa5f346133a6d7c999ac" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>init</name></member>
      <member refid="classls_1_1draw_1_1texture_1a429915012dc328eec2558cd29a0de985" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>modify</name></member>
      <member refid="classls_1_1draw_1_1texture_1acd9895711d14d992070610eb55816e23" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>modify</name></member>
      <member refid="classls_1_1draw_1_1texture_1a9d96db48f4ce7b17967b79c9b1d30c00" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>modify</name></member>
      <member refid="classls_1_1draw_1_1texture_1ab822eaabd0b31b093db03e8c60d182bf" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>operator=</name></member>
      <member refid="classls_1_1draw_1_1texture_1a999a59e3874bd108cd416cf685a2b9df" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>operator=</name></member>
      <member refid="classls_1_1draw_1_1texture_1a282d5931287e2ef82d281396cbe3c98c" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>setParameter</name></member>
      <member refid="classls_1_1draw_1_1texture_1a325e02b7a183d75c91076f09f228a95f" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>setParameter</name></member>
      <member refid="classls_1_1draw_1_1texture_1a010bc9e89d0a128f4dae40faaf68c8f0" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>terminate</name></member>
      <member refid="classls_1_1draw_1_1texture_1ac14476b7177e7d03ee2f768bb7a04ba9" prot="private" virt="non-virtual"><scope>ls::draw::texture</scope><name>texId</name></member>
      <member refid="classls_1_1draw_1_1texture_1ae53946335eb62543ba14cad0421277c8" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>texture</name></member>
      <member refid="classls_1_1draw_1_1texture_1a0d7d9d03d8818bd7d52dd19523f5a8d4" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>texture</name></member>
      <member refid="classls_1_1draw_1_1texture_1affb36fdd39dc167d302080f7932c20a2" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>texture</name></member>
      <member refid="classls_1_1draw_1_1texture_1aa7c112e4b0bb6577eacb5d8c345fdc2d" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>unbind</name></member>
      <member refid="classls_1_1draw_1_1texture_1a5047b0e10b3310bd5417a547c741ef63" prot="public" virt="non-virtual"><scope>ls::draw::texture</scope><name>~texture</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
