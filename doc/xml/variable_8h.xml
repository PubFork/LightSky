<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="variable_8h" kind="file">
    <compoundname>variable.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">iostream</includes>
    <includes refid="script_2setup_8h" local="yes">lightsky/script/setup.h</includes>
    <includes refid="scriptable_8h" local="yes">lightsky/script/scriptable.h</includes>
    <includes refid="variable__impl_8h" local="yes">lightsky/script/generic/variable_impl.h</includes>
    <includedby refid="functor_8h" local="yes">C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h</includedby>
    <includedby refid="script_8h" local="yes">C:/Users/miles/C++/projects/LightSky/lightsky/script/script.h</includedby>
    <includedby refid="variable_8cpp" local="yes">C:/Users/miles/C++/projects/LightSky/lightsky/script/src/variable.cpp</includedby>
    <incdepgraph>
      <node id="6918">
        <label>lightsky/utils/hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="6919" relation="include">
        </childnode>
        <childnode refid="6920" relation="include">
        </childnode>
      </node>
      <node id="6919">
        <label>cstdint</label>
      </node>
      <node id="6913">
        <label>string</label>
      </node>
      <node id="6916">
        <label>map</label>
      </node>
      <node id="6917">
        <label>lightsky/setup/macros.h</label>
        <link refid="macros_8h"/>
      </node>
      <node id="6922">
        <label>lightsky/script/generic/variable_impl.h</label>
        <link refid="variable__impl_8h"/>
      </node>
      <node id="6912">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h</label>
        <link refid="variable.h"/>
        <childnode refid="6913" relation="include">
        </childnode>
        <childnode refid="6914" relation="include">
        </childnode>
        <childnode refid="6915" relation="include">
        </childnode>
        <childnode refid="6921" relation="include">
        </childnode>
        <childnode refid="6922" relation="include">
        </childnode>
      </node>
      <node id="6920">
        <label>lightsky/utils/generic/hash_impl.h</label>
        <link refid="hash__impl_8h"/>
      </node>
      <node id="6921">
        <label>lightsky/script/scriptable.h</label>
        <link refid="scriptable_8h"/>
        <childnode refid="6914" relation="include">
        </childnode>
        <childnode refid="6918" relation="include">
        </childnode>
        <childnode refid="6915" relation="include">
        </childnode>
      </node>
      <node id="6914">
        <label>iostream</label>
      </node>
      <node id="6915">
        <label>lightsky/script/setup.h</label>
        <link refid="script_2setup_8h"/>
        <childnode refid="6916" relation="include">
        </childnode>
        <childnode refid="6917" relation="include">
        </childnode>
        <childnode refid="6918" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6926">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/lightsky.h</label>
        <link refid="lightsky_8h"/>
        <childnode refid="6927" relation="include">
        </childnode>
      </node>
      <node id="6924">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/script/functor.h</label>
        <link refid="functor_8h"/>
        <childnode refid="6925" relation="include">
        </childnode>
        <childnode refid="6928" relation="include">
        </childnode>
      </node>
      <node id="6925">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/script/script.h</label>
        <link refid="script_8h"/>
        <childnode refid="6926" relation="include">
        </childnode>
      </node>
      <node id="6923">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h</label>
        <link refid="variable.h"/>
        <childnode refid="6924" relation="include">
        </childnode>
        <childnode refid="6925" relation="include">
        </childnode>
        <childnode refid="6929" relation="include">
        </childnode>
      </node>
      <node id="6928">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/script/src/functor.cpp</label>
        <link refid="functor_8cpp"/>
      </node>
      <node id="6929">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/script/src/variable.cpp</label>
        <link refid="variable_8cpp"/>
      </node>
      <node id="6927">
        <label>C:/Users/miles/C++/projects/LightSky/lightsky/src/lightsky.cpp</label>
        <link refid="lightsky_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classls_1_1script_1_1variable" prot="public">ls::script::variable</innerclass>
    <innerclass refid="singletonls_1_1script_1_1variable__t" prot="public">ls::script::variable_t</innerclass>
    <innernamespace refid="namespacels">ls</innernamespace>
    <innernamespace refid="namespacels_1_1script">ls::script</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="variable_8h_1adf83f9d7d3877e4dc96a9bb897decec4" prot="public" static="no">
        <name>LS_SCRIPT_VAR_TYPE</name>
        <param><defname>varType</defname></param>
        <initializer><ref refid="singletonls_1_1script_1_1variable__t" kindref="compound">ls::script::variable_t</ref>&lt;<ref refid="script_2setup_8h_1aa63519079e4c89f935008bf5ea9f7096" kindref="member">LS_SCRIPT_HASH_FUNC</ref>(<ref refid="macros_8h_1a5bfafe8742a13a31e54eab3ef7824792" kindref="member">LS_STRINGIFY</ref>(varType)), varType&gt;</initializer>
        <briefdescription>
<para>Script Variable Specifier. </para>        </briefdescription>
        <detaileddescription>
<para>This is simply a convenience macro that can be used to access a <ref refid="singletonls_1_1script_1_1variable__t" kindref="compound">ls::script::variable_t</ref> by its data type, rather than specify it by its template parameters.</para><para>For example, a variable of type &apos;int&apos; can be accessed in on of three ways: <verbatim>ls::script::variable_t&lt;LS_SCRIPT_HASH_FUNC(LS_STRINGIFY(int)), int&gt;

LS_SCRIPT_VAR_TYPE(int)

scriptVar_int (if registered using the LS_SCRIPT_DECLARE_VAR macro).</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h" line="245" column="13" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="variable_8h_1a202ba9e57c14d33a134ddc9bc9042c8a" prot="public" static="no">
        <name>LS_SCRIPT_VAR_DATA</name>
        <param><defname>pVar</defname></param>
        <param><defname>varName</defname></param>
        <initializer>static_cast&lt;scriptVar_##varName*&gt;(pVar)-&gt;data</initializer>
        <briefdescription>
<para>Script Variable Data Access. </para>        </briefdescription>
        <detaileddescription>
<para>This macro is intended to be used in the functor objects, but allows a scripted variable&apos;s data to be accessed in regular code.</para><para>To access the integer member of a scriptVar_int, for example, one could write the following: <ref refid="variable_8h_1a202ba9e57c14d33a134ddc9bc9042c8a" kindref="member">LS_SCRIPT_VAR_DATA(foo, int)</ref> = 42. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h" line="260" column="13" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="variable_8h_1ae23e7cfa1712e4f4825c81ddf7e700f8" prot="public" static="no">
        <name>LS_SCRIPT_DECLARE_VAR</name>
        <param><defname>varName</defname></param>
        <param><defname>varType</defname></param>
        <initializer>\
        enum : ls::script::hash_t { scriptHash_##varName = <ref refid="script_2setup_8h_1aa63519079e4c89f935008bf5ea9f7096" kindref="member">LS_SCRIPT_HASH_FUNC</ref>(<ref refid="macros_8h_1a5bfafe8742a13a31e54eab3ef7824792" kindref="member">LS_STRINGIFY</ref>(varType)) }; \
        \
        extern const <ref refid="namespacels_1_1script_1a45350bc37bbe456cad4e582684ff94ad" kindref="member">ls::script::varFactory</ref> scriptFactory_##varName; \
        \
        typedef <ref refid="singletonls_1_1script_1_1variable__t" kindref="compound">ls::script::variable_t</ref>&lt;scriptHash_##varName, varType&gt; scriptVar_##varName; \
        \
        extern template class <ref refid="singletonls_1_1script_1_1variable__t" kindref="compound">ls::script::variable_t</ref>&lt;scriptHash_##varName, varType&gt;</initializer>
        <briefdescription>
<para>Variable Declaration for Header Files. </para>        </briefdescription>
        <detaileddescription>
<para>This macro is used to both register a variable with the scripting system&apos;s global variable factory, as well as provide useful typedefs and a portable hash value to identify the variable type.</para><para>Sample usage would be as follows (for an integer and std::string): <ref refid="variable_8h_1ae23e7cfa1712e4f4825c81ddf7e700f8" kindref="member">LS_SCRIPT_DECLARE_VAR(int, int)</ref>; <ref refid="variable_8h_1ae23e7cfa1712e4f4825c81ddf7e700f8" kindref="member">LS_SCRIPT_DECLARE_VAR(string, std::string)</ref>; <ref refid="variable_8h_1ae23e7cfa1712e4f4825c81ddf7e700f8" kindref="member">LS_SCRIPT_DECLARE_VAR(someClassType, someClass::someType)</ref>;</para><para>Now that there are two registered data types, one can access the hash codes for these two variable like so: scriptHash_int scriptHash_string scriptHash_someClassType</para><para>You could also create and modify registered variables: <verbatim>ls::script::variable* pVar = scriptFactory_int();
LS_SCRIPT_VAR_DATA(pVar, int) = 42;
delete pVar;

ls::script::variable* pVar = scriptFactory_string();
LS_SCRIPT_VAR_DATA(pVar, std::string) = &quot;Hello World&quot;;
delete pVar;

ls::script::variable* pVar = scriptFactory_someClassType();
LS_SCRIPT_VAR_DATA(pVar, someClass::someType).foo();
delete pVar;
</verbatim></para><para><simplesect kind="note"><para>All data generated by a factory method MUST be deleted using &apos;delete.&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h" line="300" column="13" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="variable_8h_1a94322650d3391fac56b4b37a40097bbf" prot="public" static="no">
        <name>LS_SCRIPT_DEFINE_VAR</name>
        <param><defname>varName</defname></param>
        <param><defname>varType</defname></param>
        <initializer>\
        template class <ref refid="singletonls_1_1script_1_1variable__t" kindref="compound">ls::script::variable_t</ref>&lt;scriptHash_##varName, varType&gt;; \
        \
        const <ref refid="namespacels_1_1script_1a45350bc37bbe456cad4e582684ff94ad" kindref="member">ls::script::varFactory</ref> scriptFactory_##varName = \
            <ref refid="namespacels_1_1script_1acc2b41ffc4021480e155c256c7654a33" kindref="member">ls::script::gVarFactory</ref>[ scriptHash_##varName ] = \
                []()-&gt;<ref refid="classls_1_1script_1_1variable" kindref="compound">ls::script::variable</ref>* { return new scriptVar_##varName{}; }</initializer>
        <briefdescription>
<para>Variable Definition for Source Files. </para>        </briefdescription>
        <detaileddescription>
<para>This macro allows variable types to be defined in source compilation units. The macro explicitly instantiates the ls::script::variable_t&lt;&gt; class template, defines the variable&apos;s factory function, and adds the factory to the global factory map.</para><para>To use this macro, simply type: <ref refid="variable_8h_1a94322650d3391fac56b4b37a40097bbf" kindref="member">LS_SCRIPT_DEFINE_VAR(int, int)</ref>; <ref refid="variable_8h_1a94322650d3391fac56b4b37a40097bbf" kindref="member">LS_SCRIPT_DEFINE_VAR(string, std::string)</ref>; <ref refid="variable_8h_1a94322650d3391fac56b4b37a40097bbf" kindref="member">LS_SCRIPT_DEFINE_VAR(someClassType, someClass::someType)</ref>;</para><para>In addition, the global scripting factory can then be used like so: <ref refid="classls_1_1script_1_1variable" kindref="compound">ls::script::variable</ref>* pVar; pVar = ls::script::createScriptVar(scriptHash_int); ... delete pVar; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h" line="331" column="13" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="variable_8h_1a5a30123bf2f4a18fd36c7462facf06fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LS_SCRIPT_DECLARE_VAR</definition>
        <argsstring>(char, char)</argsstring>
        <name>LS_SCRIPT_DECLARE_VAR</name>
        <param>
          <type>char</type>
        </param>
        <param>
          <type>char</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="variable_8h_1a7e63efab26ac36ff6a39ec6f9fb11af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LS_SCRIPT_DECLARE_VAR</definition>
        <argsstring>(short, short)</argsstring>
        <name>LS_SCRIPT_DECLARE_VAR</name>
        <param>
          <type>short</type>
        </param>
        <param>
          <type>short</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="variable_8h_1a618fe9e693ce80b25afe29bc3f4609fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LS_SCRIPT_DECLARE_VAR</definition>
        <argsstring>(int, int)</argsstring>
        <name>LS_SCRIPT_DECLARE_VAR</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="variable_8h_1ad2b097f52993f82332d77e2f88530c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LS_SCRIPT_DECLARE_VAR</definition>
        <argsstring>(long, long)</argsstring>
        <name>LS_SCRIPT_DECLARE_VAR</name>
        <param>
          <type>long</type>
        </param>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h" line="346" column="1"/>
      </memberdef>
      <memberdef kind="function" id="variable_8h_1a88fc3370077a3cd65a929285c5b566bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LS_SCRIPT_DECLARE_VAR</definition>
        <argsstring>(float, float)</argsstring>
        <name>LS_SCRIPT_DECLARE_VAR</name>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="variable_8h_1acff86edb3f5866a86a9f5c7598cb41d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LS_SCRIPT_DECLARE_VAR</definition>
        <argsstring>(double, double)</argsstring>
        <name>LS_SCRIPT_DECLARE_VAR</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h" line="348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="variable_8h_1a2a67040287e1f73eab46f8d88e4e0239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LS_SCRIPT_DECLARE_VAR</definition>
        <argsstring>(string, std::string)</argsstring>
        <name>LS_SCRIPT_DECLARE_VAR</name>
        <param>
          <type>string</type>
        </param>
        <param>
          <type>std::string</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h" line="349" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>File:<sp/><sp/><sp/>variable.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Miles<sp/>Lacey</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Created<sp/>on<sp/>April<sp/>13,<sp/>2014,<sp/>9:05<sp/>PM</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__LS_SCRIPT_VARIABLE_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__LS_SCRIPT_VARIABLE_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="script_2setup_8h" kindref="compound">lightsky/script/setup.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scriptable_8h" kindref="compound">lightsky/script/scriptable.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacels" kindref="compound">ls</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">script<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="classls_1_1script_1_1variable" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classls_1_1script_1_1variable" kindref="compound">variable</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1scriptable" kindref="compound">scriptable</ref><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1variable_1ac7a9a7ef768e86de74b76ad643e2ae1c" kindref="member">~variable</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1variable_1af07624d916e15ca0da6f3add2b172b1a" kindref="member">variable</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1variable_1af07624d916e15ca0da6f3add2b172b1a" kindref="member">variable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1variable" kindref="compound">variable</ref>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classls_1_1script_1_1variable_1af07624d916e15ca0da6f3add2b172b1a" kindref="member">variable</ref>(<ref refid="classls_1_1script_1_1variable" kindref="compound">variable</ref>&amp;&amp;<sp/>v);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1variable" kindref="compound">variable</ref>&amp;<sp/><ref refid="classls_1_1script_1_1variable_1aaee55855cb48fdc2fd7c085795088a80" kindref="member">operator =</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1variable" kindref="compound">variable</ref>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1variable" kindref="compound">variable</ref>&amp;<sp/><ref refid="classls_1_1script_1_1variable_1aaee55855cb48fdc2fd7c085795088a80" kindref="member">operator =</ref>(<ref refid="classls_1_1script_1_1variable" kindref="compound">variable</ref>&amp;&amp;<sp/>v);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacels_1_1script_1aa2320f4ac1ff7ade16588ce1f5c59f1a" kindref="member">script_base_t</ref><sp/><ref refid="classls_1_1script_1_1variable_1ad1eb4e04a0319c48238047fbd9497188" kindref="member">getScriptType</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespacels_1_1utils_1a53ed44f6f1c3753ed11e1241ac36647b" kindref="member">hash_t</ref><sp/><ref refid="classls_1_1script_1_1variable_1afb0063d7214481b524024f22261825a1" kindref="member">getScriptSubType</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;hash_t<sp/>hashId,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type&gt;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="singletonls_1_1script_1_1variable__t" kindref="compound">variable_t</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classls_1_1script_1_1variable" kindref="compound">variable</ref><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="109" refid="singletonls_1_1script_1_1variable__t_1a18a7a4f62bebf4b8a8fd7c7f792c8632" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/><ref refid="singletonls_1_1script_1_1variable__t_1a18a7a4f62bebf4b8a8fd7c7f792c8632" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="singletonls_1_1script_1_1variable__t_1af125391c42500a639c90d9958d178f17" kindref="member">~variable_t</ref>();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="singletonls_1_1script_1_1variable__t_1a85ff5f9c46af38e80d04443617874097" kindref="member">variable_t</ref>();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="singletonls_1_1script_1_1variable__t_1a85ff5f9c46af38e80d04443617874097" kindref="member">variable_t</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="singletonls_1_1script_1_1variable__t" kindref="compound">variable_t</ref>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="singletonls_1_1script_1_1variable__t_1a85ff5f9c46af38e80d04443617874097" kindref="member">variable_t</ref>(<ref refid="singletonls_1_1script_1_1variable__t" kindref="compound">variable_t</ref>&amp;&amp;<sp/>v);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="singletonls_1_1script_1_1variable__t" kindref="compound">variable_t</ref>&amp;<sp/><ref refid="singletonls_1_1script_1_1variable__t_1a8237d32ebcdaaa5c86a16c61f69313e0" kindref="member">operator =</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="singletonls_1_1script_1_1variable__t" kindref="compound">variable_t</ref>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="singletonls_1_1script_1_1variable__t" kindref="compound">variable_t</ref>&amp;<sp/><ref refid="singletonls_1_1script_1_1variable__t_1a8237d32ebcdaaa5c86a16c61f69313e0" kindref="member">operator =</ref>(<ref refid="singletonls_1_1script_1_1variable__t" kindref="compound">variable_t</ref>&amp;&amp;<sp/>v);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="singletonls_1_1script_1_1variable__t_1a1772c656c9314ce60629d689ecd36181" kindref="member">load</ref>(std::istream&amp;<sp/>istr,<sp/><ref refid="namespacels_1_1script_1a7269f0f5e6dd192ead0637331c331671" kindref="member">varLoaderMap</ref>&amp;<sp/>vlm,<sp/><ref refid="namespacels_1_1script_1acbb0b98d89aa532fe62e508927abb22c" kindref="member">funcLoaderMap</ref>&amp;<sp/>flm);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="singletonls_1_1script_1_1variable__t_1a127692f3be65688a5814f337e8fe717e" kindref="member">save</ref>(std::ostream&amp;<sp/>ostr)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacels_1_1utils_1a53ed44f6f1c3753ed11e1241ac36647b" kindref="member">hash_t</ref><sp/><ref refid="singletonls_1_1script_1_1variable__t_1a6cf40cee4f78ca6815963dde5f2bcfde" kindref="member">getScriptSubType</ref>()<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">};</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>script<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>ls<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;lightsky/script/generic/variable_impl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/>Script<sp/>Type<sp/>Registration<sp/>and<sp/>Accessibility<sp/>Macros</highlight></codeline>
<codeline lineno="228"><highlight class="comment">-----------------------------------------------------------------------------*/</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor">#ifndef<sp/>LS_SCRIPT_VAR_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="variable_8h_1adf83f9d7d3877e4dc96a9bb897decec4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>LS_SCRIPT_VAR_TYPE(<sp/>varType<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ls::script::variable_t&lt;LS_SCRIPT_HASH_FUNC(LS_STRINGIFY(varType)),<sp/>varType&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LS_SCRIPT_VAR_TYPE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor">#ifndef<sp/>LS_SCRIPT_VAR_DATA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="variable_8h_1a202ba9e57c14d33a134ddc9bc9042c8a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>LS_SCRIPT_VAR_DATA(<sp/>pVar,<sp/>varName<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;scriptVar_##varName*&gt;(pVar)-&gt;data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LS_SCRIPT_VAR_DATA<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor">#ifndef<sp/>LS_SCRIPT_DECLARE_VAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="variable_8h_1ae23e7cfa1712e4f4825c81ddf7e700f8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>LS_SCRIPT_DECLARE_VAR(<sp/>varName,<sp/>varType<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enum<sp/>:<sp/>ls::script::hash_t<sp/>{<sp/>scriptHash_##varName<sp/>=<sp/>LS_SCRIPT_HASH_FUNC(LS_STRINGIFY(varType))<sp/>};<sp/>\</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="304"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extern<sp/>const<sp/>ls::script::varFactory<sp/>scriptFactory_##varName;<sp/>\</highlight></codeline>
<codeline lineno="305"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="306"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>ls::script::variable_t&lt;scriptHash_##varName,<sp/>varType&gt;<sp/>scriptVar_##varName;<sp/>\</highlight></codeline>
<codeline lineno="307"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="308"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extern<sp/>template<sp/>class<sp/>ls::script::variable_t&lt;scriptHash_##varName,<sp/>varType&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LS_SCRIPT_DECLARE_VAR<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="preprocessor">#ifndef<sp/>LS_SCRIPT_DEFINE_VAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="variable_8h_1a94322650d3391fac56b4b37a40097bbf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>LS_SCRIPT_DEFINE_VAR(<sp/>varName,<sp/>varType<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="332"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="333"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>class<sp/>ls::script::variable_t&lt;scriptHash_##varName,<sp/>varType&gt;;<sp/>\</highlight></codeline>
<codeline lineno="334"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="335"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>ls::script::varFactory<sp/>scriptFactory_##varName<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="336"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ls::script::gVarFactory[<sp/>scriptHash_##varName<sp/>]<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="337"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]()-&gt;ls::script::variable*<sp/>{<sp/>return<sp/>new<sp/>scriptVar_##varName{};<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LS_SCRIPT_DEFINE_VAR<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/>Built-In<sp/>types</highlight></codeline>
<codeline lineno="342"><highlight class="comment">-----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><ref refid="variable_8h_1ae23e7cfa1712e4f4825c81ddf7e700f8" kindref="member">LS_SCRIPT_DECLARE_VAR</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scriptVar_char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><ref refid="variable_8h_1ae23e7cfa1712e4f4825c81ddf7e700f8" kindref="member">LS_SCRIPT_DECLARE_VAR</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scriptVar_short</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><ref refid="variable_8h_1ae23e7cfa1712e4f4825c81ddf7e700f8" kindref="member">LS_SCRIPT_DECLARE_VAR</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scriptVar_int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><ref refid="variable_8h_1ae23e7cfa1712e4f4825c81ddf7e700f8" kindref="member">LS_SCRIPT_DECLARE_VAR</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scriptVar_long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><ref refid="variable_8h_1ae23e7cfa1712e4f4825c81ddf7e700f8" kindref="member">LS_SCRIPT_DECLARE_VAR</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scriptVar_float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><ref refid="variable_8h_1ae23e7cfa1712e4f4825c81ddf7e700f8" kindref="member">LS_SCRIPT_DECLARE_VAR</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scriptVar_double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><ref refid="variable_8h_1ae23e7cfa1712e4f4825c81ddf7e700f8" kindref="member">LS_SCRIPT_DECLARE_VAR</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><sp/><sp/>std::string);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scriptVar_string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>__LS_SCRIPT_VARIABLE_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/miles/C++/projects/LightSky/lightsky/script/variable.h"/>
  </compounddef>
</doxygen>
