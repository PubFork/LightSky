<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="classls_1_1utils_1_1tuple__t" kind="class" prot="public">
    <compoundname>ls::utils::tuple_t</compoundname>
    <includes refid="tuple_8h" local="no">tuple.h</includes>
    <templateparamlist>
      <param>
        <type>typename...</type>
        <declname>data_t</declname>
        <defname>data_t</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classls_1_1utils_1_1tuple__t_1a02de65e745307a6fc4018f5f8b675546" prot="private" static="no" mutable="no">
        <type>char</type>
        <definition>char ls::utils::tuple_t&lt; data_t &gt;::dataBuffer[getByteSize&lt; data_t...&gt;()]</definition>
        <argsstring>[getByteSize&lt; data_t...&gt;()]</argsstring>
        <name>dataBuffer</name>
        <briefdescription>
<para>dataBuffer </para>        </briefdescription>
        <detaileddescription>
<para>A buffer of bytes (characters) that is used to hold objects of an tuple. This allows objects to be added at compile-time and constructed in a tightly packed array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="111" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1a7b1325ed015f1337fd22f83709c0fd10" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename arg_t</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool ls::utils::tuple_t&lt; data_t &gt;::constructObjects</definition>
        <argsstring>(char *buffer, unsigned offset, arg_t *)</argsstring>
        <name>constructObjects</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>arg_t *</type>
        </param>
        <briefdescription>
<para>Construct an object at a preallocated space within a buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The buffer must be preallocated. The pointer passed into the function is a sentinel value (for the sake of recursion) and is not used for anything. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="34" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="13" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1afb6a90b2c38383f15839910fc52359a3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename arg_t</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>args_t</declname>
            <defname>args_t</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool ls::utils::tuple_t&lt; data_t &gt;::constructObjects</definition>
        <argsstring>(char *buffer, unsigned offset, arg_t *, args_t *...args)</argsstring>
        <name>constructObjects</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>arg_t *</type>
        </param>
        <param>
          <type>args_t *...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Construct an object at a preallocated space within a buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The buffer must be preallocated. The pointers passed into the function are sentinel values (for the sake of recursion) and are not used for anything. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="45" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="22" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1afcab03a08ab8d5ccd9023586544cc994" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename arg_t</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void ls::utils::tuple_t&lt; data_t &gt;::destroyObjects</definition>
        <argsstring>(char *buffer, unsigned offset, arg_t *)</argsstring>
        <name>destroyObjects</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>arg_t *</type>
        </param>
        <briefdescription>
<para>Destroy an object at a preallocated space within a buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="51" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="33" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1aac2b1351fde46d605011f572dc556f31" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename arg_t</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>args_t</declname>
            <defname>args_t</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ls::utils::tuple_t&lt; data_t &gt;::destroyObjects</definition>
        <argsstring>(char *buffer, unsigned offset, arg_t *, args_t *...args)</argsstring>
        <name>destroyObjects</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>arg_t *</type>
        </param>
        <param>
          <type>args_t *...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Destroy an object at a preallocated space within a buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="57" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="44" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1a60d0a3bd131bc6c3588ab3f451498110" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename arg_t</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ls::utils::tuple_t&lt; data_t &gt;::copyObjects</definition>
        <argsstring>(const tuple_t&lt; data_t...&gt; &amp;, char *buffer, unsigned offset, arg_t *)</argsstring>
        <name>copyObjects</name>
        <param>
          <type>const <ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref>&lt; data_t...&gt; &amp;</type>
          <defname>agg</defname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>arg_t *</type>
        </param>
        <briefdescription>
<para>Copy an object at a preallocated space within a buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The buffer must be preallocated. The pointer passed into the function is a sentinel value (for the sake of recursion) and is not used for anything. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="71" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="59" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1adab146febdc710861a2606702b2a91e5" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename arg_t</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>args_t</declname>
            <defname>args_t</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ls::utils::tuple_t&lt; data_t &gt;::copyObjects</definition>
        <argsstring>(const tuple_t&lt; data_t...&gt; &amp;, char *buffer, unsigned offset, arg_t *, args_t *...args)</argsstring>
        <name>copyObjects</name>
        <param>
          <type>const <ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref>&lt; data_t...&gt; &amp;</type>
          <defname>agg</defname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>arg_t *</type>
        </param>
        <param>
          <type>args_t *...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Construct an object at a preallocated space within a buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The buffer must be preallocated. The pointers passed into the function are sentinel values (for the sake of recursion) and are not used for anything. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="82" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="71" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1a47fa732babb32a92a6697fa57f5769ec" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename arg_t</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ls::utils::tuple_t&lt; data_t &gt;::moveObjects</definition>
        <argsstring>(tuple_t&lt; data_t...&gt; &amp;&amp;, char *buffer, unsigned offset, arg_t *)</argsstring>
        <name>moveObjects</name>
        <param>
          <type><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref>&lt; data_t...&gt; &amp;&amp;</type>
          <defname>agg</defname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>arg_t *</type>
        </param>
        <briefdescription>
<para>Destroy an object at a preallocated space within a buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="88" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="84" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1a4791531333ec55072bab59bb6f41dab9" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename arg_t</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>args_t</declname>
            <defname>args_t</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ls::utils::tuple_t&lt; data_t &gt;::moveObjects</definition>
        <argsstring>(tuple_t&lt; data_t...&gt; &amp;&amp;, char *buffer, unsigned offset, arg_t *, args_t *...args)</argsstring>
        <name>moveObjects</name>
        <param>
          <type><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref>&lt; data_t...&gt; &amp;&amp;</type>
          <defname>agg</defname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>arg_t *</type>
        </param>
        <param>
          <type>args_t *...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Destroy an object at a preallocated space within a buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="94" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="96" bodyend="102"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1a9b93f3e73505b4cd151c29d7f5b9cf67" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr ls::utils::tuple_t&lt; data_t &gt;::tuple_t</definition>
        <argsstring>(bool)</argsstring>
        <name>tuple_t</name>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
<para>Private Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Assists in constructing an tuple at compile-time </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="102" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="111" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1a74f9d3361e10283de8a787809370235b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename request_t</type>
          </param>
          <param>
            <type>typename arg_t</type>
          </param>
        </templateparamlist>
        <type>constexpr const request_t *</type>
        <definition>constexpr const request_t * ls::utils::tuple_t&lt; data_t &gt;::getObjectAtOffset</definition>
        <argsstring>(unsigned offset, arg_t *) const </argsstring>
        <name>getObjectAtOffset</name>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>arg_t *</type>
        </param>
        <briefdescription>
<para>Get the last object in the tuple&apos;s byte buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>A byte offset to the object requested by the template parameter &quot;request_t&quot;.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg_t</parametername>
</parameternamelist>
<parameterdescription>
<para>A null type pointer, used to help iterate through objects within an tuple&apos;s byte buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A constant pointer to an object object if one exists. Returns NULL if it was not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="129" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="176" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1aea26b91dbd2dc12235c8486f310b6267" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename request_t</type>
          </param>
          <param>
            <type>typename arg_t</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>args_t</declname>
            <defname>args_t</defname>
          </param>
        </templateparamlist>
        <type>constexpr const request_t *</type>
        <definition>constexpr const request_t * ls::utils::tuple_t&lt; data_t &gt;::getObjectAtOffset</definition>
        <argsstring>(unsigned offset, arg_t *, args_t *...) const </argsstring>
        <name>getObjectAtOffset</name>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>arg_t *</type>
        </param>
        <param>
          <type>args_t *</type>
          <declname>...</declname>
        </param>
        <briefdescription>
<para>Get an object in the tuple&apos;s byte buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>A byte offset to the object requested by the template parameter &quot;request_t&quot;.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg_t</parametername>
</parameternamelist>
<parameterdescription>
<para>A null type pointer, used to help iterate through objects within an tuple&apos;s byte buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args_t</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of null pointers, used to help iterate through objects within an tuple&apos;s byte buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A constant pointer to an object object if one exists. Returns NULL if it was not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="151" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="187" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1a6321466cad550e9b6e6675ee0f946561" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename request_t</type>
          </param>
          <param>
            <type>typename arg_t</type>
          </param>
        </templateparamlist>
        <type>request_t *</type>
        <definition>request_t * ls::utils::tuple_t&lt; data_t &gt;::getObjectAtOffset</definition>
        <argsstring>(unsigned offset, arg_t *)</argsstring>
        <name>getObjectAtOffset</name>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>arg_t *</type>
        </param>
        <briefdescription>
<para>Get the last object in the tuple&apos;s byte buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>A byte offset to the object requested by the template parameter &quot;request_t&quot;.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg_t</parametername>
</parameternamelist>
<parameterdescription>
<para>A null type pointer, used to help iterate through objects within an tuple&apos;s byte buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A constant pointer to an object object if one exists. Returns NULL if it was not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="169" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1a7cffa70b1de6371981c8854646cad14a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename request_t</type>
          </param>
          <param>
            <type>typename arg_t</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>args_t</declname>
            <defname>args_t</defname>
          </param>
        </templateparamlist>
        <type>request_t *</type>
        <definition>request_t * ls::utils::tuple_t&lt; data_t &gt;::getObjectAtOffset</definition>
        <argsstring>(unsigned offset, arg_t *, args_t *...)</argsstring>
        <name>getObjectAtOffset</name>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>arg_t *</type>
        </param>
        <param>
          <type>args_t *</type>
          <declname>...</declname>
        </param>
        <briefdescription>
<para>Get an object in the tuple&apos;s byte buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>A byte offset to the object requested by the template parameter &quot;request_t&quot;.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg_t</parametername>
</parameternamelist>
<parameterdescription>
<para>A null type pointer, used to help iterate through objects within an tuple&apos;s byte buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args_t</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of null pointers, used to help iterate through objects within an tuple&apos;s byte buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A constant pointer to an object object if one exists. Returns NULL if it was not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="191" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="222" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1a5e5eaff4e7eefd6990bd9702cbc8aaa6" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename arg_t</type>
          </param>
        </templateparamlist>
        <type>constexpr const void *</type>
        <definition>constexpr const void * ls::utils::tuple_t&lt; data_t &gt;::getObjectAtIndex</definition>
        <argsstring>(unsigned index, unsigned offset, arg_t *) const </argsstring>
        <name>getObjectAtIndex</name>
        <param>
          <type>unsigned</type>
          <declname>index</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>arg_t *</type>
        </param>
        <briefdescription>
<para>Get the last object in the data buffer using an index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>A byte offset to the object requested by the template parameter &quot;request_t&quot;.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg_t</parametername>
</parameternamelist>
<parameterdescription>
<para>A null type pointer, used to help iterate through objects within an tuple&apos;s byte buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A constant pointer to an object object if one exists. Returns NULL if it was not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="209" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="246" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1a221a7ff65a5459144a50652ec90c06b7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename arg_t</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>args_t</declname>
            <defname>args_t</defname>
          </param>
        </templateparamlist>
        <type>constexpr const void *</type>
        <definition>constexpr const void * ls::utils::tuple_t&lt; data_t &gt;::getObjectAtIndex</definition>
        <argsstring>(unsigned index, unsigned offset, arg_t *, args_t *...) const </argsstring>
        <name>getObjectAtIndex</name>
        <param>
          <type>unsigned</type>
          <declname>index</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>arg_t *</type>
        </param>
        <param>
          <type>args_t *</type>
          <declname>...</declname>
        </param>
        <briefdescription>
<para>Get an tupled object using an index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>An array index to help determine which object in the tuple should be retrieved.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>A byte offset to the object requested from client code.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg_t</parametername>
</parameternamelist>
<parameterdescription>
<para>A null type pointer, used to help iterate through objects within an tuple&apos;s byte buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args_t</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of null pointers, used to help iterate through objects within an tuple&apos;s byte buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A constant pointer to an object object if one exists. Returns NULL if it was not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="234" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="257" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1a73c350a41fdd5d87d5e96fb35d0f9aec" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename arg_t</type>
          </param>
        </templateparamlist>
        <type>void *</type>
        <definition>void * ls::utils::tuple_t&lt; data_t &gt;::getObjectAtIndex</definition>
        <argsstring>(unsigned index, unsigned offset, arg_t *)</argsstring>
        <name>getObjectAtIndex</name>
        <param>
          <type>unsigned</type>
          <declname>index</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>arg_t *</type>
        </param>
        <briefdescription>
<para>Get the last object in the data buffer using an index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>A byte offset to the object requested by the template parameter &quot;request_t&quot;.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg_t</parametername>
</parameternamelist>
<parameterdescription>
<para>A null type pointer, used to help iterate through objects within an tuple&apos;s byte buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A constant pointer to an Object object if one exists. Returns NULL if it was not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="252" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="280" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1abdf714c41cf60be43ef59a0b7d31ee15" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename arg_t</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>args_t</declname>
            <defname>args_t</defname>
          </param>
        </templateparamlist>
        <type>void *</type>
        <definition>void * ls::utils::tuple_t&lt; data_t &gt;::getObjectAtIndex</definition>
        <argsstring>(unsigned index, unsigned offset, arg_t *, args_t *...)</argsstring>
        <name>getObjectAtIndex</name>
        <param>
          <type>unsigned</type>
          <declname>index</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>arg_t *</type>
        </param>
        <param>
          <type>args_t *</type>
          <declname>...</declname>
        </param>
        <briefdescription>
<para>Get an tupled object using an index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>An array index to help determine which object in the tuple should be retrieved.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>A byte offset to the object requested from client code.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg_t</parametername>
</parameternamelist>
<parameterdescription>
<para>A null type pointer, used to help iterate through objects within an tuple&apos;s byte buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args_t</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of null pointers, used to help iterate through objects within an tuple&apos;s byte buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A constant pointer to an object object if one exists. Returns NULL if it was not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="277" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="291" bodyend="295"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1aa69f36b5b14f9f0e343089da721d83bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr ls::utils::tuple_t&lt; data_t &gt;::tuple_t</definition>
        <argsstring>()</argsstring>
        <name>tuple_t</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Initialize all parameterized data types within a byte array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="285" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1a687461ea553a6789ad4c787cbcb71d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::utils::tuple_t&lt; data_t &gt;::tuple_t</definition>
        <argsstring>(const tuple_t &amp;)</argsstring>
        <name>tuple_t</name>
        <param>
          <type>const <ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref> &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
<para>Copy Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Uses each object&apos;s copy operator to copy data into *this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="292" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="126" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1ae6d5752058916443b62f4d87f45e961e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::utils::tuple_t&lt; data_t &gt;::tuple_t</definition>
        <argsstring>(tuple_t &amp;&amp;)</argsstring>
        <name>tuple_t</name>
        <param>
          <type><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref> &amp;&amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
<para>Move Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Uses each object&apos;s move operator to move data into *this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="299" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="136" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1a58545786d0aa6237b4faf045c789426f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::utils::tuple_t&lt; data_t &gt;::~tuple_t</definition>
        <argsstring>()</argsstring>
        <name>~tuple_t</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
<para>Calls the destructor on all member objects requested at compile-time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="307" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="146" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1af1efe78cd84fb2da7ab36f0386a031ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref> &amp;</type>
        <definition>tuple_t&lt; data_t...&gt; &amp; ls::utils::tuple_t&lt; data_t &gt;::operator=</definition>
        <argsstring>(const tuple_t &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref> &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
<para>Copy Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Uses each object&apos;s copy operator to copy data into *this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="314" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1aece8203f1a1d89680b383a1c34a3ee21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref> &amp;</type>
        <definition>tuple_t&lt; data_t...&gt; &amp; ls::utils::tuple_t&lt; data_t &gt;::operator=</definition>
        <argsstring>(tuple_t &amp;&amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref> &amp;&amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
<para>Move Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Uses each object&apos;s move operator to move data into *this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="321" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1a621e95f44c4d00f76779447a84f1cb29" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename request_t</type>
          </param>
        </templateparamlist>
        <type>constexpr const request_t *</type>
        <definition>constexpr const request_t * ls::utils::tuple_t&lt; data_t &gt;::getObject</definition>
        <argsstring>() const </argsstring>
        <name>getObject</name>
        <briefdescription>
<para>Get a constant object contained within *this. This object is specified using template parameters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A constant pointer to a tuple object if it exists. Otherwise, this methods returns NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="335" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1a8101d05960bfede6c0596d85497a3aa7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename request_t</type>
          </param>
        </templateparamlist>
        <type>request_t *</type>
        <definition>request_t * ls::utils::tuple_t&lt; data_t &gt;::getObject</definition>
        <argsstring>()</argsstring>
        <name>getObject</name>
        <briefdescription>
<para>Get an object contained within *this. This object is specified using a template parameter. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a pointer to a tuple object if it exists. Otherwise, this methods returns NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="348" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="234" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1a65a5dd9fce3b3f078a9f54eb153c887c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr const void *</type>
        <definition>constexpr const void * ls::utils::tuple_t&lt; data_t &gt;::getObject</definition>
        <argsstring>(unsigned index) const </argsstring>
        <name>getObject</name>
        <param>
          <type>unsigned</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get a constant object contained within *this. This object is specified using an array-like index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>An array-like index that can be used to retrieve a value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A constant pointer to a tuple object if it exists. Returns otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="361" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1af2cfc0588dd8ceb6b89a005eb6675b18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * ls::utils::tuple_t&lt; data_t &gt;::getObject</definition>
        <argsstring>(unsigned index)</argsstring>
        <name>getObject</name>
        <param>
          <type>unsigned</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get an object contained within *this. This object is specified using an array-like index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>An array-like index that can be used to retrieve a value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a tuple object if it exists. Returns NULL otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="373" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="302" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1utils_1_1tuple__t_1abb5724ccb8e0dca26868a19979b061e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr unsigned</type>
        <definition>constexpr unsigned ls::utils::tuple_t&lt; data_t &gt;::getNumObjects</definition>
        <argsstring>() const </argsstring>
        <name>getNumObjects</name>
        <briefdescription>
<para>Retrieve the number of objects contained within an <ref refid="classls_1_1utils_1_1tuple__t" kindref="compound">tuple_t</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An unsigned integral type representing the number of objects that are stored in *this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="382" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/generic/tuple_impl.h" bodystart="313" bodyend="315"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Tuple Class An tuple is a set of objects determined at compile-time. These objects are constructed within a tightly packed buffer. It is recommended to construct an tuple using the &quot;new&quot; operator if there are many objects. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" line="24" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/utils/tuple.h" bodystart="24" bodyend="383"/>
    <listofallmembers>
      <member refid="classls_1_1utils_1_1tuple__t_1a7b1325ed015f1337fd22f83709c0fd10" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>constructObjects</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1afb6a90b2c38383f15839910fc52359a3" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>constructObjects</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1a60d0a3bd131bc6c3588ab3f451498110" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>copyObjects</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1adab146febdc710861a2606702b2a91e5" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>copyObjects</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1a02de65e745307a6fc4018f5f8b675546" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>dataBuffer</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1afcab03a08ab8d5ccd9023586544cc994" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>destroyObjects</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1aac2b1351fde46d605011f572dc556f31" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>destroyObjects</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1abb5724ccb8e0dca26868a19979b061e8" prot="public" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>getNumObjects</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1a621e95f44c4d00f76779447a84f1cb29" prot="public" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>getObject</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1a8101d05960bfede6c0596d85497a3aa7" prot="public" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>getObject</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1a65a5dd9fce3b3f078a9f54eb153c887c" prot="public" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>getObject</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1af2cfc0588dd8ceb6b89a005eb6675b18" prot="public" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>getObject</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1a5e5eaff4e7eefd6990bd9702cbc8aaa6" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>getObjectAtIndex</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1a221a7ff65a5459144a50652ec90c06b7" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>getObjectAtIndex</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1a73c350a41fdd5d87d5e96fb35d0f9aec" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>getObjectAtIndex</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1abdf714c41cf60be43ef59a0b7d31ee15" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>getObjectAtIndex</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1a74f9d3361e10283de8a787809370235b" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>getObjectAtOffset</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1aea26b91dbd2dc12235c8486f310b6267" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>getObjectAtOffset</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1a6321466cad550e9b6e6675ee0f946561" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>getObjectAtOffset</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1a7cffa70b1de6371981c8854646cad14a" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>getObjectAtOffset</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1a47fa732babb32a92a6697fa57f5769ec" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>moveObjects</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1a4791531333ec55072bab59bb6f41dab9" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>moveObjects</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1af1efe78cd84fb2da7ab36f0386a031ef" prot="public" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>operator=</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1aece8203f1a1d89680b383a1c34a3ee21" prot="public" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>operator=</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1a9b93f3e73505b4cd151c29d7f5b9cf67" prot="private" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>tuple_t</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1aa69f36b5b14f9f0e343089da721d83bc" prot="public" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>tuple_t</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1a687461ea553a6789ad4c787cbcb71d7f" prot="public" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>tuple_t</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1ae6d5752058916443b62f4d87f45e961e" prot="public" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>tuple_t</name></member>
      <member refid="classls_1_1utils_1_1tuple__t_1a58545786d0aa6237b4faf045c789426f" prot="public" virt="non-virtual"><scope>ls::utils::tuple_t</scope><name>~tuple_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
