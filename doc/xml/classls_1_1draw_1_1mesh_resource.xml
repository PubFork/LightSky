<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="classls_1_1draw_1_1mesh_resource" kind="class" prot="public" final="yes">
    <compoundname>ls::draw::meshResource</compoundname>
    <basecompoundref refid="classls_1_1utils_1_1resource" prot="public" virt="non-virtual">ls::utils::resource</basecompoundref>
    <includes refid="mesh_resource_8h" local="no">meshResource.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classls_1_1draw_1_1mesh_resource_1a3ad4c7e2e53d6a17c4c3197672c1b138" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned ls::draw::meshResource::numVertices</definition>
        <argsstring></argsstring>
        <name>numVertices</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Contains the number of vertices used per mesh. This is implemented as a single array of unsigned integers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="32" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classls_1_1draw_1_1mesh_resource_1adcabf62fdafd8b9c52f7192143ab9e5e" prot="private" static="no" mutable="no">
        <type><ref refid="structls_1_1draw_1_1vertex" kindref="compound">vertex</ref> *</type>
        <definition>vertex* ls::draw::meshResource::pVertices</definition>
        <argsstring></argsstring>
        <name>pVertices</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Contains the vertex data used by each mesh. This is implemented as an array of vertex arrays. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="38" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classls_1_1draw_1_1mesh_resource_1a7d5ea747455e644859a0517b34fb146f" prot="private" static="no" mutable="no">
        <type><ref refid="namespacels_1_1draw_1ae8e45123197ab63f5b0f34a1913e5546" kindref="member">draw_mode_t</ref></type>
        <definition>draw_mode_t ls::draw::meshResource::resultDrawMode</definition>
        <argsstring></argsstring>
        <name>resultDrawMode</name>
        <initializer>= draw_mode_t::DRAW_MODE_DEFAULT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Contains the resulting draw mode for each mesh after loading. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="43" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classls_1_1draw_1_1mesh_resource_1a3d86e5b45a6c9a43685265e1ccc5be1a" prot="private" static="no" mutable="no">
        <type><ref refid="classls_1_1draw_1_1bounding_box" kindref="compound">boundingBox</ref></type>
        <definition>boundingBox ls::draw::meshResource::meshBounds</definition>
        <argsstring></argsstring>
        <name>meshBounds</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow the ability to generate the bounding area for a mesh </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="48" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1abf95f3995b84735f608cac254267573d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::meshResource::initVertices</definition>
        <argsstring>(unsigned vertCount)</argsstring>
        <name>initVertices</name>
        <param>
          <type>unsigned</type>
          <declname>vertCount</declname>
        </param>
        <briefdescription>
<para>Initialize. </para>        </briefdescription>
        <detaileddescription>
<para>This method initializes an internal buffer of vertices for loaded and generated meshes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertCount</parametername>
</parameternamelist>
<parameterdescription>
<para>This parameter sets the number of vertices which should be allocated into the internal vertex buffer. All data is contained on CPU-side memory and is not sent to the GPU.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the internal vertex buffer was successfully allocated, or FALSE if not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="64" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/meshResource.cpp" bodystart="96" bodyend="114"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1a83f5dbf812a0760cf898464598957609" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::draw::meshResource::meshResource</definition>
        <argsstring>()</argsstring>
        <name>meshResource</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Initializes all members contained within *this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="72" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/meshResource.cpp" bodystart="29" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1ab0e8e1aa22900435d9c03a3d33b4ff5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::draw::meshResource::meshResource</definition>
        <argsstring>(const meshResource &amp;)=delete</argsstring>
        <name>meshResource</name>
        <param>
          <type>const <ref refid="classls_1_1draw_1_1mesh_resource" kindref="compound">meshResource</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy Constructor <ndash/> DELETED. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1a266ff3971dc8531f416fa49993bf8143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::draw::meshResource::meshResource</definition>
        <argsstring>(meshResource &amp;&amp;mr)</argsstring>
        <name>meshResource</name>
        <param>
          <type><ref refid="classls_1_1draw_1_1mesh_resource" kindref="compound">meshResource</ref> &amp;&amp;</type>
          <declname>mr</declname>
        </param>
        <briefdescription>
<para>Move Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Moves all data from the input parameter into *this. No copies are performed during the operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mr</parametername>
</parameternamelist>
<parameterdescription>
<para>An r-value reference to a temporary mesh resource object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="88" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/meshResource.cpp" bodystart="35" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1a104f3d3ce364b024336f3f21c49f0682" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>ls::draw::meshResource::~meshResource</definition>
        <argsstring>() override</argsstring>
        <name>~meshResource</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
<para>Unloads all data contain within *this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="96" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/meshResource.cpp" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1a483293584f9f44229bbcad559499ceae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classls_1_1draw_1_1mesh_resource" kindref="compound">meshResource</ref> &amp;</type>
        <definition>meshResource&amp; ls::draw::meshResource::operator=</definition>
        <argsstring>(const meshResource &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classls_1_1draw_1_1mesh_resource" kindref="compound">meshResource</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy Constructor <ndash/> DELETED. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1ab3f2c1bcfca231cc7bcaedcbc338c2a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classls_1_1draw_1_1mesh_resource" kindref="compound">meshResource</ref> &amp;</type>
        <definition>meshResource &amp; ls::draw::meshResource::operator=</definition>
        <argsstring>(meshResource &amp;&amp;mr)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classls_1_1draw_1_1mesh_resource" kindref="compound">meshResource</ref> &amp;&amp;</type>
          <declname>mr</declname>
        </param>
        <briefdescription>
<para>Move Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Moves all data from the input parameter into *this. No copies are performed during the operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mr</parametername>
</parameternamelist>
<parameterdescription>
<para>An r-value reference to a temporary mesh resource object.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to *this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="114" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/meshResource.cpp" bodystart="55" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1aae56a1c82c109ca04de43812d1623bbc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned ls::draw::meshResource::getNumVertices</definition>
        <argsstring>() const </argsstring>
        <name>getNumVertices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of loaded vertex variables in a mesh.</para><para><simplesect kind="return"><para>An unsigned integral type, representing the number of vertices contained within the mesh loaded by *this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="122" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/meshResource_impl.h" bodystart="8" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1a888802bf981961f93afca86eecc09bd2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structls_1_1draw_1_1vertex" kindref="compound">vertex</ref> *</type>
        <definition>vertex * ls::draw::meshResource::getVertices</definition>
        <argsstring>() const </argsstring>
        <name>getVertices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the array of standard vertex types of a loaded mesh.</para><para><simplesect kind="return"><para>A pointer to the internal array which contains the vertices loaded by *this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="130" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/meshResource_impl.h" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1ae3312b232d670164997ed4e7e57ae718" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ls::draw::meshResource::unload</definition>
        <argsstring>() override</argsstring>
        <name>unload</name>
        <reimplements refid="classls_1_1utils_1_1resource_1ae7de856e2b33910059d2e81d548e57eb">unload</reimplements>
        <briefdescription>
<para>Unload. </para>        </briefdescription>
        <detaileddescription>
<para>Free all memory used by *this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="137" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/meshResource.cpp" bodystart="79" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1a2cce6a75f7fbc3ed63c273053d32bb68" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool ls::draw::meshResource::loadFile</definition>
        <argsstring>(const std::string &amp;filename) override</argsstring>
        <name>loadFile</name>
        <reimplements refid="classls_1_1utils_1_1resource_1abc6a808606df0e4ca912f228f2a41aa7">loadFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Load a 3D mesh file <ndash/> NOT YET IMPLEMENTED. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>A string object containing the relative path name to a file that should be loadable into memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the file was successfully loaded. False if not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="148" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/meshResource.cpp" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1af0a670bcf9f882d4f01a1f4222fc0ce0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool ls::draw::meshResource::saveFile</definition>
        <argsstring>(const std::string &amp;) const override</argsstring>
        <name>saveFile</name>
        <reimplements refid="classls_1_1utils_1_1resource_1ad07e11bc2ef3538a2444eb804114a2ef">saveFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
<para>Save a mesh to a file <ndash/> NOT YET IMPLEMENTED. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>A string object containing the relative path name to a file that should be saved to the computer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the file was successfully saved. False if not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="159" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/meshResource.cpp" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1a7b34d7235063496c92daadfee6d86056" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacels_1_1draw_1ae8e45123197ab63f5b0f34a1913e5546" kindref="member">draw_mode_t</ref></type>
        <definition>draw_mode_t ls::draw::meshResource::getDrawMode</definition>
        <argsstring>() const </argsstring>
        <name>getDrawMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the draw mode that was generated while loading a mesh.</para><para><simplesect kind="return"><para>The target draw mode for the currently loaded mesh. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="166" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/meshResource_impl.h" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1aa7fb97e643e43d36986e1c4b379c1c86" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classls_1_1draw_1_1bounding_box" kindref="compound">boundingBox</ref> &amp;</type>
        <definition>const boundingBox &amp; ls::draw::meshResource::getBoundingBox</definition>
        <argsstring>() const </argsstring>
        <name>getBoundingBox</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the maximum bounds of a loaded mesh.</para><para><simplesect kind="return"><para>A constant reference to an <ref refid="classls_1_1draw_1_1bounding_box" kindref="compound">boundingBox</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="173" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/meshResource_impl.h" bodystart="29" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1aca417a820c4f119ce46c8eeb5afd86f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::meshResource::loadPolygon</definition>
        <argsstring>(unsigned numPoints=3)</argsstring>
        <name>loadPolygon</name>
        <param>
          <type>unsigned</type>
          <declname>numPoints</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>N-Sided polygon primitive loading method</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of points that the polygon should contain. This number must be greater than 1.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the function loaded the mesh correctly, or FALSE if an error occurred during the load. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="186" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/meshResource.cpp" bodystart="170" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1a54a258b0200fca0f1fc11ef9be93e29d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::meshResource::loadTriangle</definition>
        <argsstring>()</argsstring>
        <name>loadTriangle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Triangle primitive loading method</para><para><simplesect kind="return"><para>TRUE if the function loaded the mesh correctly, or FALSE if an error occurred during the load.</para></simplesect>
Triangle texture coordinates are as follows:</para><para>|-<mdash/>1<mdash/>| | /\ | | / \ | | / \ | 0/______\2 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="203" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/meshResource_impl.h" bodystart="36" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1a23f16efb33960d0cbbf1c118c3494194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::meshResource::loadQuad</definition>
        <argsstring>()</argsstring>
        <name>loadQuad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a set of vertices representing a square/quad.</para><para><simplesect kind="return"><para>TRUE if the function loaded the mesh correctly, or FALSE if an error occurred during the load. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="212" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/meshResource.cpp" bodystart="135" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1ac560e0601b8349f03293c1b2c16e3f3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::meshResource::loadCircle</definition>
        <argsstring>(unsigned numPoints=5)</argsstring>
        <name>loadCircle</name>
        <param>
          <type>unsigned</type>
          <declname>numPoints</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a set of vertices representing a circle.</para><para><simplesect kind="return"><para>TRUE if the function loaded the mesh correctly, or FALSE if an error occurred during the load. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="221" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/meshResource_impl.h" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1a351634d74b2171e66f1e12e34d10f3a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::meshResource::loadCube</definition>
        <argsstring>()</argsstring>
        <name>loadCube</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a set of vertices representing a cube.</para><para><simplesect kind="return"><para>TRUE if the function loaded the mesh correctly, or FALSE if an error occurred during the load. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="230" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/meshResource.cpp" bodystart="203" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1a28c37d1c76ac23c192d95425788c80bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::meshResource::loadCylinder</definition>
        <argsstring>(unsigned numSides=2)</argsstring>
        <name>loadCylinder</name>
        <param>
          <type>unsigned</type>
          <declname>numSides</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a set of vertices representing a cylinder.</para><para><simplesect kind="return"><para>TRUE if the function loaded the mesh correctly, or FALSE if an error occurred during the load. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="239" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/meshResource.cpp" bodystart="334" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1adb323b358340c42f17fa1d105135e1a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::meshResource::loadCone</definition>
        <argsstring>(unsigned numSides=2)</argsstring>
        <name>loadCone</name>
        <param>
          <type>unsigned</type>
          <declname>numSides</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a set of vertices representing a cone.</para><para><simplesect kind="return"><para>TRUE if the function loaded the mesh correctly, or FALSE if an error occurred during the load. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="248" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/meshResource.cpp" bodystart="415" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1mesh_resource_1a4513c4b18f32290ec5e1abc4e380cc6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::meshResource::loadSphere</definition>
        <argsstring>(unsigned resolution)</argsstring>
        <name>loadSphere</name>
        <param>
          <type>unsigned</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a set of vertices representing a sphere.</para><para><simplesect kind="return"><para>TRUE if the function loaded the mesh correctly, or FALSE if an error occurred during the load. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="257" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/meshResource.cpp" bodystart="487" bodyend="542"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The mesh resource can be used to load a mesh or meshes from a file. It can also be used to generate basic primitives such as a sphere, cube, cone, etc. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="78">
        <label>ls::utils::resource</label>
        <link refid="classls_1_1utils_1_1resource"/>
      </node>
      <node id="77">
        <label>ls::draw::meshResource</label>
        <link refid="classls_1_1draw_1_1mesh_resource"/>
        <childnode refid="78" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="80">
        <label>ls::utils::resource</label>
        <link refid="classls_1_1utils_1_1resource"/>
      </node>
      <node id="79">
        <label>ls::draw::meshResource</label>
        <link refid="classls_1_1draw_1_1mesh_resource"/>
        <childnode refid="80" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" line="26" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/meshResource.h" bodystart="26" bodyend="258"/>
    <listofallmembers>
      <member refid="classls_1_1utils_1_1resource_1a6748a8528cc1af299d511d9a2f8a74ce" prot="protected" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>dataSize</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1aa7fb97e643e43d36986e1c4b379c1c86" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>getBoundingBox</name></member>
      <member refid="classls_1_1utils_1_1resource_1ae8c73df0e1904ef69c4473d253c07996" prot="public" virt="virtual"><scope>ls::draw::meshResource</scope><name>getByteSize</name></member>
      <member refid="classls_1_1utils_1_1resource_1ac7ea69ade647fad36ccf0ba13d72e5c1" prot="public" virt="virtual"><scope>ls::draw::meshResource</scope><name>getData</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1a7b34d7235063496c92daadfee6d86056" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>getDrawMode</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1aae56a1c82c109ca04de43812d1623bbc" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>getNumVertices</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1a888802bf981961f93afca86eecc09bd2" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>getVertices</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1abf95f3995b84735f608cac254267573d" prot="private" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>initVertices</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1ac560e0601b8349f03293c1b2c16e3f3f" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>loadCircle</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1adb323b358340c42f17fa1d105135e1a2" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>loadCone</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1a351634d74b2171e66f1e12e34d10f3a0" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>loadCube</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1a28c37d1c76ac23c192d95425788c80bf" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>loadCylinder</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1a2cce6a75f7fbc3ed63c273053d32bb68" prot="public" virt="virtual"><scope>ls::draw::meshResource</scope><name>loadFile</name></member>
      <member refid="classls_1_1utils_1_1resource_1a982c2e94e4723d6d68153a4353c656f3" prot="public" virt="virtual" ambiguityscope="ls::utils::resource::"><scope>ls::draw::meshResource</scope><name>loadFile</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1aca417a820c4f119ce46c8eeb5afd86f6" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>loadPolygon</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1a23f16efb33960d0cbbf1c118c3494194" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>loadQuad</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1a4513c4b18f32290ec5e1abc4e380cc6d" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>loadSphere</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1a54a258b0200fca0f1fc11ef9be93e29d" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>loadTriangle</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1a3d86e5b45a6c9a43685265e1ccc5be1a" prot="private" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>meshBounds</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1a83f5dbf812a0760cf898464598957609" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>meshResource</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1ab0e8e1aa22900435d9c03a3d33b4ff5c" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>meshResource</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1a266ff3971dc8531f416fa49993bf8143" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>meshResource</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1a3ad4c7e2e53d6a17c4c3197672c1b138" prot="private" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>numVertices</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1a483293584f9f44229bbcad559499ceae" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>operator=</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1ab3f2c1bcfca231cc7bcaedcbc338c2a5" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>operator=</name></member>
      <member refid="classls_1_1utils_1_1resource_1aa13ad61fc6557eae016bd09a0f03423a" prot="public" virt="non-virtual" ambiguityscope="ls::utils::resource::"><scope>ls::draw::meshResource</scope><name>operator=</name></member>
      <member refid="classls_1_1utils_1_1resource_1a9cd97e981d5fbbc17d645a0fa94c5e3b" prot="public" virt="non-virtual" ambiguityscope="ls::utils::resource::"><scope>ls::draw::meshResource</scope><name>operator=</name></member>
      <member refid="classls_1_1utils_1_1resource_1a6d51ff840102e455c80b6a8dbc15e326" prot="protected" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>pData</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1adcabf62fdafd8b9c52f7192143ab9e5e" prot="private" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>pVertices</name></member>
      <member refid="classls_1_1utils_1_1resource_1a343735f471d08b7e3e1a71f0ff358158" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>resource</name></member>
      <member refid="classls_1_1utils_1_1resource_1a4211e2fc500db81a83870493e86ffbee" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>resource</name></member>
      <member refid="classls_1_1utils_1_1resource_1a1395afc3c010934708bbc769fc0b0e80" prot="public" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>resource</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1a7d5ea747455e644859a0517b34fb146f" prot="private" virt="non-virtual"><scope>ls::draw::meshResource</scope><name>resultDrawMode</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1af0a670bcf9f882d4f01a1f4222fc0ce0" prot="public" virt="virtual"><scope>ls::draw::meshResource</scope><name>saveFile</name></member>
      <member refid="classls_1_1utils_1_1resource_1a8f0ccf4c1548983b42fcbb8054ee9339" prot="public" virt="virtual" ambiguityscope="ls::utils::resource::"><scope>ls::draw::meshResource</scope><name>saveFile</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1ae3312b232d670164997ed4e7e57ae718" prot="public" virt="virtual"><scope>ls::draw::meshResource</scope><name>unload</name></member>
      <member refid="classls_1_1draw_1_1mesh_resource_1a104f3d3ce364b024336f3f21c49f0682" prot="public" virt="virtual"><scope>ls::draw::meshResource</scope><name>~meshResource</name></member>
      <member refid="classls_1_1utils_1_1resource_1a1e7c76b1fce42a50b8605d947cc7e736" prot="public" virt="pure-virtual"><scope>ls::draw::meshResource</scope><name>~resource</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
