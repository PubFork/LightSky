<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="namespacels_1_1math" kind="namespace">
    <compoundname>ls::math</compoundname>
    <innerclass refid="classls_1_1math_1_1fixed__t" prot="public">ls::math::fixed_t</innerclass>
    <innerclass refid="structls_1_1math_1_1mat2__t" prot="public">ls::math::mat2_t</innerclass>
    <innerclass refid="structls_1_1math_1_1mat3__t" prot="public">ls::math::mat3_t</innerclass>
    <innerclass refid="structls_1_1math_1_1mat4__t" prot="public">ls::math::mat4_t</innerclass>
    <innerclass refid="classls_1_1math_1_1perlin_noise__t" prot="public">ls::math::perlinNoise_t</innerclass>
    <innerclass refid="structls_1_1math_1_1quat__t" prot="public">ls::math::quat_t</innerclass>
    <innerclass refid="structls_1_1math_1_1vec2__t" prot="public">ls::math::vec2_t</innerclass>
    <innerclass refid="structls_1_1math_1_1vec3__t" prot="public">ls::math::vec3_t</innerclass>
    <innerclass refid="structls_1_1math_1_1vec4__t" prot="public">ls::math::vec4_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacels_1_1math_1a5785c71c16b92cfdc495eeda63611d09" prot="public" static="no">
        <name>@4</name>
        <enumvalue id="namespacels_1_1math_1a5785c71c16b92cfdc495eeda63611d09a6cb26f4e168d75b07e87944e96aa84bb" prot="public">
          <name>MAX_PERMUTATIONS</name>
          <initializer>= 512</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/perlinNoise_impl.h" line="8" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/perlinNoise_impl.h" bodystart="8" bodyend="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacels_1_1math_1a8b2a6ae98b211546206303159680b66b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(lowp_t, fixed_t, int32_t, 7)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>lowp_t</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>7</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="694" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a658e631e7fec35a7fb6e48d7b91bd00a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(lowp, fixed_t, LS_INT, 7)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>lowp</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type><ref refid="types_8h_1aabc790ccad4893720b2b0f4ebdc85464" kindref="member">LS_INT</ref></type>
        </param>
        <param>
          <type>7</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="695" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a9de02766dbb91a43119d9f7e9a511633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(medp_t, fixed_t, int32_t, 15)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>medp_t</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>15</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="696" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a1ee603825c788d0d9be65180465f5fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(medp, fixed_t, LS_INT, 15)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>medp</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type><ref refid="types_8h_1aabc790ccad4893720b2b0f4ebdc85464" kindref="member">LS_INT</ref></type>
        </param>
        <param>
          <type>15</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="697" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a5b0c66bc590975e31e2d86f217ad79b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(highp_t, fixed_t, int32_t, 23)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>highp_t</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>23</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="698" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a2645ba72007e5d57806d6d6058f9a62a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(highp, fixed_t, LS_INT, 23)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>highp</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type><ref refid="types_8h_1aabc790ccad4893720b2b0f4ebdc85464" kindref="member">LS_INT</ref></type>
        </param>
        <param>
          <type>23</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="699" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ae6178e9c29190c1741e35d58e7c95a4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(long_lowp_t, fixed_t, int64_t, 15)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>long_lowp_t</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>15</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="701" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1af59c3e22e10c3eeea8caf0a009ff9453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(long_medp_t, fixed_t, int64_t, 31)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>long_medp_t</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>31</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="702" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a70e51ae81d72fc584e5b3470db1206ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(long_highp_t, fixed_t, int64_t, 47)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>long_highp_t</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>47</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="703" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a93b93088b89da22083a80b4efca3b735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(ulowp_t, fixed_t, uint32_t, 8)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>ulowp_t</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>8</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="705" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a9107560f0b9788b1cca04b627537acf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(ulowp, fixed_t, LS_UINT, 8)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>ulowp</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type><ref refid="types_8h_1aeb3d6eb7dea66970d88bfd41187cc4c3" kindref="member">LS_UINT</ref></type>
        </param>
        <param>
          <type>8</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="706" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a75686b204cd743bdf3963ea50965d6de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(umedp_t, fixed_t, uint32_t, 16)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>umedp_t</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>16</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="707" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a804e83ba44134a117ba086dbcf332832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(umedp, fixed_t, LS_UINT, 16)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>umedp</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type><ref refid="types_8h_1aeb3d6eb7dea66970d88bfd41187cc4c3" kindref="member">LS_UINT</ref></type>
        </param>
        <param>
          <type>16</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="708" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1abc3107e1dd0e55b4502f37254b7caf23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(uhighp_t, fixed_t, uint32_t, 24)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>uhighp_t</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>24</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="709" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a33b4f8351e1bd80217eebbb01971180b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(uhigh, fixed_t, LS_UINT, 24)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>uhigh</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type><ref refid="types_8h_1aeb3d6eb7dea66970d88bfd41187cc4c3" kindref="member">LS_UINT</ref></type>
        </param>
        <param>
          <type>24</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="710" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a607f34ceeaa309acf739c7bd872bdf5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(ulong_lowp_t, fixed_t, uint64_t, 16)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>ulong_lowp_t</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>16</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="712" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aeaeda1a51d80760bde8bf43938ecfcab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(ulong_medp_t, fixed_t, uint64_t, 32)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>ulong_medp_t</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="713" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aef64f8f30fb1953ee462657f034af073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(ulong_highp_t, fixed_t, uint64_t, 48)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>ulong_highp_t</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>48</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="714" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a6359e379194968f6e79620a3e0a99cd8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; num_t &gt;</type>
        <definition>quat_t&lt; num_t &gt; ls::math::operator+</definition>
        <argsstring>(num_t n, const quat_t&lt; num_t &gt; &amp;q)</argsstring>
        <name>operator+</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/quat_impl.h" line="9" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/quat_impl.h" bodystart="295" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1abf0959477fda2fa09eb88d49959a51bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; num_t &gt;</type>
        <definition>quat_t&lt; num_t &gt; ls::math::operator-</definition>
        <argsstring>(num_t n, const quat_t&lt; num_t &gt; &amp;q)</argsstring>
        <name>operator-</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/quat_impl.h" line="12" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/quat_impl.h" bodystart="300" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ac5dc0119315a1df74b312154e2c0554a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; num_t &gt;</type>
        <definition>quat_t&lt; num_t &gt; ls::math::operator*</definition>
        <argsstring>(num_t n, const quat_t&lt; num_t &gt; &amp;q)</argsstring>
        <name>operator*</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/quat_impl.h" line="15" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/quat_impl.h" bodystart="305" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a84e73f65ef53e2b57f730fb47f12a830" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; num_t &gt;</type>
        <definition>quat_t&lt; num_t &gt; ls::math::operator/</definition>
        <argsstring>(num_t n, const quat_t&lt; num_t &gt; &amp;q)</argsstring>
        <name>operator/</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/quat_impl.h" line="18" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/quat_impl.h" bodystart="310" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a2b49135d0d7a8d7af6e9282a057e676f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; num_t &gt;</type>
        <definition>vec2_t&lt; num_t &gt; ls::math::operator+</definition>
        <argsstring>(num_t n, const vec2_t&lt; num_t &gt; &amp;v)</argsstring>
        <name>operator+</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec2_impl.h" line="295" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec2_impl.h" bodystart="295" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a0f058738cec160bd437f35db6fe6e956" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; num_t &gt;</type>
        <definition>vec2_t&lt; num_t &gt; ls::math::operator-</definition>
        <argsstring>(num_t n, const vec2_t&lt; num_t &gt; &amp;v)</argsstring>
        <name>operator-</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec2_impl.h" line="300" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec2_impl.h" bodystart="300" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ab3f6c655de02d3c7da3b5f6cce183aa8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; num_t &gt;</type>
        <definition>vec2_t&lt; num_t &gt; ls::math::operator*</definition>
        <argsstring>(num_t n, const vec2_t&lt; num_t &gt; &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec2_impl.h" line="305" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec2_impl.h" bodystart="305" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ad75d48b0a2d4f461cd50be261568cb97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; num_t &gt;</type>
        <definition>vec3_t&lt; num_t &gt; ls::math::operator+</definition>
        <argsstring>(num_t n, const vec3_t&lt; num_t &gt; &amp;v)</argsstring>
        <name>operator+</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec3_impl.h" line="316" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec3_impl.h" bodystart="316" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aa8b532d2f78c4dc483935e9c89869e2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; num_t &gt;</type>
        <definition>vec3_t&lt; num_t &gt; ls::math::operator-</definition>
        <argsstring>(num_t n, const vec3_t&lt; num_t &gt; &amp;v)</argsstring>
        <name>operator-</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec3_impl.h" line="321" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec3_impl.h" bodystart="321" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a95d6822db7eec735e29caa73af5079ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; num_t &gt;</type>
        <definition>vec3_t&lt; num_t &gt; ls::math::operator*</definition>
        <argsstring>(num_t n, const vec3_t&lt; num_t &gt; &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec3_impl.h" line="326" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec3_impl.h" bodystart="326" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a6d57496cc045305372c2bbec55eab307" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; num_t &gt;</type>
        <definition>vec4_t&lt; num_t &gt; ls::math::operator+</definition>
        <argsstring>(num_t n, const vec4_t&lt; num_t &gt; &amp;v)</argsstring>
        <name>operator+</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec4_impl.h" line="348" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec4_impl.h" bodystart="348" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a47814d06e556c53b13de810d7b0a6e8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; num_t &gt;</type>
        <definition>vec4_t&lt; num_t &gt; ls::math::operator-</definition>
        <argsstring>(num_t n, const vec4_t&lt; num_t &gt; &amp;v)</argsstring>
        <name>operator-</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec4_impl.h" line="353" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec4_impl.h" bodystart="353" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ad0c3a62144f930753cf8745ca37c20b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; num_t &gt;</type>
        <definition>vec4_t&lt; num_t &gt; ls::math::operator*</definition>
        <argsstring>(num_t n, const vec4_t&lt; num_t &gt; &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec4_impl.h" line="358" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/vec4_impl.h" bodystart="358" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a1d1ef7bb71f8893e06466a497ee708c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref>&lt; num_t &gt;</type>
        <definition>mat2_t&lt;num_t&gt; ls::math::operator+</definition>
        <argsstring>(num_t n, const mat2_t&lt; num_t &gt; &amp;m)</argsstring>
        <name>operator+</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat2.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a8ec6952509ce56c4de51157ba25d41c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref>&lt; num_t &gt;</type>
        <definition>mat2_t&lt;num_t&gt; ls::math::operator-</definition>
        <argsstring>(num_t n, const mat2_t&lt; num_t &gt; &amp;m)</argsstring>
        <name>operator-</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat2.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ad38c83a00b74a0fb7ba03a618a55dc02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref>&lt; num_t &gt;</type>
        <definition>mat2_t&lt;num_t&gt; ls::math::operator*</definition>
        <argsstring>(num_t n, const mat2_t&lt; num_t &gt; &amp;m)</argsstring>
        <name>operator*</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat2.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a515453b33ecaf360bc252d7ea7018547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat2f, mat2_t, float)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat2f</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat2.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a597cd3ad0c180723fdacc9e31ec76bf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat2d, mat2_t, double)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat2d</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat2.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a6161c31ac5fd2e813bb52c493ce4344a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat2ui, mat2_t, unsigned)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat2ui</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref></type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat2.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a816a8a84502890abf5126a0b826d81ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat2x, mat2_t, medp_t)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat2x</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref></type>
        </param>
        <param>
          <type>medp_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat2.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ae8d619975540a9da19d4a19f9570fff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat2, mat2_t, LS_FLOAT)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat2</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref></type>
        </param>
        <param>
          <type><ref refid="types_8h_1a1de3e68b2908f81eccc6071840788580" kindref="member">LS_FLOAT</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat2.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a71b160a663f5b1c5fdffd293f69a6010" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; num_t &gt;</type>
        <definition>mat3_t&lt;num_t&gt; ls::math::operator+</definition>
        <argsstring>(num_t n, const mat3_t&lt; num_t &gt; &amp;m)</argsstring>
        <name>operator+</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat3.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ad99678889a7005c32463d5174fafc4a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; num_t &gt;</type>
        <definition>mat3_t&lt;num_t&gt; ls::math::operator-</definition>
        <argsstring>(num_t n, const mat3_t&lt; num_t &gt; &amp;m)</argsstring>
        <name>operator-</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat3.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a87554db851752a1f82e540f3b3dcc948" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; num_t &gt;</type>
        <definition>mat3_t&lt;num_t&gt; ls::math::operator*</definition>
        <argsstring>(num_t n, const mat3_t&lt; num_t &gt; &amp;m)</argsstring>
        <name>operator*</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat3.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a1d9169062e3b1ebbb9594d13c0a3594b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat3f, mat3_t, float)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat3f</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat3.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1adf7611e9376d8a6a94ef719cb52c6267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat3d, mat3_t, double)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat3d</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat3.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a558f0fdd50e4e90a1fffb7591725fde5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat3i, mat3_t, int)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat3i</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat3.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ac73b68931f0c581688d73009416adbd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat3ui, mat3_t, unsigned)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat3ui</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref></type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat3.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a5844f658cf696625d20fbcbb36837a3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat3x, mat3_t, medp_t)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat3x</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref></type>
        </param>
        <param>
          <type>medp_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat3.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aaed84a58f4e38cd9415bf1872024c556" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat3, mat3_t, LS_FLOAT)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat3</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref></type>
        </param>
        <param>
          <type><ref refid="types_8h_1a1de3e68b2908f81eccc6071840788580" kindref="member">LS_FLOAT</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat3.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1af57a6d2d6723f7c81ed5305f29242ba8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; num_t &gt;</type>
        <definition>mat4_t&lt;num_t&gt; ls::math::operator+</definition>
        <argsstring>(num_t n, const mat4_t&lt; num_t &gt; &amp;m)</argsstring>
        <name>operator+</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat4.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a8c11dbbe33ecc6ea43ecffbe2d49c598" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; num_t &gt;</type>
        <definition>mat4_t&lt;num_t&gt; ls::math::operator-</definition>
        <argsstring>(num_t n, const mat4_t&lt; num_t &gt; &amp;m)</argsstring>
        <name>operator-</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat4.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aa46f2a23d459e3eac61255860fa52285" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename num_t</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; num_t &gt;</type>
        <definition>mat4_t&lt;num_t&gt; ls::math::operator*</definition>
        <argsstring>(num_t n, const mat4_t&lt; num_t &gt; &amp;m)</argsstring>
        <name>operator*</name>
        <param>
          <type>num_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; num_t &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat4.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a4dbd5fdf681a544a109bd23b5d2938cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat4f, mat4_t, float)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat4f</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat4.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a7809dbe76901e5d0d1d34c1cb1743d36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat4d, mat4_t, double)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat4d</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat4.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ae64a8575712a62945544a32f6a4b84bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat4i, mat4_t, int)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat4i</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat4.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a0e89d636388342bb00ca1e641366404f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat4ui, mat4_t, unsigned)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat4ui</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref></type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat4.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aa101741370cdd1e5e2fe42b5a50186ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat4x, mat4_t, medp_t)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat4x</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref></type>
        </param>
        <param>
          <type>medp_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat4.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1af8350b95978dd622234b20f7ff86b1a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(mat4, mat4_t, LS_FLOAT)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>mat4</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref></type>
        </param>
        <param>
          <type><ref refid="types_8h_1a1de3e68b2908f81eccc6071840788580" kindref="member">LS_FLOAT</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat4.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a76e268152f06aad3bab6da8fa8183c10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr N</type>
        <definition>constexpr N ls::math::determinant</definition>
        <argsstring>(const mat2_t&lt; N &gt; &amp;m)</argsstring>
        <name>determinant</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>determinant Retrieve the determinate for a 2x2 matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a 2x2 matrix.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A scalar of type N, which contains the determinate of a 2x2 matrix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="26" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a0151b7247c9660411217818926ec4268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref>&lt; N &gt;</type>
        <definition>constexpr mat2_t&lt;N&gt; ls::math::transpose</definition>
        <argsstring>(const mat2_t&lt; N &gt; &amp;m)</argsstring>
        <name>transpose</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>transpose Flip the values of a matrix around its main diagonal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a 2x2 matrix.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the transposition of a matrix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ad5302cd55f7efdf1e3c57b3066336f16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref>&lt; N &gt;</type>
        <definition>constexpr mat2_t&lt;N&gt; ls::math::inverse</definition>
        <argsstring>(const mat2_t&lt; N &gt; &amp;m)</argsstring>
        <name>inverse</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>inverse Invert a matrix m so that m * m^i = I </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a 2x2 matrix.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The inverse of matrix m. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ae019ac06352da9c76a2b920f527f2ec8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref>&lt; N &gt;</type>
        <definition>mat2_t&lt;N&gt; ls::math::rotate</definition>
        <argsstring>(const mat2_t&lt; N &gt; &amp;m, N radians)</argsstring>
        <name>rotate</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>N</type>
          <declname>radians</declname>
        </param>
        <briefdescription>
<para>rotate Rotate a 2x2 matrix by a number of radians. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a 2x2 matrix.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radians</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of radians to rotate a matrix by.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A the rotation of m by a number of radians. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ac01f805334fa718b64cc9fba25d40164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref>&lt; N &gt;</type>
        <definition>constexpr mat2_t&lt;N&gt; ls::math::scale</definition>
        <argsstring>(const mat2_t&lt; N &gt; &amp;m, const vec2_t&lt; N &gt; &amp;amount)</argsstring>
        <name>scale</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>scale Scale a matrix by modifying the components of its main diagonal. This method uses additive scaling rather than multiplicative scaling. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a 2x2 matrix.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of scaling along each axis of matrix m. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a35cbbeef68ea152a8f25cb8c6c8385e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr N</type>
        <definition>constexpr N ls::math::determinant</definition>
        <argsstring>(const mat3_t&lt; N &gt; &amp;m)</argsstring>
        <name>determinant</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>determinant Retrieve the determinate for a 3x3 matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a 3x3 matrix.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A scalar of type N, which contains the determinate of a 3x3 matrix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ac6ebd24f0df3770aa31597e05097fb2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; N &gt;</type>
        <definition>constexpr mat3_t&lt;N&gt; ls::math::transpose</definition>
        <argsstring>(const mat3_t&lt; N &gt; &amp;m)</argsstring>
        <name>transpose</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>transpose Flip the values of a matrix around its main diagonal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a 3x3 matrix.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the transposition of a matrix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ace9bc3f99598011a76113213c1cff9bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; N &gt;</type>
        <definition>constexpr mat3_t&lt;N&gt; ls::math::inverse</definition>
        <argsstring>(const mat3_t&lt; N &gt; &amp;m)</argsstring>
        <name>inverse</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>inverse </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ab41b1fa2ccba226ca34efc33d28c1d61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; N &gt;</type>
        <definition>mat3_t&lt;N&gt; ls::math::rotate</definition>
        <argsstring>(const mat3_t&lt; N &gt; &amp;m, const vec3_t&lt; N &gt; &amp;axis, N radians)</argsstring>
        <name>rotate</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>N</type>
          <declname>radians</declname>
        </param>
        <briefdescription>
<para>rotate Rotate a 3x3 matrix by a number of radians. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a 3x3 matrix.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis in 3D space around which the matrix will be rotated.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radians</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of radians to rotate a matrix by.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A the rotation of m by a number of radians. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1abf2ca4a5b82e94d2272cd17fc205bf4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; N &gt;</type>
        <definition>constexpr mat3_t&lt;N&gt; ls::math::scale</definition>
        <argsstring>(const mat3_t&lt; N &gt; &amp;m, const vec3_t&lt; N &gt; &amp;amount)</argsstring>
        <name>scale</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>scale Scale a matrix by modifying the components of its main diagonal. This method uses additive scaling rather than multiplicative scaling. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a 3x3 matrix.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of scaling along each axis of matrix m. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a48acbe05bac03f39ef791e219e0925fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; N &gt;</type>
        <definition>constexpr mat3_t&lt;N&gt; ls::math::translate</definition>
        <argsstring>(const mat3_t&lt; N &gt; &amp;m, const vec2_t&lt; N &gt; &amp;amount)</argsstring>
        <name>translate</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>translate Translate a 3x3 matrix along a 2D plane. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a 3x3 matrix.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a constant 2D vector, indicating how much to move the matrix by.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a 3x3 matrix that has been translated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ae6692a2510eb480bc5300f791c010423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr N</type>
        <definition>constexpr N ls::math::determinant</definition>
        <argsstring>(const mat4_t&lt; N &gt; &amp;m)</argsstring>
        <name>determinant</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>determinant Retrieve the determinate for a 4x4 matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a 4x4 matrix.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A scalar of type N, which contains the determinate of a 4x4 matrix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a7abbacedef9bc4f44090825ef585c916" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt;</type>
        <definition>constexpr mat4_t&lt;N&gt; ls::math::transpose</definition>
        <argsstring>(const mat4_t&lt; N &gt; &amp;m)</argsstring>
        <name>transpose</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>transpose Flip the values of a matrix around its main diagonal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a 4x4 matrix.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the transposition of a matrix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a80799aa919c69131559525f5979068cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt;</type>
        <definition>mat4_t&lt;N&gt; ls::math::inverse</definition>
        <argsstring>(const mat4_t&lt; N &gt; &amp;m)</argsstring>
        <name>inverse</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>inverse </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a5a5549b40db820476cc185c3439c4f22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt;</type>
        <definition>mat4_t&lt;N&gt; ls::math::rotate</definition>
        <argsstring>(const mat4_t&lt; N &gt; &amp;m, const vec3_t&lt; N &gt; &amp;axis, N radians)</argsstring>
        <name>rotate</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>N</type>
          <declname>radians</declname>
        </param>
        <briefdescription>
<para>rotate Rotate a 4x4 matrix by a number of radians. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a 4x4 matrix.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis in 3D space around which the matrix will be rotated.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radians</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of radians to rotate a matrix by.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A the rotation of m by a number of radians. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a9f4d644e5fb63a6c96fbc4eeddda0b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt;</type>
        <definition>constexpr mat4_t&lt;N&gt; ls::math::scale</definition>
        <argsstring>(const mat4_t&lt; N &gt; &amp;m, const vec3_t&lt; N &gt; &amp;amount)</argsstring>
        <name>scale</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>scale Scale a matrix by modifying the components of its main diagonal. This method uses additive scaling rather than multiplicative scaling. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a 4x4 matrix.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of scaling along each axis of matrix m. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a6bf6a81cb93feacaf5d6fed20da8ec96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt;</type>
        <definition>constexpr mat4_t&lt;N&gt; ls::math::translate</definition>
        <argsstring>(const mat4_t&lt; N &gt; &amp;m, const vec3_t&lt; N &gt; &amp;amount)</argsstring>
        <name>translate</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>translate Translate a 4x4 matrix along a 3D plane. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a 4x4 matrix.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a constant 3D vector, indicating how much to move the matrix by.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a 4x4 matrix that has been translated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a6256973db9316ffa0b21c1072585470c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt;</type>
        <definition>mat4_t&lt;N&gt; ls::math::perspective</definition>
        <argsstring>(N fov, N aspect, N zNear, N zFar)</argsstring>
        <name>perspective</name>
        <param>
          <type>N</type>
          <declname>fov</declname>
        </param>
        <param>
          <type>N</type>
          <declname>aspect</declname>
        </param>
        <param>
          <type>N</type>
          <declname>zNear</declname>
        </param>
        <param>
          <type>N</type>
          <declname>zFar</declname>
        </param>
        <briefdescription>
<para>perspective Create a 2D perspective projection matrix in 3D space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fov</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle, in degrees, representing the field of view of the projection matrix.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aspect</parametername>
</parameternamelist>
<parameterdescription>
<para>A scalar which represents the aspect ratio of the projection.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zNear</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance which represents the point at which closely projected points in 3D space will be discarded from the projection.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zFar</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance which represents the point at which far away points in 3D space will be discarded from the projection.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 4x4 matrix which allows 3D points to be perspective-projected into a 2D plane through multiplication. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a7b56ce672c6f655ffa0552a7b3d4d7de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt;</type>
        <definition>mat4_t&lt;N&gt; ls::math::infinitePerspective</definition>
        <argsstring>(N fov, N aspect, N zNear)</argsstring>
        <name>infinitePerspective</name>
        <param>
          <type>N</type>
          <declname>fov</declname>
        </param>
        <param>
          <type>N</type>
          <declname>aspect</declname>
        </param>
        <param>
          <type>N</type>
          <declname>zNear</declname>
        </param>
        <briefdescription>
<para>infinitePerspective Create a 2D perspective projection matrix in 3D space with no far-clipping plane. This is useful in applications which do not care about the precision of floating-point values far from the projection matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fov</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle, in degrees, representing the field of view of the projection matrix.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aspect</parametername>
</parameternamelist>
<parameterdescription>
<para>A scalar which represents the aspect ratio of the projection.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zNear</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance which represents the point at which closely projected points in 3D space will be discarded from the projection.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 4x4 perspective-projection matrix with no far plane. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a1583dfa443123c252ae0c985c23ada71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt;</type>
        <definition>mat4_t&lt;N&gt; ls::math::ortho</definition>
        <argsstring>(N left, N right, N top, N bottom)</argsstring>
        <name>ortho</name>
        <param>
          <type>N</type>
          <declname>left</declname>
        </param>
        <param>
          <type>N</type>
          <declname>right</declname>
        </param>
        <param>
          <type>N</type>
          <declname>top</declname>
        </param>
        <param>
          <type>N</type>
          <declname>bottom</declname>
        </param>
        <briefdescription>
<para>ortho Create an orthographic-projection matrix in order to project 3D points onto a 2D plane. This method will project points without factoring in distance-scaling. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>the leftmost clipping point of the projection.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>the rightmost clipping point of the projection.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>the topmost clipping point of the projection.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bottom</parametername>
</parameternamelist>
<parameterdescription>
<para>the bottommost clipping point of the projection.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a 4x4 ortho-projection matrix which allows 3D points to be projected into a 2D representation without distance-scaling. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1abea22b85dff5f94a67d05b01a0144555" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt;</type>
        <definition>mat4_t&lt;N&gt; ls::math::ortho</definition>
        <argsstring>(N left, N right, N top, N bottom, N near, N far)</argsstring>
        <name>ortho</name>
        <param>
          <type>N</type>
          <declname>left</declname>
        </param>
        <param>
          <type>N</type>
          <declname>right</declname>
        </param>
        <param>
          <type>N</type>
          <declname>top</declname>
        </param>
        <param>
          <type>N</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type>N</type>
          <declname>near</declname>
        </param>
        <param>
          <type>N</type>
          <declname>far</declname>
        </param>
        <briefdescription>
<para>ortho Create an orthographic-projection matrix in order to project 3D points onto a 2D plane. This method will project points without factoring in distance-scaling. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>the leftmost clipping point of the projection.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>the rightmost clipping point of the projection.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>the topmost clipping point of the projection.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bottom</parametername>
</parameternamelist>
<parameterdescription>
<para>the bottommost clipping point of the projection.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zNear</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance which represents the point at which closely projected points in 3D space will be discarded from the projection.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zFar</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance which represents the point at which far away points in 3D space will be discarded from the projection.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a 4x4 orthographic-projection matrix which allows 3D points to be projected into a 2D representation without distance-scaling. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a1154cc065035880d42efd8f78d78944c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt;</type>
        <definition>mat4_t&lt;N&gt; ls::math::frustum</definition>
        <argsstring>(N left, N right, N top, N bottom, N near, N far)</argsstring>
        <name>frustum</name>
        <param>
          <type>N</type>
          <declname>left</declname>
        </param>
        <param>
          <type>N</type>
          <declname>right</declname>
        </param>
        <param>
          <type>N</type>
          <declname>top</declname>
        </param>
        <param>
          <type>N</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type>N</type>
          <declname>near</declname>
        </param>
        <param>
          <type>N</type>
          <declname>far</declname>
        </param>
        <briefdescription>
<para>frustum Create a viewing frustum in order to project 3D points into 2D space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>the leftmost clipping point of the projection.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>the rightmost clipping point of the projection.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>the topmost clipping point of the projection.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bottom</parametername>
</parameternamelist>
<parameterdescription>
<para>the bottommost clipping point of the projection.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zNear</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance which represents the point at which closely projected points in 3D space will be discarded from the projection.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zFar</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance which represents the point at which far away points in 3D space will be discarded from the projection.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a 4x4 frustum which allows 3D points to be projected onto a 2D plane. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ac386ab2320dbb068e6bc32279ef18c7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt;</type>
        <definition>mat4_t&lt;N&gt; ls::math::lookAt</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;pos, const vec3_t&lt; N &gt; &amp;target, const vec3_t&lt; N &gt; &amp;up)</argsstring>
        <name>lookAt</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>up</declname>
        </param>
        <briefdescription>
<para>lookAt Direct the far-plane of a projection matrix towards a point in 3D space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position, in 3D space, at which the projection matrix will be placed.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the target point, in 3D space, that the projection matrix will face.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>up</parametername>
</parameternamelist>
<parameterdescription>
<para>The direction of the top of the projection matrix.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A rotation matrix that represents a camera&apos;s orientation towards a target in 3D space. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="400" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a2d6869ec9cfd9ca1f32c6bb1ee7d74b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt;</type>
        <definition>mat4_t&lt;N&gt; ls::math::billboard</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;pos, const mat4_t&lt; N &gt; &amp;viewMatrix)</argsstring>
        <name>billboard</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt; &amp;</type>
          <declname>viewMatrix</declname>
        </param>
        <briefdescription>
<para>billboard Retrieve a model matrix in 3D space so that it is oriented towards a Rotation/View matrix from a certain position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position in 3D space that the billboard should be placed at.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>viewMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>A camera&apos;s view matrix which represents both the the position and orientation that a billboard should rotate towards.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A model matrix at a specified position, which is oriented towards a camera&apos;s view matrix in 3D space. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/mat_utils.h" line="418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aa1dcd0e80df734c2ee85fe631fd89830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(perlinNoisef, perlinNoise_t, float)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>perlinNoisef</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1perlin_noise__t" kindref="compound">perlinNoise_t</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/perlinNoise.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a503e28004251ad185b28e07eaa00b591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(perlinNoised, perlinNoise_t, double)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>perlinNoised</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1perlin_noise__t" kindref="compound">perlinNoise_t</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/perlinNoise.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ab75e0b4df29e2f26519ac07476bd30d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(perlinNoisei, perlinNoise_t, int)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>perlinNoisei</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1perlin_noise__t" kindref="compound">perlinNoise_t</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/perlinNoise.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a7ac36f15d2e306b28ed0925d4ac315d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(perlinNoiseuu, perlinNoise_t, unsigned)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>perlinNoiseuu</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1perlin_noise__t" kindref="compound">perlinNoise_t</ref></type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/perlinNoise.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a43ad95919cb0846228408936c101f753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(perlinNoisex, perlinNoise_t, medp_t)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>perlinNoisex</type>
        </param>
        <param>
          <type><ref refid="classls_1_1math_1_1perlin_noise__t" kindref="compound">perlinNoise_t</ref></type>
        </param>
        <param>
          <type>medp_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/perlinNoise.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ab69643a68521207611effb6d581fd2d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(quatf, quat_t, float)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>quatf</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aca4f7e14bb66a60d98273a1630438446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(quatd, quat_t, double)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>quatd</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a1b623c2bbd72fd69b668d3215fff0f9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(quati, quat_t, int)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>quati</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ae3d646d541dd7ac95acb1cb7ef331ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(quatui, quat_t, unsigned)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>quatui</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref></type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a9f1cf865b653c1c29befeaeb5275529c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(quatx, quat_t, medp_t)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>quatx</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref></type>
        </param>
        <param>
          <type>medp_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aec2a89837f3ee3c3e0206ff99e203128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(quat, quat_t, LS_FLOAT)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>quat</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref></type>
        </param>
        <param>
          <type><ref refid="types_8h_1a1de3e68b2908f81eccc6071840788580" kindref="member">LS_FLOAT</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a3761f7f0ea35dc4317946abbd9f89e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr N</type>
        <definition>constexpr N ls::math::dot</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;, const quat_t&lt; N &gt; &amp;)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
        </param>
        <briefdescription>
<para>dot Retrieve the dot product of two quaternions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the dot product of q1 &amp; q2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a9794bd0ebb73e859430161437a5e1af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr N</type>
        <definition>constexpr N ls::math::lengthSquared</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;)</argsstring>
        <name>lengthSquared</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
        </param>
        <briefdescription>
<para>lengthSquared Retrieve the square of the length/magnitude of a quaternion. This is faster than calling <ref refid="namespacels_1_1math_1a995772d187197b7389b2ee7f6064e66d" kindref="member">length()</ref> as no square roots are performed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The square of the length/magnitude of a quaternion. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a995772d187197b7389b2ee7f6064e66d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>N</type>
        <definition>N ls::math::length</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;)</argsstring>
        <name>length</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
        </param>
        <briefdescription>
<para>length Retrieve the length/magnitude of a quaternion. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length/magnitude of a quaternion. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1af1e7c304f55691af6977405aad2bbcfe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt;</type>
        <definition>quat_t&lt;N&gt; ls::math::inverse</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;q)</argsstring>
        <name>inverse</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>inverse Retrieve the geometric inverse of the quaternion. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the geometric inverse of the quaternion q, within a unit sphere. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a05514525f680a50091310f2701e26ed8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt;</type>
        <definition>constexpr quat_t&lt;N&gt; ls::math::conjugate</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;q)</argsstring>
        <name>conjugate</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>conjugate Get the complex-conjugate of a quaternion. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the complex conjugate of the quaternion q. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a84a09662c2c5009ebba99b787191ae16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt;</type>
        <definition>quat_t&lt;N&gt; ls::math::normalize</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;)</argsstring>
        <name>normalize</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
        </param>
        <briefdescription>
<para>normalize Normalize the quaternion q so that its points lie within a unit-sphere. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a normalized quaternion. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a7b29165fb6b0cbc36bfabdc9dd3ffece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt;</type>
        <definition>constexpr quat_t&lt;N&gt; ls::math::lerp</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;q1, const quat_t&lt; N &gt; &amp;q2, N percent)</argsstring>
        <name>lerp</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
          <declname>q2</declname>
        </param>
        <param>
          <type>N</type>
          <declname>percent</declname>
        </param>
        <briefdescription>
<para>Linearly interpolate a quaternion towards another by some percentage. This is the same as calling &quot;ls::math::mix()&quot; for a vector or scalar. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q1</parametername>
</parameternamelist>
<parameterdescription>
<para>The quaternion to be interpolated.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q2</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference quaternion that q1 should interpolate to.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>percent</parametername>
</parameternamelist>
<parameterdescription>
<para>The percentage that q1 should move towards q2.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a linear interpolation of q1 towards q2 by some percent. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a6688c21b0310820e623d2fcc875a8e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt;</type>
        <definition>constexpr quat_t&lt;N&gt; ls::math::nlerp</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;q1, const quat_t&lt; N &gt; &amp;q2, N percent)</argsstring>
        <name>nlerp</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
          <declname>q2</declname>
        </param>
        <param>
          <type>N</type>
          <declname>percent</declname>
        </param>
        <briefdescription>
<para>Linearly interpolate a quaternion towards another by some percentage and normalize the result. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q1</parametername>
</parameternamelist>
<parameterdescription>
<para>The quaternion to be interpolated.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q2</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference quaternion that q1 should interpolate to.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>percent</parametername>
</parameternamelist>
<parameterdescription>
<para>The percentage that q1 should move towards q2.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a normalized linear interpolation of q1 towards q2 by some percent. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1acae0974c8796eaff2b7eeab322ebf432" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt;</type>
        <definition>quat_t&lt;N&gt; ls::math::slerp</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;, const quat_t&lt; N &gt; &amp;, N)</argsstring>
        <name>slerp</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
        </param>
        <param>
          <type>N</type>
        </param>
        <briefdescription>
<para>SLERP Perform a spherical-interpolation of q1 towards q2 by some percentage. </para>        </briefdescription>
        <detaileddescription>
<para>This method has been adapted from Professor W. Randolph Franklin Rensselaer Polytechnic Institute: <ulink url="http://www.ecse.rpi.edu/Homepages/wrf/pmwiki/pmwiki.php">http://www.ecse.rpi.edu/Homepages/wrf/pmwiki/pmwiki.php</ulink> <ulink url="http://www.ecse.rpi.edu/~wrf/wiki/ComputerGraphicsFall2012/guha/Code/quaternionAnimation.cpp">http://www.ecse.rpi.edu/~wrf/wiki/ComputerGraphicsFall2012/guha/Code/quaternionAnimation.cpp</ulink></para><para>Request from the true author must be granted prior to use in commercial products.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q1</parametername>
</parameternamelist>
<parameterdescription>
<para>The quaternion to be interpolated.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q2</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference quaternion that q1 should interpolate to.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>percent</parametername>
</parameternamelist>
<parameterdescription>
<para>The percentage that q1 should move towards q2.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a spherical interpolation of q1 towards q2 by some percent. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a5469fe668823667ddba69ee3b76d4dcb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt;</type>
        <definition>quat_t&lt;N&gt; ls::math::lookAt</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;target, const vec3_t&lt; N &gt; &amp;dir)</argsstring>
        <name>lookAt</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quaternion LookAt</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>A vec3 type used to determine the orientation of the returned quaternion.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>A unit vector, giving the axis of rotation for the returned orientation. This should typically be vec3{0, 0, 1} to indicate that the returned quaternion should point its forwards axis in the Z-direction.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A quaternion, oriented in the direction of a target. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a00672f1f19b846adc71843ebb88af8c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; N &gt;</type>
        <definition>mat3_t&lt;N&gt; ls::math::quatToMat3</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;q)</argsstring>
        <name>quatToMat3</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>quatToMat3 Convert a quaternion into a 3x3 rotational matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a 3x3 rotation matrix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ac85f02097f048680888d3289fff22319" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt;</type>
        <definition>mat4_t&lt;N&gt; ls::math::quatToMat4</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;q)</argsstring>
        <name>quatToMat4</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>quatToMat4 Convert a quaternion into a 4x4 rotational matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a 4x4 rotation matrix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a437c24d26d32aa09f6ee9e63bff0d8aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt;</type>
        <definition>quat_t&lt;N&gt; ls::math::matToQuat</definition>
        <argsstring>(const mat3_t&lt; N &gt; &amp;m)</argsstring>
        <name>matToQuat</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>matToQuat Convert a 3x3 rotation matrix into a quaternion. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a quaternion that represents a 3x3 rotation matrix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a7e94560096b49768f47a88db0b7847c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt;</type>
        <definition>quat_t&lt;N&gt; ls::math::matToQuat</definition>
        <argsstring>(const mat4_t&lt; N &gt; &amp;m)</argsstring>
        <name>matToQuat</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref>&lt; N &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>matToQuat Convert a 4x4 rotation matrix into a quaternion. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a quaternion that represents a 4x4 rotation matrix. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a905b962f1dc04339ea463e331b4a2b76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt;</type>
        <definition>constexpr vec3_t&lt;N&gt; ls::math::getAxisX</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;q)</argsstring>
        <name>getAxisX</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>getAxisX Retrieve the &quot;x-axis&quot; of a quaternion. This is a short-circuited method of converting a quaternion into a rotation matrix, then extracting the axis of rotation along the x-axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the rotational x-axis of a quaternion in R^3 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a3445ce80e12d2170ddb7b27c846a513c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt;</type>
        <definition>constexpr vec3_t&lt;N&gt; ls::math::getAxisY</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;q)</argsstring>
        <name>getAxisY</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>getAxisY Retrieve the &quot;y-axis&quot; of a quaternion. This is a short-circuited method of converting a quaternion into a rotation matrix, then extracting the axis of rotation along the y-axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the rotational y-axis of a quaternion in R^3 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a5dfe884f23fd8fa876cfe595e6f88c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt;</type>
        <definition>constexpr vec3_t&lt;N&gt; ls::math::getAxisZ</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;q)</argsstring>
        <name>getAxisZ</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>getAxisZ Retrieve the &quot;z-axis&quot; of a quaternion. This is a short-circuited method of converting a quaternion into a rotation matrix, then extracting the axis of rotation along the z-axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the rotational z-axis of a quaternion in R^3 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a9b732fb46ccac5dd65042b9168f60901" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>N</type>
        <definition>N ls::math::getAngle</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;q)</argsstring>
        <name>getAngle</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>getAngle Retrieve the angle of rotation (i.e. the real-component) of a quaternion, in R^3. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The angle of rotation of a quaternion, clamped to be within 2*PI radians. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a431ad1011a98c9882093a22d660bd0bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt;</type>
        <definition>vec3_t&lt;N&gt; ls::math::toEuler</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;q)</argsstring>
        <name>toEuler</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>toEuler Convert a unit quaternion into 3 Euler angles, pitch, yaw, and roll. </para>        </briefdescription>
        <detaileddescription>
<para>q</para><para><simplesect kind="return"><para>a 3D vector which contains the pitch, yaw, and roll of a quaternion, respectively. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a84ce5704c7d1c60ca788d30c52d56c7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt;</type>
        <definition>quat_t&lt;N&gt; ls::math::fromEuler</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;pyr)</argsstring>
        <name>fromEuler</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>pyr</declname>
        </param>
        <briefdescription>
<para>fromEuler Convert three Euler angles into a rotational quaternion. These angles must be in the order of pitch, yaw, and roll, respectively. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pyr</parametername>
</parameternamelist>
<parameterdescription>
<para>A 3D vector containing the angles of pitch, yaw, and roll.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>q rotational quaternion representing the three input rotation angles. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a3711001dd85a84734cf0a7f78113073b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt;</type>
        <definition>quat_t&lt;N&gt; ls::math::fromEuler</definition>
        <argsstring>(N pitch, N yaw, N roll)</argsstring>
        <name>fromEuler</name>
        <param>
          <type>N</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type>N</type>
          <declname>yaw</declname>
        </param>
        <param>
          <type>N</type>
          <declname>roll</declname>
        </param>
        <briefdescription>
<para>fromEuler Convert three Euler angles into a rotational quaternion. These angles must be in the order of pitch, yaw, and roll, respectively. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pitch</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle of rotation along a point&apos;s X-Axis</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yaw</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle of rotation along a point&apos;s Y-Axis</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>roll</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle of rotation along a point&apos;s Z-Axis</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>q rotational quaternion representing the three input rotation angles. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a2558bf44c820f9cc3f062a1f2f9852ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void ls::math::toAxisAngle</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;q, vec3_t&lt; N &gt; &amp;outAaxis, N &amp;outAngle)</argsstring>
        <name>toAxisAngle</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>outAaxis</declname>
        </param>
        <param>
          <type>N &amp;</type>
          <declname>outAngle</declname>
        </param>
        <briefdescription>
<para>toAxisAngle Convert a rotational quaternion into Axis-Angle representation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>A rotational quaternion.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outAxis</parametername>
</parameternamelist>
<parameterdescription>
<para>A 3D vector which will represent the quaternion&apos;s axis of rotation in R^3.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>An angle, in radians, representing the quaternion&apos;s angle of rotation around a 3D axis in R^3. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1acbd2be0033525d0f0968cfe1de79ee57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt;</type>
        <definition>vec4_t&lt;N&gt; ls::math::toAxisAngle</definition>
        <argsstring>(const quat_t&lt; N &gt; &amp;q)</argsstring>
        <name>toAxisAngle</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>toAxisAngle Convert a rotational quaternion into Axis-Angle representation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>A rotational quaternion.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 4D vector, representing the quaternion&apos;s axis of rotation in R^3 and angle of rotation around the axis. The first 3 components are the converted X, Y, &amp; Z points along a unit sphere, the last component of this vector is the angle. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="346" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a9ab47b6296a0b125b1a542d26b62cb66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt;</type>
        <definition>quat_t&lt;N&gt; ls::math::fromAxisAngle</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;axis, N angle)</argsstring>
        <name>fromAxisAngle</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>N</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>fromAxisAngle Convert a 3D axis, plus angle of rotation, into a rotational quaternion. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>A 3D vector, representing an axis of rotation.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>An angle, in radians, which represents the amount of rotation around the input axis.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a rotational quaternion, converted from the input axis and angle. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aea5a34570aa789274f34d4e9578b7f4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref>&lt; N &gt;</type>
        <definition>quat_t&lt;N&gt; ls::math::fromAxisAngle</definition>
        <argsstring>(const vec4_t&lt; N &gt; &amp;axisAngle)</argsstring>
        <name>fromAxisAngle</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>axisAngle</declname>
        </param>
        <briefdescription>
<para>fromAxisAngle Convert a 4D axis-angle into a rotational quaternion. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axisAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>A 4D vector in Axis-Angle format. The first 3 components of this vector are the X, Y, &amp; Z components of the axis. The fourth component represents the angle.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a rotational quaternion, converted from the input axis-angle vector. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/quat_utils.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aea4e3be5781961c5be1a41fa37bbe380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>constexpr scalar_t</type>
        <definition>constexpr scalar_t ls::math::min</definition>
        <argsstring>(scalar_t a, scalar_t b)</argsstring>
        <name>min</name>
        <param>
          <type>scalar_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>scalar_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>max Get the minimum of two single numbers This function can be run at compile-time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The largest number of the two parameters a and b. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="29" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="11" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ab8a99fe5e2a0e6574532869762c5cdd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>constexpr scalar_t</type>
        <definition>constexpr scalar_t ls::math::mix</definition>
        <argsstring>(scalar_t a, scalar_t b, scalar_t percent)</argsstring>
        <name>mix</name>
        <param>
          <type>scalar_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>scalar_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>scalar_t</type>
          <declname>percent</declname>
        </param>
        <briefdescription>
<para>mix Perform a linear interpolation of x between the two scalars a, b </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The linear &quot;mix&quot; of a and b. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="40" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="19" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a4192eca3af1914523d86335792e9b18f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>constexpr scalar_t</type>
        <definition>constexpr scalar_t ls::math::max</definition>
        <argsstring>(scalar_t a, scalar_t b)</argsstring>
        <name>max</name>
        <param>
          <type>scalar_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>scalar_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>max Get the maximum of two single numbers. This function can be run at compile-time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The largest number of the two parameters a and b. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="54" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="27" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1abf1cce6e67b3f1f49c7ca2356d0e9b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>constexpr scalar_t</type>
        <definition>constexpr scalar_t ls::math::clamp</definition>
        <argsstring>(scalar_t n, scalar_t minVal, scalar_t maxVal)</argsstring>
        <name>clamp</name>
        <param>
          <type>scalar_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>scalar_t</type>
          <declname>minVal</declname>
        </param>
        <param>
          <type>scalar_t</type>
          <declname>maxVal</declname>
        </param>
        <briefdescription>
<para>clamp Bind a number to within a certain range. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>A number that should be constrained to be within a specific range.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minVal</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum allowable value that &apos;n&apos; can be.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxVal</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum allowable value that &apos;n&apos; can be.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a number, such that minVal &lt;= n &lt;= maxVal </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="72" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="35" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1afd86ffab248a6a7bf14a7fd43e6e4ab3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>scalar_t</type>
        <definition>scalar_t ls::math::smoothstep</definition>
        <argsstring>(scalar_t a, scalar_t b, scalar_t x)</argsstring>
        <name>smoothstep</name>
        <param>
          <type>scalar_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>scalar_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>scalar_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>smoothstep Perform a smooth interpolation of a number along the sub-sequence [a, b]. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>A number within the same sub-sequence that x lies on.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>A number within the same sub-sequence that x lies on.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The smooth linear interpolation of x in between the interval a and b. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="87" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="43" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a67469c1e77b2faf6d531d6882f910128" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>scalar_t</type>
        <definition>scalar_t ls::math::fastSqrt</definition>
        <argsstring>(scalar_t)</argsstring>
        <name>fastSqrt</name>
        <param>
          <type>scalar_t</type>
          <defname>input</defname>
        </param>
        <briefdescription>
<para>fastSqrt Perform a square root on a single number without using the standard library. This method uses IEEE floating point arithmetic. Use only if the input argument uses this format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>number whose square root should be obtained.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The square root of the input number. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="100" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a3a02969695aabf764ec62fe5dbfcad8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>float</type>
        <definition>float ls::math::fastSqrt&lt; float &gt;</definition>
        <argsstring>(float)</argsstring>
        <name>fastSqrt&lt; float &gt;</name>
        <param>
          <type>float</type>
          <defname>input</defname>
        </param>
        <briefdescription>
<para>fastSqrt Perform a square root on a single number without using the standard library. This method uses IEEE floating point arithmetic. Use only if the input argument uses this format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>number whose square root should be obtained.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The square root of the input number. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="113" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a46cf2cfe7ad5bb5fe6cf9fd9b3654aeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>scalar_t</type>
        <definition>scalar_t ls::math::fastInvSqrt</definition>
        <argsstring>(scalar_t)</argsstring>
        <name>fastInvSqrt</name>
        <param>
          <type>scalar_t</type>
          <defname>input</defname>
        </param>
        <briefdescription>
<para>fastInvSqrt Get the inverse square root of a number. This method uses IEEE floating point arithmetic. Use only if the input argument uses this format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>number whose square root should be obtained.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The inverse square root (1/sqrt(x)) of the input number. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="126" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ac1cf9a8a54aaa413cd1b6f412941317a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>float</type>
        <definition>float ls::math::fastInvSqrt&lt; float &gt;</definition>
        <argsstring>(float)</argsstring>
        <name>fastInvSqrt&lt; float &gt;</name>
        <param>
          <type>float</type>
          <defname>x</defname>
        </param>
        <briefdescription>
<para>fastInvSqrt Get the inverse square root of a number. This method uses IEEE floating point arithmetic. Use only if the input argument uses this format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>number whose square root should be obtained.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The inverse square root (1/sqrt(x)) of the input number. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="139" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="81" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a56fff92357f07d6ff7c4195bc28268a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>constexpr scalar_t</type>
        <definition>constexpr scalar_t ls::math::degToRad</definition>
        <argsstring>(scalar_t)</argsstring>
        <name>degToRad</name>
        <param>
          <type>scalar_t</type>
          <defname>input</defname>
        </param>
        <briefdescription>
<para>degToRad Convert a number from degrees to radians. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>value of an angle, in degrees.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of an angle, in radians. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="150" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ace830e1a8733ec9114f6a480e2105302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>constexpr scalar_t</type>
        <definition>constexpr scalar_t ls::math::radToDeg</definition>
        <argsstring>(scalar_t)</argsstring>
        <name>radToDeg</name>
        <param>
          <type>scalar_t</type>
          <defname>input</defname>
        </param>
        <briefdescription>
<para>radToDeg Convert a number from radians to degrees. This function can be run at compile-time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>value of an angle, in radians.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of an angle, in degrees. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="162" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aed5f0460c1ec16b98cc6fe5f7b95f980" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>scalar_t</type>
        <definition>scalar_t ls::math::fastLog2</definition>
        <argsstring>(scalar_t)</argsstring>
        <name>fastLog2</name>
        <param>
          <type>scalar_t</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>fastLog2 Calculate the log-base2 of a number </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>number</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the log-base2 of a number, using IEEE floating point arithmetic </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="173" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a046a1094b98c7a3aef409657e61c8a27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>float</type>
        <definition>float ls::math::fastLog2&lt; float &gt;</definition>
        <argsstring>(float)</argsstring>
        <name>fastLog2&lt; float &gt;</name>
        <param>
          <type>float</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>fastLog2 Calculate the log-base2 of a number </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>number</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the log-base2 of a number, using IEEE floating point arithmetic </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="184" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="133" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a227b0f8582b3b04967b83bb5d41667c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>scalar_t</type>
        <definition>scalar_t ls::math::fastLog</definition>
        <argsstring>(scalar_t)</argsstring>
        <name>fastLog</name>
        <param>
          <type>scalar_t</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>fastLog Calculate the log-base10 of a number </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>number</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the log-base10 of a number, using IEEE floating point arithmetic </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="195" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a3475715c99de7ce479670b4bc628b7b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>scalar_t</type>
        <definition>scalar_t ls::math::fastLogN</definition>
        <argsstring>(scalar_t baseN, scalar_t)</argsstring>
        <name>fastLogN</name>
        <param>
          <type>scalar_t</type>
          <declname>baseN</declname>
        </param>
        <param>
          <type>scalar_t</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>fastLogBase Calculate the log-base2 of a number </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>number</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the log-baseN of a number, using IEEE floating point arithmetic </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="206" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a19b3303e5f86c9c494409d0342d6d615" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned ls::math::nextPow2</definition>
        <argsstring>(unsigned)</argsstring>
        <name>nextPow2</name>
        <param>
          <type>unsigned</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>nextPow2 Find the next (greater) power of two that is closest to the value of a number </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>An</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned integral type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next greatest power of two. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="216" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="166" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a5a54d1c2c37905e6fc4f0856089d0d24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ls::math::nextPow2</definition>
        <argsstring>(int)</argsstring>
        <name>nextPow2</name>
        <param>
          <type>int</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>nextPow2 Find the next (greater) power of two that is closest to the value of a number </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>signed integral type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next greatest power of two. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="226" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a8544bf449814139baaf0fa0d8626c410" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned ls::math::prevPow2</definition>
        <argsstring>(unsigned)</argsstring>
        <name>prevPow2</name>
        <param>
          <type>unsigned</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>prevPow2 Find the previous (lesser) power of two that is closest to the value of a number </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>An</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned integral type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next lesser power of two. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="236" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="190" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a8a3074781c956be0ced7d37683a3fe30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ls::math::prevPow2</definition>
        <argsstring>(int)</argsstring>
        <name>prevPow2</name>
        <param>
          <type>int</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>prevPow2 Find the previous (lesser) power of two that is closest to the value of a number </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>signed integral type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next lesser power of two. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="246" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aec5ebc5a23e120fecfd7d06e33f45552" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned ls::math::nearPow2</definition>
        <argsstring>(unsigned)</argsstring>
        <name>nearPow2</name>
        <param>
          <type>unsigned</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>nearPow2 Find the closest power of two to a number. This may either be greater than or less than the input number. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>An</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned integral type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The closest power of two to a number. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="257" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="214" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a899c6ec929a422a73b6099e8c1663b64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ls::math::nearPow2</definition>
        <argsstring>(int)</argsstring>
        <name>nearPow2</name>
        <param>
          <type>int</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>nearPow2 Find the closest power of two to a number. This may either be greater than or less than the input number. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>signed integral type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The closest power of two to a number. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="268" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a442c3743a5a25ab4485a8c7f57d4ad5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool ls::math::isPow2</definition>
        <argsstring>(unsigned)</argsstring>
        <name>isPow2</name>
        <param>
          <type>unsigned</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>isPow2 Determine if a number is a power of two or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>number who&apos;s value should be evaluated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the number is a poiwer of two. False if the number is not a power of two. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="279" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="233" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a2c8506bd1c8ab177e6fc8b2c9bb38abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool ls::math::isPow2</definition>
        <argsstring>(int)</argsstring>
        <name>isPow2</name>
        <param>
          <type>int</type>
          <defname>n</defname>
        </param>
        <briefdescription>
<para>isPow2 Determine if a number is a power of two or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>number who&apos;s value should be evaluated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the number is a poiwer of two. False if the number is not a power of two. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="290" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="240" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a7bfe21b6b8a54ebf71d522434a9afb26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>constexpr scalar_t</type>
        <definition>constexpr scalar_t ls::math::factorial</definition>
        <argsstring>(scalar_t)</argsstring>
        <name>factorial</name>
        <param>
          <type>scalar_t</type>
          <defname>x</defname>
        </param>
        <briefdescription>
<para>factorial Retrieve the factorial of a number </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>number who&apos;s factorial is to be calculated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The factorial of a given number. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="301" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="248" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1afff8146b6aa65adf6821b0a4e6dc0abb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
          <param>
            <type>typename int_t</type>
          </param>
        </templateparamlist>
        <type>constexpr scalar_t</type>
        <definition>constexpr scalar_t ls::math::pow</definition>
        <argsstring>(scalar_t, int_t)</argsstring>
        <name>pow</name>
        <param>
          <type>scalar_t</type>
          <defname>x</defname>
        </param>
        <param>
          <type>int_t</type>
          <defname>y</defname>
        </param>
        <briefdescription>
<para>pow Evaluate a number to a given power. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>number who&apos;s power is to be evaluated.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>degree to which the first parameter&apos;s power should be evaluated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A number, raised to a given power. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="314" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="256" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a08374643b1c0a96ced76726ad83cf13f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>constexpr scalar_t</type>
        <definition>constexpr scalar_t ls::math::const_sin</definition>
        <argsstring>(scalar_t)</argsstring>
        <name>const_sin</name>
        <param>
          <type>scalar_t</type>
          <defname>x</defname>
        </param>
        <briefdescription>
<para>const_sin Evaluate the sine of an angle at compile-time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>An</parametername>
</parameternamelist>
<parameterdescription>
<para>angle, in radians, who&apos;s sine value is to be calculated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sine of a given angle. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="325" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="264" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a38e01af27a66591863a6afccbc425563" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>constexpr scalar_t</type>
        <definition>constexpr scalar_t ls::math::const_cos</definition>
        <argsstring>(scalar_t)</argsstring>
        <name>const_cos</name>
        <param>
          <type>scalar_t</type>
          <defname>x</defname>
        </param>
        <briefdescription>
<para>const_cos Evaluate the cosine of an angle at compile-time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>An</parametername>
</parameternamelist>
<parameterdescription>
<para>angle, in radians, who&apos;s cosine value is to be calculated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cosine of a given angle. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="336" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="276" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a029177b70fd97fd5487e0eb139ecea5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>constexpr scalar_t</type>
        <definition>constexpr scalar_t ls::math::const_tan</definition>
        <argsstring>(scalar_t)</argsstring>
        <name>const_tan</name>
        <param>
          <type>scalar_t</type>
          <defname>x</defname>
        </param>
        <briefdescription>
<para>const_tan Evaluate the tangent of an angle at compile-time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>An</parametername>
</parameternamelist>
<parameterdescription>
<para>angle, in radians, who&apos;s tangent value is to be calculated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The tangent of a given angle. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="347" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="288" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a08fadc7e3b02fe91e2e66dd645e60ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>constexpr scalar_t</type>
        <definition>constexpr scalar_t ls::math::sum</definition>
        <argsstring>(const scalar_t &amp;)</argsstring>
        <name>sum</name>
        <param>
          <type>const scalar_t &amp;</type>
          <defname>num</defname>
        </param>
        <briefdescription>
<para>sum Evaluate the sum of a series of numbers at compile-time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>set of numbers who&apos;s values are to be added together.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sum of a set of numbers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="358" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="300" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a30491147052e60a55c7fb3df244b097c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>scalars_t</declname>
            <defname>scalars_t</defname>
          </param>
        </templateparamlist>
        <type>constexpr scalar_t</type>
        <definition>constexpr scalar_t ls::math::sum</definition>
        <argsstring>(const scalar_t &amp;num, const scalars_t &amp;...nums)</argsstring>
        <name>sum</name>
        <param>
          <type>const scalar_t &amp;</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const scalars_t &amp;...</type>
          <declname>nums</declname>
        </param>
        <briefdescription>
<para>sum Evaluate the sum of a series of numbers at compile-time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>set of numbers who&apos;s values are to be added together.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sum of a set of numbers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="369" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="308" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a1794382885ad0a86c98f1647a1dffc62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
        </templateparamlist>
        <type>constexpr scalar_t</type>
        <definition>constexpr scalar_t ls::math::average</definition>
        <argsstring>()</argsstring>
        <name>average</name>
        <briefdescription>
<para>average Evaluate the average of a series of numbers at compile-time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>set of numbers who&apos;s values are to be averaged.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The average of a set of numbers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="380" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="316" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1af58992734fbcc7e50aa7111983add8f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename scalar_t</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>scalars_t</declname>
            <defname>scalars_t</defname>
          </param>
        </templateparamlist>
        <type>constexpr scalar_t</type>
        <definition>constexpr scalar_t ls::math::average</definition>
        <argsstring>(const scalar_t &amp;num, const scalars_t &amp;...nums)</argsstring>
        <name>average</name>
        <param>
          <type>const scalar_t &amp;</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const scalars_t &amp;...</type>
          <declname>nums</declname>
        </param>
        <briefdescription>
<para>average Evaluate the average of a series of numbers at compile-time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>set of numbers who&apos;s values are to be averaged.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The average of a set of numbers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/scalar_utils.h" line="391" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/math/generic/scalar_utils_impl.h" bodystart="324" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a4dcdfb3163289819cae38843f3532a58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(fixed_t, int32_t, 7)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>7</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/fixed.cpp" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aa50127e4a5ddaca323c207b02002964c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(fixed_t, int32_t, 15)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>15</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/fixed.cpp" line="12" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ab49a96861552962421cd17772393c704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(fixed_t, int32_t, 23)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>23</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/fixed.cpp" line="13" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a49ae443d697982906d298d08637fe148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(fixed_t, int64_t, 15)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>15</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/fixed.cpp" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ad4062a0001792c62012b1099fd929a02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(fixed_t, int64_t, 31)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>31</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/fixed.cpp" line="16" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ab4b98df3f673b187fcfd6879314a1c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(fixed_t, int64_t, 47)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>47</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/fixed.cpp" line="17" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a4f48a5327b13819dac5840805ae835b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(fixed_t, uint32_t, 8)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>8</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/fixed.cpp" line="19" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aedbe57e21866a2405e9d01c8dea279d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(fixed_t, uint32_t, 16)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>16</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/fixed.cpp" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aefcc2b98267cdc5c24e8a79b59f15be8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(fixed_t, uint32_t, 24)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>24</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/fixed.cpp" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a1aca154c65ccc6dae751628fb85e0647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(fixed_t, uint64_t, 16)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>16</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/fixed.cpp" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a140a64e1deea55b3e4cc7af0698a70ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(fixed_t, uint64_t, 32)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/fixed.cpp" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ae34013b4eede65af6e82605380448dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(fixed_t, uint64_t, 48)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1fixed__t" kindref="compound">fixed_t</ref></type>
        </param>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>48</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/fixed.cpp" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a153b4777b0ed211eedecf8a9a78141cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(mat2_t, float)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/mat2.cpp" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a65f5763ed23f830d5c7753ba6baafb83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(mat2_t, double)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/mat2.cpp" line="12" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aa50003e159ef843d8500ab48ba42ffec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(mat2_t, int)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/mat2.cpp" line="13" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a7d263a762d6d43eae2cf052929552d5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(mat2_t, unsigned)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref></type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/mat2.cpp" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aec340dbdefe5bf6ac5efda5c1ac74476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(mat2_t, medp_t)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1mat2__t" kindref="compound">mat2_t</ref></type>
        </param>
        <param>
          <type>medp_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/mat2.cpp" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1abe05429cee7ceef58adf83552f1a9184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(mat3_t, float)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/mat3.cpp" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a54de308f9a1a89fd96b7a7f32a33a71b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(mat3_t, double)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/mat3.cpp" line="12" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a820c1cd676832a3470c46bdf6d151dde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(mat3_t, int)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/mat3.cpp" line="13" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aff222541dbeef317fc6286301ea4167b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(mat3_t, unsigned)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref></type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/mat3.cpp" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a8b9447c6a4a8cbfa5367abb1f06cb8f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(mat3_t, medp_t)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1mat3__t" kindref="compound">mat3_t</ref></type>
        </param>
        <param>
          <type>medp_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/mat3.cpp" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ab92a20f84bf63cbd2dd0eb1e15e1f45d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(mat4_t, float)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/mat4.cpp" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ab6ca3b9f32cbd9b7796ea6668364298f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(mat4_t, double)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/mat4.cpp" line="12" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aa715e0ae5665ec5a4214513a4b9c5738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(mat4_t, int)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/mat4.cpp" line="13" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a92639cce385d7f0c61c8c04ac5af7065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(mat4_t, unsigned)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref></type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/mat4.cpp" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aaa5ea3c32f61eb7b64069671d1c038f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(mat4_t, medp_t)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1mat4__t" kindref="compound">mat4_t</ref></type>
        </param>
        <param>
          <type>medp_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/mat4.cpp" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a77b4ac35b6494e49811dabb7932a7f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(perlinNoise_t, float)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1perlin_noise__t" kindref="compound">perlinNoise_t</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/perlinNoise.cpp" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a25eff3e433487b81fe5004e1142c7ebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(perlinNoise_t, double)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1perlin_noise__t" kindref="compound">perlinNoise_t</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/perlinNoise.cpp" line="12" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a13f00cb6401fa7097b0d75485935439b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(perlinNoise_t, int)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1perlin_noise__t" kindref="compound">perlinNoise_t</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/perlinNoise.cpp" line="13" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a47b45bd2310f163c56b927da7d3f126a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(perlinNoise_t, unsigned)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1perlin_noise__t" kindref="compound">perlinNoise_t</ref></type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/perlinNoise.cpp" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a03caf3e64df73c9d4207bb4a75f8b103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(perlinNoise_t, medp_t)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="classls_1_1math_1_1perlin_noise__t" kindref="compound">perlinNoise_t</ref></type>
        </param>
        <param>
          <type>medp_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/perlinNoise.cpp" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ae4548260ce140273e63759020fafb7da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(quat_t, float)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/quat.cpp" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ae0195dce6e2a223bf47459636c2a5876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(quat_t, double)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/quat.cpp" line="12" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ab556021f4de4c6ff1274a40ff8b5ecb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(quat_t, int)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/quat.cpp" line="13" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a6fb53fb4e5dc4b9faf045c8dfe9ffc4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(quat_t, unsigned)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref></type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/quat.cpp" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1af1fc0799e24698750465e2cbaf39bad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(quat_t, medp_t)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1quat__t" kindref="compound">quat_t</ref></type>
        </param>
        <param>
          <type>medp_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/quat.cpp" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a1b66973e44fc264b35d8a0ddf13cc924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(vec2_t, float)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/vec2.cpp" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ab391d3e28023e55b4fdaa642cc1839f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(vec2_t, double)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/vec2.cpp" line="12" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a413b483a8ab12c1b085d2d70a70dca29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(vec2_t, int)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/vec2.cpp" line="13" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a892117c575911571cab23446e8013834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(vec2_t, unsigned)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref></type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/vec2.cpp" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ac374f2ef9e139195770ca9ee752f7ac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(vec2_t, medp_t)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref></type>
        </param>
        <param>
          <type>medp_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/vec2.cpp" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a593164a3cd147b469bebb749393bd217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(vec3_t, float)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/vec3.cpp" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ad5e3328c58bdb4295b77efedd33ce315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(vec3_t, double)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/vec3.cpp" line="12" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aa0cb7f452cc4b7f4d7c016eafb1c9105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(vec3_t, int)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/vec3.cpp" line="13" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aa61b6ceb9cccec44c8d6fe7ab1519e57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(vec3_t, unsigned)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref></type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/vec3.cpp" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ab73f825e9fb29966829cf3e5e1b21f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(vec3_t, medp_t)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref></type>
        </param>
        <param>
          <type>medp_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/vec3.cpp" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aef5e9cffe6bd78cd2d39a8bb823c67a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(vec4_t, float)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/vec4.cpp" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a2743dc4cd120edbbc9f07cbf63ebcb40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(vec4_t, double)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/vec4.cpp" line="12" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ac26932c9f395fb658f19f91cf61c70f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(vec4_t, int)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/vec4.cpp" line="13" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a59df6dbe8e2cd75e1247f88f85d9ba6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(vec4_t, unsigned)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref></type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/vec4.cpp" line="14" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1accf415b217c21c048510b72ecfcf94eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DEFINE_CLASS_TYPE</definition>
        <argsstring>(vec4_t, medp_t)</argsstring>
        <name>LS_DEFINE_CLASS_TYPE</name>
        <param>
          <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref></type>
        </param>
        <param>
          <type>medp_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/src/vec4.cpp" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a77a964656ef10d4d032ea75bcedd8a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec2f, vec2_t, float)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec2f</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec2.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a45228c75b6441ad639454014f9d6efaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec2d, vec2_t, double)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec2d</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec2.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a4a04033c5b3551b9e267df1de5791350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec2i, vec2_t, int)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec2i</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec2.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a3a7153b58aa3b38b300573fefaefaf45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec2ui, vec2_t, unsigned)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec2ui</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref></type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec2.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a962ba4151622c93c7680fcc82829a69e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec2x, vec2_t, medp_t)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec2x</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref></type>
        </param>
        <param>
          <type>medp_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec2.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a4ce4f8e11002fead4c4721a8a2ebd216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec2, vec2_t, LS_FLOAT)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec2</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref></type>
        </param>
        <param>
          <type><ref refid="types_8h_1a1de3e68b2908f81eccc6071840788580" kindref="member">LS_FLOAT</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec2.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1afa4aaa162dbf18f80eae76c369c63d43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec3f, vec3_t, float)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec3f</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec3.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a5df5701f2dc869da41dd56edf3d5531d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec3d, vec3_t, double)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec3d</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec3.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a25b2056131e85ff4bf1b88d0d2e44ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec3i, vec3_t, int)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec3i</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec3.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a64aa1f1750cf04c7b282f77288fad2f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec3ui, vec3_t, unsigned)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec3ui</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref></type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec3.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a0da9d225e191cb2598933856a87820cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec3x, vec3_t, medp_t)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec3x</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref></type>
        </param>
        <param>
          <type>medp_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec3.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ac0d865c1f2db46f7c59b8af75d12347d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec3, vec3_t, LS_FLOAT)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec3</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref></type>
        </param>
        <param>
          <type><ref refid="types_8h_1a1de3e68b2908f81eccc6071840788580" kindref="member">LS_FLOAT</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec3.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a44f804c4cefca1c763b7a706ee32694c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec4f, vec4_t, float)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec4f</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref></type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec4.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ad44cf7b187753ffbe1bb51ca96fef74d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec4d, vec4_t, double)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec4d</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec4.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ad2222191be60ceb80ad0a4f564cd1b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec4i, vec4_t, int)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec4i</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec4.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1af2377429b7ddd129246dfbaef2b598b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec4ui, vec4_t, unsigned)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec4ui</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref></type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec4.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a22ddd35a05666ff823f3f17188d3ebff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec4x, vec4_t, medp_t)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec4x</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref></type>
        </param>
        <param>
          <type>medp_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec4.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a886a93f4327abd5ea1775dcf68ceaa7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::math::LS_DECLARE_CLASS_TYPE</definition>
        <argsstring>(vec4, vec4_t, LS_FLOAT)</argsstring>
        <name>LS_DECLARE_CLASS_TYPE</name>
        <param>
          <type>vec4</type>
        </param>
        <param>
          <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref></type>
        </param>
        <param>
          <type><ref refid="types_8h_1a1de3e68b2908f81eccc6071840788580" kindref="member">LS_FLOAT</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec4.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a1748d0c504e5e30ccbb771626518a85d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr N</type>
        <definition>constexpr N ls::math::dot</definition>
        <argsstring>(const vec2_t&lt; N &gt; &amp;v1, const vec2_t&lt; N &gt; &amp;v2)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>dot Retrieve the dot product of a 2D vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the 2D dot product of v1 &amp; v2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ad46f8c00939c1c172ab071508e0930a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr N</type>
        <definition>constexpr N ls::math::cross</definition>
        <argsstring>(const vec2_t&lt; N &gt; &amp;v1, const vec2_t&lt; N &gt; &amp;v2)</argsstring>
        <name>cross</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>cross Retrieve the cross product of two 2D vectors. This method was developed my Allen Chou: <ulink url="http://allenchou.net/2013/07/cross-product-of-2d-vectors/">http://allenchou.net/2013/07/cross-product-of-2d-vectors/</ulink> This is useful in determining if the second vector is on the left or right side of the first. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a scalar which can determine if v2 is on the left or right side of v1. If the returned value is positive, v2 is on the left of v1, if it&apos;s negative, v2 is on the right of v1. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ae12d116badb9e66963a9b35a9d7e0d92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt;</type>
        <definition>vec2_t&lt;N&gt; ls::math::normalize</definition>
        <argsstring>(const vec2_t&lt; N &gt; &amp;v)</argsstring>
        <name>normalize</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>normalize Normalize the vector v so that its points lie within a unit-sphere. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a normalized 2D vector. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a6e5516caa78c1345dd952c2c4fec52e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr N</type>
        <definition>constexpr N ls::math::lengthSquared</definition>
        <argsstring>(const vec2_t&lt; N &gt; &amp;v)</argsstring>
        <name>lengthSquared</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>lengthSquared Retrieve the square of the length/magnitude of a 2D vector. This is faster than calling <ref refid="namespacels_1_1math_1a995772d187197b7389b2ee7f6064e66d" kindref="member">length()</ref> as no square roots are performed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D vector.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The square of the length/magnitude of a 2D vector. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a707052eb0a456ecf99f3af884171e468" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>N</type>
        <definition>N ls::math::length</definition>
        <argsstring>(const vec2_t&lt; N &gt; &amp;v)</argsstring>
        <name>length</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>length Retrieve the length/magnitude of a 2D vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D vector.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length/magnitude of a 2D vector. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aedf91e18143c605ccc0915b9dcf69e1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt;</type>
        <definition>vec2_t&lt;N&gt; ls::math::rotate</definition>
        <argsstring>(const vec2_t&lt; N &gt; &amp;v, N angle)</argsstring>
        <name>rotate</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>N</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>rotate Rotate a 2D vector by a number of radians. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D vector that is to be rotated.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of radians that a 2D vector is to be rotated by.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A rotated 2D vector. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a31c2e9287fde45b15f056f5841cf8f3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>N</type>
        <definition>N ls::math::angleBetween</definition>
        <argsstring>(const vec2_t&lt; N &gt; &amp;v1, const vec2_t&lt; N &gt; &amp;v2)</argsstring>
        <name>angleBetween</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>angleBetween Determine the angle, in radians of two 2D vectors placed around the origin of the Cartesian coordinate plane. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of radians in between v1 &amp; v2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a39095b63ec47ca5061b30afebfd809bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>N</type>
        <definition>N ls::math::angleBetween</definition>
        <argsstring>(const vec2_t&lt; N &gt; &amp;v1, const vec2_t&lt; N &gt; &amp;v2, const vec2_t&lt; N &gt; &amp;origin)</argsstring>
        <name>angleBetween</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>origin</declname>
        </param>
        <briefdescription>
<para>angleBetween Determine the angle, in radians of two points in 2D space, with a specified origin. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>The point in 2D space that two points use as their origin.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of radians in between v1 &amp; v2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a23ee4486a9df8cfe0d998d5ec1e8ffcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt;</type>
        <definition>constexpr vec2_t&lt;N&gt; ls::math::min</definition>
        <argsstring>(const vec2_t&lt; N &gt; &amp;v1, const vec2_t&lt; N &gt; &amp;v2)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>min Determine which of two vectors has the smallest length/magnitude. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector, either v1 or v2, which has the smallest length/magnitude. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a5351f56ece1b5ecaf8d7baf25e975d78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt;</type>
        <definition>constexpr vec2_t&lt;N&gt; ls::math::mix</definition>
        <argsstring>(const vec2_t&lt; N &gt; &amp;v1, const vec2_t&lt; N &gt; &amp;v2, N percent)</argsstring>
        <name>mix</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>N</type>
          <declname>percent</declname>
        </param>
        <briefdescription>
<para>mix Retrieve the linear interpolation of one vector towards another, moved by a certain percentage. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>percent</parametername>
</parameternamelist>
<parameterdescription>
<para>The percentage (clamped from [0, 1]) to which v2 should be interpolated towards v2.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector, either v1 or v2, which has the smallest length/magnitude. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a072c384e2c04498d4d2b94a8b40ade38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt;</type>
        <definition>constexpr vec2_t&lt;N&gt; ls::math::max</definition>
        <argsstring>(const vec2_t&lt; N &gt; &amp;v1, const vec2_t&lt; N &gt; &amp;v2)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>max Determine which of two vectors has the largest length/magnitude. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector, either v1 or v2, which has the greatest length/magnitude. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ac7dd000ced8544929b62701a1232f242" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt;</type>
        <definition>vec2_t&lt;N&gt; ls::math::project</definition>
        <argsstring>(const vec2_t&lt; N &gt; &amp;v1, const vec2_t&lt; N &gt; &amp;v2)</argsstring>
        <name>project</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>project Project one vector onto another and retrieve the result. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector projection of v1 onto v2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1af587908de47f293e9858dfe02ac46226" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt;</type>
        <definition>vec2_t&lt;N&gt; ls::math::reflect</definition>
        <argsstring>(const vec2_t&lt; N &gt; &amp;v, const vec2_t&lt; N &gt; &amp;norm)</argsstring>
        <name>reflect</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>norm</declname>
        </param>
        <briefdescription>
<para>reflect Reflect a vector v around a normal vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>norm</parametername>
</parameternamelist>
<parameterdescription>
<para>The normal vector from which v will be reflected.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The reflection of v around the normal vector &apos;norm&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1abf57732e558dd7df2d19c561fe42a589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt;</type>
        <definition>constexpr vec2_t&lt;N&gt; ls::math::mid</definition>
        <argsstring>(const vec2_t&lt; N &gt; &amp;v1, const vec2_t&lt; N &gt; &amp;v2)</argsstring>
        <name>mid</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec2__t" kindref="compound">vec2_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>mid </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the midpoint between v1 and v2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ae3fb055311e7fc092118db97d941a350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr N</type>
        <definition>constexpr N ls::math::dot</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;v1, const vec3_t&lt; N &gt; &amp;v2)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>dot Retrieve the dot product of a 3D vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the 3D dot product of v1 &amp; v2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ad99072901f038de424802a98b1377739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt;</type>
        <definition>constexpr vec3_t&lt;N&gt; ls::math::cross</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;v1, const vec3_t&lt; N &gt; &amp;v2)</argsstring>
        <name>cross</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>cross Retrieve the cross product of two 3D vectors. This result is perpendicular to the two input vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 3D vector which represents the axis of rotation of two 3D vectors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a995606b7d2a8381c894dc6156ffd4a41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt;</type>
        <definition>vec3_t&lt;N&gt; ls::math::normalize</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;v)</argsstring>
        <name>normalize</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>normalize Normalize the vector v so that its points lie within a unit-sphere. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a normalized 4D vector. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a3ea9cba91d7fd401001b8f1959f19910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr N</type>
        <definition>constexpr N ls::math::lengthSquared</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;v)</argsstring>
        <name>lengthSquared</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>lengthSquared Retrieve the square of the length/magnitude of a 3D vector. This is faster than calling <ref refid="namespacels_1_1math_1a995772d187197b7389b2ee7f6064e66d" kindref="member">length()</ref> as no square roots are performed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A 3D vector.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The square of the length/magnitude of a 3D vector. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a08c1a53bfe6769c3c2558a3ef6260388" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>N</type>
        <definition>N ls::math::length</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;v)</argsstring>
        <name>length</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>length Retrieve the length/magnitude of a 3D vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A 3D vector.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length/magnitude of a 3D vector. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a3cc1243d150c4c575f7d170b825b8a6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt;</type>
        <definition>vec3_t&lt;N&gt; ls::math::xRotation</definition>
        <argsstring>(N angle)</argsstring>
        <name>xRotation</name>
        <param>
          <type>N</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>xRotation Retrieve a unit vector that has been rotated around the cartesian X-Axis by a certain number of radians. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of radians that a 3D vector is to be rotated by.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 3D vector rotated by &apos;angle&apos; radians around the cartesian X-Axis. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1af62ad5c4d11e9bf4f9863767ec681fc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt;</type>
        <definition>vec3_t&lt;N&gt; ls::math::yRotation</definition>
        <argsstring>(N angle)</argsstring>
        <name>yRotation</name>
        <param>
          <type>N</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>xRotation Retrieve a unit vector that has been rotated around the cartesian Y-Axis by a certain number of radians. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of radians that a 3D vector is to be rotated by.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 3D vector rotated by &apos;angle&apos; radians around the cartesian Y-Axis. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a0b98acf8951a4c585370a16ead5dda6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt;</type>
        <definition>vec3_t&lt;N&gt; ls::math::zRotation</definition>
        <argsstring>(N angle)</argsstring>
        <name>zRotation</name>
        <param>
          <type>N</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>xRotation Retrieve a unit vector that has been rotated around the cartesian Z-Axis by a certain number of radians. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of radians that a 3D vector is to be rotated by.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 3D vector rotated by &apos;angle&apos; radians around the cartesian Z-Axis. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a49562250b5eed5d6e80acd2342ea9823" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>N</type>
        <definition>N ls::math::angleBetween</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;v1, const vec3_t&lt; N &gt; &amp;v2)</argsstring>
        <name>angleBetween</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>angleBetween Determine the angle, in radians of two 3D vectors placed around the origin of the Cartesian coordinate plane. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of radians in between v1 &amp; v2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a91c4e119f020e81b8043a6cbac6e4e9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>N</type>
        <definition>N ls::math::angleBetween</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;v1, const vec3_t&lt; N &gt; &amp;v2, const vec3_t&lt; N &gt; &amp;origin)</argsstring>
        <name>angleBetween</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>origin</declname>
        </param>
        <briefdescription>
<para>angleBetween Determine the angle, in radians of two points in 3D space, with a specified origin. </para>        </briefdescription>
        <detaileddescription>
<para>angleBetween Determine the angle, in radians of two points in 4D space, with a specified origin.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>The point in 3D space that two points use as their origin.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of radians in between v1 &amp; v2.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>The point in 4D space that two points use as their origin.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of radians in between v1 &amp; v2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1ab92a5a39d2ad09c85c3b5336e4378ea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt;</type>
        <definition>constexpr vec3_t&lt;N&gt; ls::math::min</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;, const vec3_t&lt; N &gt; &amp;)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
        </param>
        <briefdescription>
<para>min Determine which of two vectors has the smallest length/magnitude. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector, either v1 or v2, which has the smallest length/magnitude. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="375" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a3d23c85ac2c8b964f0256a72bdbb9020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt;</type>
        <definition>constexpr vec3_t&lt;N&gt; ls::math::mix</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;, const vec3_t&lt; N &gt; &amp;, N)</argsstring>
        <name>mix</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
        </param>
        <param>
          <type>N</type>
        </param>
        <briefdescription>
<para>mix Retrieve the linear interpolation of one vector towards another, moved by a certain percentage. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>percent</parametername>
</parameternamelist>
<parameterdescription>
<para>The percentage (clamped from [0, 1]) to which v2 should be interpolated towards v2.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector, either v1 or v2, which has the smallest length/magnitude. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a84e1ecfc26d27748318793421e6ba26a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt;</type>
        <definition>constexpr vec3_t&lt;N&gt; ls::math::max</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;, const vec3_t&lt; N &gt; &amp;)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
        </param>
        <briefdescription>
<para>max Determine which of two vectors has the largest length/magnitude. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector, either v1 or v2, which has the greatest length/magnitude. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a7a553c0406d48af4204c01b5e8c9b11b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt;</type>
        <definition>vec3_t&lt;N&gt; ls::math::project</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;v1, const vec3_t&lt; N &gt; &amp;v2)</argsstring>
        <name>project</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>project Project one vector onto another and retrieve the result. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector projection of v1 onto v2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="421" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a2245b3c6ac6744ef2cd7ad5b14cc8757" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt;</type>
        <definition>vec3_t&lt;N&gt; ls::math::reflect</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;v1, const vec3_t&lt; N &gt; &amp;norm)</argsstring>
        <name>reflect</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>norm</declname>
        </param>
        <briefdescription>
<para>reflect Reflect a vector v around a normal vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>norm</parametername>
</parameternamelist>
<parameterdescription>
<para>The normal vector from which v will be reflected.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The reflection of v around the normal vector &apos;norm&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="436" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a92fda3a9148cbf2677347d0631518dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt;</type>
        <definition>constexpr vec3_t&lt;N&gt; ls::math::mid</definition>
        <argsstring>(const vec3_t&lt; N &gt; &amp;v1, const vec3_t&lt; N &gt; &amp;v2)</argsstring>
        <name>mid</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec3__t" kindref="compound">vec3_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>mid </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the midpoint between v1 and v2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a2c8b05e458851994c995f836e97a822f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr N</type>
        <definition>constexpr N ls::math::dot</definition>
        <argsstring>(const vec4_t&lt; N &gt; &amp;, const vec4_t&lt; N &gt; &amp;v)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>dot Retrieve the dot product of two 4D vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the 4D dot product of v1 &amp; v2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="464" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aec397961dc18f2bb9cfea6468039f3ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt;</type>
        <definition>vec4_t&lt;N&gt; ls::math::normalize</definition>
        <argsstring>(const vec4_t&lt; N &gt; &amp;v)</argsstring>
        <name>normalize</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>normalize Normalize the vector v so that its points lie within a unit-sphere. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a normalized 4D vector. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a3db072410923ce4546164e362126807c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr N</type>
        <definition>constexpr N ls::math::lengthSquared</definition>
        <argsstring>(const vec4_t&lt; N &gt; &amp;v)</argsstring>
        <name>lengthSquared</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>lengthSquared Retrieve the square of the length/magnitude of a 4D vector. This is faster than calling <ref refid="namespacels_1_1math_1a995772d187197b7389b2ee7f6064e66d" kindref="member">length()</ref> as no square roots are performed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A 4D vector.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The square of the length/magnitude of a 4D vector. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="488" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aaa7ec5bfa68f10674707bf1987a43fd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>N</type>
        <definition>N ls::math::length</definition>
        <argsstring>(const vec4_t&lt; N &gt; &amp;v)</argsstring>
        <name>length</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>length Retrieve the length/magnitude of a 4D vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>A 4D vector.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length/magnitude of a 4D vector. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="500" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1aa27ef5fb309fabe3b6950885dd6dae9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>N</type>
        <definition>N ls::math::angleBetween</definition>
        <argsstring>(const vec4_t&lt; N &gt; &amp;v1, const vec4_t&lt; N &gt; &amp;v2)</argsstring>
        <name>angleBetween</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>angleBetween Determine the angle, in radians of two 4D vectors placed around the origin of the Cartesian coordinate plane. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of radians in between v1 &amp; v2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="514" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a15174fda67bc984adc37c19f0dfb7d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt;</type>
        <definition>constexpr vec4_t&lt;N&gt; ls::math::min</definition>
        <argsstring>(const vec4_t&lt; N &gt; &amp;v1, const vec4_t&lt; N &gt; &amp;v2)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>min Determine which of two vectors has the smallest length/magnitude. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector, either v1 or v2, which has the smallest length/magnitude. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="545" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a3d7b88513b09bee1d01b2f6251c84d21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt;</type>
        <definition>constexpr vec4_t&lt;N&gt; ls::math::mix</definition>
        <argsstring>(const vec4_t&lt; N &gt; &amp;v1, const vec4_t&lt; N &gt; &amp;v2, N percent)</argsstring>
        <name>mix</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>N</type>
          <declname>percent</declname>
        </param>
        <briefdescription>
<para>mix Retrieve the linear interpolation of one vector towards another, moved by a certain percentage. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>percent</parametername>
</parameternamelist>
<parameterdescription>
<para>The percentage (clamped from [0, 1]) to which v2 should be interpolated towards v2.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector, either v1 or v2, which has the smallest length/magnitude. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="564" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a8607e271fcc2e160f8e2f1bc8a7f3e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt;</type>
        <definition>constexpr vec4_t&lt;N&gt; ls::math::max</definition>
        <argsstring>(const vec4_t&lt; N &gt; &amp;v1, const vec4_t&lt; N &gt; &amp;v2)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>max Determine which of two vectors has the largest length/magnitude. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector, either v1 or v2, which has the greatest length/magnitude. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a7e701dc70f73ae12926c40f9d262b897" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt;</type>
        <definition>vec4_t&lt;N&gt; ls::math::project</definition>
        <argsstring>(const vec4_t&lt; N &gt; &amp;v1, const vec4_t&lt; N &gt; &amp;v2)</argsstring>
        <name>project</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>project Project one vector onto another and retrieve the result. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector projection of v1 onto v2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="591" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a1f327f28a35365b40f672311444e6455" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt;</type>
        <definition>vec4_t&lt;N&gt; ls::math::reflect</definition>
        <argsstring>(const vec4_t&lt; N &gt; &amp;v1, const vec4_t&lt; N &gt; &amp;norm)</argsstring>
        <name>reflect</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>norm</declname>
        </param>
        <briefdescription>
<para>reflect Reflect a vector v around a normal vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>norm</parametername>
</parameternamelist>
<parameterdescription>
<para>The normal vector from which v will be reflected.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The reflection of v around the normal vector &apos;norm&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="606" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacels_1_1math_1a424b1fce0bd05bf3d0eb640914abb351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt;</type>
        <definition>constexpr vec4_t&lt;N&gt; ls::math::mid</definition>
        <argsstring>(const vec4_t&lt; N &gt; &amp;v1, const vec4_t&lt; N &gt; &amp;v2)</argsstring>
        <name>mid</name>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="structls_1_1math_1_1vec4__t" kindref="compound">vec4_t</ref>&lt; N &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>mid </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the midpoint between v1 and v2. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/vec_utils.h" line="618" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/miles/C++/projects/LightSky/lightsky/math/fixed.h" line="13" column="1"/>
  </compounddef>
</doxygen>
