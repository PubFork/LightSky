<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="classls_1_1draw_1_1framebuffer" kind="class" prot="public" final="yes">
    <compoundname>ls::draw::framebuffer</compoundname>
    <includes refid="framebuffer_8h" local="no">framebuffer.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classls_1_1draw_1_1framebuffer_1a81b0dca545db9fac7e8504fd40a8bda7" prot="private" static="no" mutable="no">
        <type><ref refid="namespacels_1_1draw_1ac7363f051b664b0260e33db4b23a5e14" kindref="member">fbo_access_t</ref></type>
        <definition>fbo_access_t ls::draw::framebuffer::access</definition>
        <argsstring></argsstring>
        <name>access</name>
        <initializer>= <ref refid="namespacels_1_1draw_1ac7363f051b664b0260e33db4b23a5e14a4c3db294993509eff6583b406a91bdcd" kindref="member">FBO_ACCESS_RW</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access determines if a framebuffer should be rendered to, read from, or both. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="151" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classls_1_1draw_1_1framebuffer_1a94b0aaba9b059ccfbccfa34fa69e0eb7" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned ls::draw::framebuffer::fboId</definition>
        <argsstring></argsstring>
        <name>fboId</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>fboID is a GPU-assigned handle to a framebuffer object within OpenGL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="157" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a79229d0b13b5499536bbacc6a9ed243d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ls::draw::framebuffer::getMaxNumAttachments</definition>
        <argsstring>()</argsstring>
        <name>getMaxNumAttachments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the maximum number of supported color attachments from the current render context. OpenGL requires at least 8 attachments are supported.</para><para><simplesect kind="return"><para>A signed integral type representing the number of currently supported render targets. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="118" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/framebuffer_impl.h" bodystart="29" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1ad18e1d14bd856836bd7ca7586c45fc14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::framebuffer::printStatus</definition>
        <argsstring>(const framebuffer &amp;fbo)</argsstring>
        <name>printStatus</name>
        <param>
          <type>const <ref refid="classls_1_1draw_1_1framebuffer" kindref="compound">framebuffer</ref> &amp;</type>
          <declname>fbo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Error code handling for framebuffer creation. The input FBO must be bound/active in order to report properly.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fbo</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to the active framebuffer object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="127" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/framebuffer.cpp" bodystart="17" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a3bc9dfc6837cd463f249dd6ffad257d4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacels_1_1draw_1ae3c629d4581997d80d132774612d1512" kindref="member">fbo_status_t</ref></type>
        <definition>fbo_status_t ls::draw::framebuffer::getStatus</definition>
        <argsstring>(const framebuffer &amp;fbo)</argsstring>
        <name>getStatus</name>
        <param>
          <type>const <ref refid="classls_1_1draw_1_1framebuffer" kindref="compound">framebuffer</ref> &amp;</type>
          <declname>fbo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the completion status of a framebuffer based on the currently used fbo_status_t.</para><para>An FBO must be bound/active in order to report properly.</para><para><simplesect kind="return"><para>framebuffer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="137" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/framebuffer_impl.h" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a23ef1af5e8bf19960e2e12bba3e5886d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::framebuffer::bindDefaultFramebuffer</definition>
        <argsstring>(fbo_access_t access=FBO_ACCESS_RW)</argsstring>
        <name>bindDefaultFramebuffer</name>
        <param>
          <type><ref refid="namespacels_1_1draw_1ac7363f051b664b0260e33db4b23a5e14" kindref="member">fbo_access_t</ref></type>
          <declname>access</declname>
          <defval><ref refid="namespacels_1_1draw_1ac7363f051b664b0260e33db4b23a5e14a4c3db294993509eff6583b406a91bdcd" kindref="member">FBO_ACCESS_RW</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bind the default read/write buffer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fbo_access_t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="144" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/framebuffer_impl.h" bodystart="46" bodyend="48"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a23e6a63dc3d99ec4f8206352f96b9263" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::draw::framebuffer::framebuffer</definition>
        <argsstring>()</argsstring>
        <name>framebuffer</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Initializes all values within *this to their default values. This does not initialize a framebuffer on the GPU. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="166" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/framebuffer.cpp" bodystart="74" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a6e620c48c2f9faf4b8af822b734f3fff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::draw::framebuffer::framebuffer</definition>
        <argsstring>(const framebuffer &amp;)=delete</argsstring>
        <name>framebuffer</name>
        <param>
          <type>const <ref refid="classls_1_1draw_1_1framebuffer" kindref="compound">framebuffer</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy Constructor - DELETED. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a49deac79c790bda7afea13a381126139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::draw::framebuffer::framebuffer</definition>
        <argsstring>(framebuffer &amp;&amp;fbo)</argsstring>
        <name>framebuffer</name>
        <param>
          <type><ref refid="classls_1_1draw_1_1framebuffer" kindref="compound">framebuffer</ref> &amp;&amp;</type>
          <declname>fbo</declname>
        </param>
        <briefdescription>
<para>Move Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Moves all data from the input parameter into *this without performing any copies.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fbo</parametername>
</parameternamelist>
<parameterdescription>
<para>An r-value reference to another Framebuffer Object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="182" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/framebuffer.cpp" bodystart="56" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a3540a363a715a91d06ad2809491c7ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ls::draw::framebuffer::~framebuffer</definition>
        <argsstring>()</argsstring>
        <name>~framebuffer</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
<para>Frees all memory, GPU-handles, and resources used by *this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="189" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/framebuffer.cpp" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a449152e74c044fef67273bb1a0e5bee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classls_1_1draw_1_1framebuffer" kindref="compound">framebuffer</ref> &amp;</type>
        <definition>framebuffer&amp; ls::draw::framebuffer::operator=</definition>
        <argsstring>(const framebuffer &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classls_1_1draw_1_1framebuffer" kindref="compound">framebuffer</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy Operator - DELETED. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a1c96e565f786cd3a3397d2b45a011501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classls_1_1draw_1_1framebuffer" kindref="compound">framebuffer</ref> &amp;</type>
        <definition>framebuffer &amp; ls::draw::framebuffer::operator=</definition>
        <argsstring>(framebuffer &amp;&amp;fbo)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classls_1_1draw_1_1framebuffer" kindref="compound">framebuffer</ref> &amp;&amp;</type>
          <declname>fbo</declname>
        </param>
        <briefdescription>
<para>Move Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Moves all data from the input parameter into *this without performing any copies.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fbo</parametername>
</parameternamelist>
<parameterdescription>
<para>An r-value reference to another Framebuffer Object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="205" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/framebuffer.cpp" bodystart="80" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a2cdba63826811d153a63188536c3ab5c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned ls::draw::framebuffer::getId</definition>
        <argsstring>() const </argsstring>
        <name>getId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the GPU-Assigned ID that this object references.</para><para><simplesect kind="return"><para>A non-zero unsigned integer that is used as a handle to the framebuffer object represented by this object. This value returns 0 if nothing is referenced by *this. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="214" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/framebuffer_impl.h" bodystart="8" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1af0a3a9679f9a80fb93f4bc02afbf3659" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacels_1_1draw_1ac7363f051b664b0260e33db4b23a5e14" kindref="member">fbo_access_t</ref></type>
        <definition>fbo_access_t ls::draw::framebuffer::getAccessType</definition>
        <argsstring>() const </argsstring>
        <name>getAccessType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the framebuffer acccess type.</para><para><simplesect kind="return"><para>fbo_access_t An enumeration that can help make perform framebuffer read/write operations </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="223" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/framebuffer_impl.h" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a29e990f8f98f496359fae6054dcbbf52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::framebuffer::setAccessType</definition>
        <argsstring>(fbo_access_t a)</argsstring>
        <name>setAccessType</name>
        <param>
          <type><ref refid="namespacels_1_1draw_1ac7363f051b664b0260e33db4b23a5e14" kindref="member">fbo_access_t</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the framebuffer access type.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>An enumeration that can help make perform framebuffer read/write operations. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="232" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/framebuffer_impl.h" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a87ab3fb0075d78800cd2fe476ec575ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::framebuffer::bind</definition>
        <argsstring>() const </argsstring>
        <name>bind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bind the current framebuffer to OpenGL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="237" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/framebuffer_impl.h" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a1906f286345faea0d6f7c52d73176ef6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::framebuffer::unbind</definition>
        <argsstring>() const </argsstring>
        <name>unbind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unbind the current framebuffer to OpenGL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="242" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/framebuffer_impl.h" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a7c3f3f57aa6c19b89c9d4908cb5aaa3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ls::draw::framebuffer::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize an empty framebuffer.</para><para><simplesect kind="return"><para>TRUE if a new framebuffer object was successfully generated on the GPU, FALSE if otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="250" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/framebuffer.cpp" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a854100b659de6b75e22297d7841be829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::framebuffer::terminate</definition>
        <argsstring>()</argsstring>
        <name>terminate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Release all resources used by this framebuffer object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="255" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/framebuffer.cpp" bodystart="102" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a1cea95a9c6bf4879f13b3136fee69ab2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::framebuffer::blit</definition>
        <argsstring>(const math::vec2i &amp;srcOrig, const math::vec2i &amp;srcSize, const math::vec2i &amp;dstOrig, const math::vec2i &amp;dstSize, fbo_mask_t msk, ls_tex_filter_t fltr=LS_FILTER_LINEAR) const </argsstring>
        <name>blit</name>
        <param>
          <type>const math::vec2i &amp;</type>
          <declname>srcOrig</declname>
        </param>
        <param>
          <type>const math::vec2i &amp;</type>
          <declname>srcSize</declname>
        </param>
        <param>
          <type>const math::vec2i &amp;</type>
          <declname>dstOrig</declname>
        </param>
        <param>
          <type>const math::vec2i &amp;</type>
          <declname>dstSize</declname>
        </param>
        <param>
          <type><ref refid="namespacels_1_1draw_1a681041eb7cdd425f48f8b837f5920cea" kindref="member">fbo_mask_t</ref></type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="namespacels_1_1draw_1a0af088c118d4ef85aefab930dee8926d" kindref="member">ls_tex_filter_t</ref></type>
          <declname>fltr</declname>
          <defval><ref refid="namespacels_1_1draw_1a0af088c118d4ef85aefab930dee8926dae608266d2e1b4eb0b94e0dd285eb9f43" kindref="member">LS_FILTER_LINEAR</ref></defval>
        </param>
        <briefdescription>
<para>Blit (draw) this frame buffer onto another. </para>        </briefdescription>
        <detaileddescription>
<para>This buffer must be accessed as LS_READ_BUFFER in order to work properly.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>srcOrig</parametername>
</parameternamelist>
<parameterdescription>
<para>A point that specifies the bottom-left corner of *this from which to blit onto another framebuffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcSize</parametername>
</parameternamelist>
<parameterdescription>
<para>A point that specifies the top-right corner of *this to blit onto another framebuffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstOrig</parametername>
</parameternamelist>
<parameterdescription>
<para>A point that specifies the bottom-left corner of the target framebuffer at which to start blitting to.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dstSize</parametername>
</parameternamelist>
<parameterdescription>
<para>A point that specifies the top-right corner of the target framebuffer at which to end the blitting.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msk</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to determine if *this framebuffer&apos;s depth, stencil, and/or color buffers should be copied to the target framebuffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fltr</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to determine the type of filtering that should be performed during the blitting operation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="288" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/framebuffer_impl.h" bodystart="67" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1ae866a536cd06372dbe94c52fd7586990" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::framebuffer::clear</definition>
        <argsstring>(fbo_mask_t) const </argsstring>
        <name>clear</name>
        <param>
          <type><ref refid="namespacels_1_1draw_1a681041eb7cdd425f48f8b837f5920cea" kindref="member">fbo_mask_t</ref></type>
          <defname>mask</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear the color attachment indicated by the input parameter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>bitmask of type fbo_mask_t. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="299" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/framebuffer_impl.h" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1a0932b6b5b2fee096e76635e5299ae329" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::framebuffer::setDrawTargets</definition>
        <argsstring>(unsigned numTargets, const fbo_attach_t *targets)</argsstring>
        <name>setDrawTargets</name>
        <param>
          <type>unsigned</type>
          <declname>numTargets</declname>
        </param>
        <param>
          <type>const <ref refid="namespacels_1_1draw_1ab36a712df772da585fbf284af770281f" kindref="member">fbo_attach_t</ref> *</type>
          <declname>targets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the current draw targets to be used by this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numTargets</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of draw targets contained within the array specified by &quot;targets.&quot;</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targets</parametername>
</parameternamelist>
<parameterdescription>
<para>The set of all render targets that should be rendered to by this. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="311" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/generic/framebuffer_impl.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classls_1_1draw_1_1framebuffer_1acd7a770569ba38e47df701784fc29677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ls::draw::framebuffer::attachTexture</definition>
        <argsstring>(fbo_attach_t atch, texture_target_t trgt, const texture &amp;tex, int mipmapLevel=0, int layer=0)</argsstring>
        <name>attachTexture</name>
        <param>
          <type><ref refid="namespacels_1_1draw_1ab36a712df772da585fbf284af770281f" kindref="member">fbo_attach_t</ref></type>
          <declname>atch</declname>
        </param>
        <param>
          <type><ref refid="namespacels_1_1draw_1a7c001d2b0841fd073793ad338237aba1" kindref="member">texture_target_t</ref></type>
          <declname>trgt</declname>
        </param>
        <param>
          <type>const <ref refid="classls_1_1draw_1_1texture" kindref="compound">texture</ref> &amp;</type>
          <declname>tex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mipmapLevel</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>layer</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attach a texture to the currently bound framebuffer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>atch</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the internal OpenGL color/depth/stencil attachment to use. This parameter must correlate to a fragment shader output.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trgt</parametername>
</parameternamelist>
<parameterdescription>
<para>Use this parameter in order to aid in rendering to different parts of different texture types.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tex</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant reference to a texture object to bind to this and use as a render target.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mipmapLevel</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of mipmap filtering to use for rendering.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>layer</parametername>
</parameternamelist>
<parameterdescription>
<para>In the event that &apos;tex&apos; is a 3D texture, this parameter specifies which 3D layer to use for rendering. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="335" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/src/framebuffer.cpp" bodystart="111" bodyend="133"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Framebuffer Object. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
 A Framebuffer Object represents a canvas for which all draw operations will be placed on. When a Framebuffer is not active, OpenGL will render to the default buffer residing within a render context. Framebuffer objects can <heading level="2">be used to render to a texture as well. </heading>
</para>    </detaileddescription>
    <location file="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" line="108" column="1" bodyfile="C:/Users/miles/C++/projects/LightSky/lightsky/draw/framebuffer.h" bodystart="108" bodyend="342"/>
    <listofallmembers>
      <member refid="classls_1_1draw_1_1framebuffer_1a81b0dca545db9fac7e8504fd40a8bda7" prot="private" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>access</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1acd7a770569ba38e47df701784fc29677" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>attachTexture</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a87ab3fb0075d78800cd2fe476ec575ee" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>bind</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a23ef1af5e8bf19960e2e12bba3e5886d" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>bindDefaultFramebuffer</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a1cea95a9c6bf4879f13b3136fee69ab2" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>blit</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1ae866a536cd06372dbe94c52fd7586990" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>clear</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a94b0aaba9b059ccfbccfa34fa69e0eb7" prot="private" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>fboId</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a23e6a63dc3d99ec4f8206352f96b9263" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>framebuffer</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a6e620c48c2f9faf4b8af822b734f3fff" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>framebuffer</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a49deac79c790bda7afea13a381126139" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>framebuffer</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1af0a3a9679f9a80fb93f4bc02afbf3659" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>getAccessType</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a2cdba63826811d153a63188536c3ab5c" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>getId</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a79229d0b13b5499536bbacc6a9ed243d" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>getMaxNumAttachments</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a3bc9dfc6837cd463f249dd6ffad257d4" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>getStatus</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a7c3f3f57aa6c19b89c9d4908cb5aaa3f" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>init</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a449152e74c044fef67273bb1a0e5bee1" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>operator=</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a1c96e565f786cd3a3397d2b45a011501" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>operator=</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1ad18e1d14bd856836bd7ca7586c45fc14" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>printStatus</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a29e990f8f98f496359fae6054dcbbf52" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>setAccessType</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a0932b6b5b2fee096e76635e5299ae329" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>setDrawTargets</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a854100b659de6b75e22297d7841be829" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>terminate</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a1906f286345faea0d6f7c52d73176ef6" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>unbind</name></member>
      <member refid="classls_1_1draw_1_1framebuffer_1a3540a363a715a91d06ad2809491c7ab0" prot="public" virt="non-virtual"><scope>ls::draw::framebuffer</scope><name>~framebuffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
