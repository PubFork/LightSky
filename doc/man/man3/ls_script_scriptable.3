.TH "ls::script::scriptable" 3 "Sun Oct 26 2014" "Version Pre-Alpha" "LightSky" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ls::script::scriptable \- 
.PP
Script Object Base Class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <scriptable\&.h>\fP
.PP
Inherited by \fBls::script::functor\fP, and \fBls::script::variable\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~scriptable\fP ()=0"
.br
.ti -1c
.RI "\fBscriptable\fP ()"
.br
.RI "\fIConstructor Does nothing as there are no members in *this\&. \fP"
.ti -1c
.RI "\fBscriptable\fP (const \fBscriptable\fP &)"
.br
.RI "\fICopy Constructor Does nothing as there are no members in *this\&. \fP"
.ti -1c
.RI "\fBscriptable\fP (\fBscriptable\fP &&)"
.br
.RI "\fIMove Constructor Does nothing as there are no members in *this\&. \fP"
.ti -1c
.RI "\fBscriptable\fP & \fBoperator=\fP (const \fBscriptable\fP &)"
.br
.RI "\fICopy Operator Does nothing as there are no members in *this\&. \fP"
.ti -1c
.RI "\fBscriptable\fP & \fBoperator=\fP (\fBscriptable\fP &&)"
.br
.RI "\fIMove Operator Does nothing as there are no members in *this\&. \fP"
.ti -1c
.RI "virtual \fBscript_base_t\fP \fBgetScriptType\fP () const =0"
.br
.RI "\fIgetScriptType Retrieve the type of scripting object *this is\&. \fP"
.ti -1c
.RI "virtual hash_t \fBgetScriptSubType\fP () const =0"
.br
.RI "\fIgetScriptSubType Used to determine the run-time-type information about the type of scripting object that *this is\&. \fP"
.ti -1c
.RI "virtual bool \fBload\fP (std::istream &istr, \fBvarLoaderMap\fP &varLoader, \fBfuncLoaderMap\fP &funcLoader)=0"
.br
.RI "\fIload A serialization method that will help in reloading data from a standard input stream\&. \fP"
.ti -1c
.RI "virtual void \fBsave\fP (std::ostream &ostr) const =0"
.br
.RI "\fIsave Sends all data from *this into an std::ostream\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Script Object Base Class\&. 


.PP
 
.SS "Defines all common interfaces for derived types\&. "

.PP
Definition at line 22 of file scriptable\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ls::script::scriptable::~scriptable ()\fC [pure virtual]\fP"

.PP
Definition at line 10 of file scriptable\&.cpp\&.
.SS "ls::script::scriptable::scriptable ()"

.PP
Constructor Does nothing as there are no members in *this\&. 
.PP
Definition at line 16 of file scriptable\&.cpp\&.
.SS "ls::script::scriptable::scriptable (const \fBscriptable\fP &)"

.PP
Copy Constructor Does nothing as there are no members in *this\&. 
.PP
Definition at line 22 of file scriptable\&.cpp\&.
.SS "ls::script::scriptable::scriptable (\fBscriptable\fP &&)"

.PP
Move Constructor Does nothing as there are no members in *this\&. 
.PP
Definition at line 28 of file scriptable\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "virtual hash_t ls::script::scriptable::getScriptSubType () const\fC [pure virtual]\fP"

.PP
getScriptSubType Used to determine the run-time-type information about the type of scripting object that *this is\&. 
.PP
\fBReturns:\fP
.RS 4
hash_t A hash code that indicates the specific type of object that *this is at run-time\&. 
.RE
.PP

.PP
Implemented in \fBls::script::functor_t< hashId, void >\fP, \fBls::script::functor_t< hashId, args_t >\fP, \fBls::script::functor\fP, \fBls::script::variable_t< hashId, type >\fP, and \fBls::script::variable\fP\&.
.SS "virtual \fBscript_base_t\fP ls::script::scriptable::getScriptType () const\fC [pure virtual]\fP"

.PP
getScriptType Retrieve the type of scripting object *this is\&. 
.PP
\fBReturns:\fP
.RS 4
script_base_t A hash code indicating the type of scripting object *this is\&. This may return a hash code which determines that this is either a scripting variable or scripting function\&. 
.RE
.PP

.PP
Implemented in \fBls::script::functor\fP, and \fBls::script::variable\fP\&.
.SS "virtual bool ls::script::scriptable::load (std::istream &istr, \fBvarLoaderMap\fP &varLoader, \fBfuncLoaderMap\fP &funcLoader)\fC [pure virtual]\fP"

.PP
load A serialization method that will help in reloading data from a standard input stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIistr\fP A reference to a std::istream object which contains scripting data to be loaded into *this\&.
.br
\fIvarLoader\fP A variable-loading factory that will be used to map variable data from the input stream into *this\&.
.br
\fIfuncLoader\fP A function-loading factory that will be used to map functor data from the input stream into *this\&.
.RE
.PP
\fBReturns:\fP
.RS 4
a boolean value that will determine if data was successfully loaded into *this (TRUE) or not (FALSE)\&. 
.RE
.PP

.PP
Implemented in \fBls::script::functor_t< hashId, void >\fP, \fBls::script::functor_t< hashId, args_t >\fP, \fBls::script::functor\fP, and \fBls::script::variable_t< hashId, type >\fP\&.
.SS "\fBscriptable\fP & ls::script::scriptable::operator= (const \fBscriptable\fP &)"

.PP
Copy Operator Does nothing as there are no members in *this\&. 
.PP
\fBReturns:\fP
.RS 4
a reference to *this\&. 
.RE
.PP

.PP
Definition at line 34 of file scriptable\&.cpp\&.
.SS "\fBscriptable\fP & ls::script::scriptable::operator= (\fBscriptable\fP &&)"

.PP
Move Operator Does nothing as there are no members in *this\&. 
.PP
\fBReturns:\fP
.RS 4
a reference to *this\&. 
.RE
.PP

.PP
Definition at line 41 of file scriptable\&.cpp\&.
.SS "virtual void ls::script::scriptable::save (std::ostream &ostr) const\fC [pure virtual]\fP"

.PP
save Sends all data from *this into an std::ostream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIostr\fP A reference to an std::ostream object\&. Each scriptable object will have its own save method\&. 
.RE
.PP

.PP
Implemented in \fBls::script::functor_t< hashId, void >\fP, \fBls::script::functor_t< hashId, args_t >\fP, \fBls::script::functor\fP, and \fBls::script::variable_t< hashId, type >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for LightSky from the source code\&.
