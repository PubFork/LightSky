.TH "ls::game::manager< hash_t, data_t >" 3 "Sun Oct 26 2014" "Version Pre-Alpha" "LightSky" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ls::game::manager< hash_t, data_t > \- 
.PP
Manager Object\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <manager\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef std::unordered_map
.br
< hash_t, data_t * > \fBmap_t\fP"
.br
.RI "\fImap_t The specific type of hash map contained within *this template object\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBmanager\fP ()"
.br
.RI "\fIConstructor\&. \fP"
.ti -1c
.RI "\fBmanager\fP (const \fBmanager\fP &)=delete"
.br
.ti -1c
.RI "\fBmanager\fP (\fBmanager\fP &&m)"
.br
.RI "\fIMove Constructor Moves all managed object from the input parameter into *this\&. \fP"
.ti -1c
.RI "\fB~manager\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "\fBmanager\fP & \fBoperator=\fP (const \fBmanager\fP &)=delete"
.br
.RI "\fICopy Operator -- DELETED\&. \fP"
.ti -1c
.RI "\fBmanager\fP & \fBoperator=\fP (\fBmanager\fP &&m)"
.br
.RI "\fIMove Operator\&. \fP"
.ti -1c
.RI "void \fBmanage\fP (const hash_t &id, data_t *const pData)"
.br
.ti -1c
.RI "data_t * \fBunmanage\fP (const hash_t &id)"
.br
.ti -1c
.RI "void \fBerase\fP (const hash_t &id)"
.br
.ti -1c
.RI "bool \fBcontains\fP (const hash_t &id) const "
.br
.ti -1c
.RI "data_t * \fBget\fP (const hash_t &id) const "
.br
.ti -1c
.RI "data_t * \fBget\fP (const hash_t &id)"
.br
.ti -1c
.RI "data_t * \fBelementAt\fP (unsigned index)"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "unsigned \fBsize\fP () const "
.br
.ti -1c
.RI "const \fBmap_t\fP & \fBgetDataMap\fP () const "
.br
.ti -1c
.RI "\fBmap_t\fP & \fBgetDataMap\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename hash_t, typename data_t>class ls::game::manager< hash_t, data_t >"
Manager Object\&. 

The default implementation takes ownership of raw dynamic pointers and will delete them upon destruction\&. A custom implementation is necessary to delete dynamic arrays\&.
.PP
Remember, this non-specialized implementation takes pointers to data allocated with the 'new' operator\&. 
.PP
Definition at line 28 of file manager\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename hash_t, typename data_t> typedef std::unordered_map<hash_t, data_t*> \fBls::game::manager\fP< hash_t, data_t >::\fBmap_t\fP"

.PP
map_t The specific type of hash map contained within *this template object\&. 
.PP
Definition at line 34 of file manager\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename hash_t , typename data_t > \fBls::game::manager\fP< hash_t, data_t >::\fBmanager\fP ()"

.PP
Constructor\&. 
.PP
Definition at line 9 of file manager_impl\&.h\&.
.SS "template<typename hash_t, typename data_t> \fBls::game::manager\fP< hash_t, data_t >::\fBmanager\fP (const \fBmanager\fP< hash_t, data_t > &)\fC [delete]\fP"
Copy Constructor -- DELETED 
.SS "template<typename hash_t , typename data_t > \fBls::game::manager\fP< hash_t, data_t >::\fBmanager\fP (\fBmanager\fP< hash_t, data_t > &&m)"

.PP
Move Constructor Moves all managed object from the input parameter into *this\&. 
.PP
\fBParameters:\fP
.RS 4
\fIm\fP An r-value reference to a manager object 
.RE
.PP

.PP
Definition at line 17 of file manager_impl\&.h\&.
.SS "template<typename hash_t , typename data_t > \fBls::game::manager\fP< hash_t, data_t >::~\fBmanager\fP ()"

.PP
Destructor\&. Deletes all managed objects contained within *this, freeing all memory\&. 
.PP
Definition at line 25 of file manager_impl\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename hash_t , typename data_t > void \fBls::game::manager\fP< hash_t, data_t >::clear ()"
Release the memory of all objects managed by *this\&. 
.PP
Definition at line 121 of file manager_impl\&.h\&.
.SS "template<typename hash_t , typename data_t > bool \fBls::game::manager\fP< hash_t, data_t >::contains (const hash_t &id) const\fC [inline]\fP"
Determine if an object, referenced by ID, is managed by *this\&.
.PP
\fBParameters:\fP
.RS 4
\fIid\fP The ID that is used to reference objects\&.
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if an object is referenced by *this, FALSE if this object is not managing something at ID\&. 
.RE
.PP

.PP
Definition at line 81 of file manager_impl\&.h\&.
.SS "template<typename hash_t , typename data_t > data_t * \fBls::game::manager\fP< hash_t, data_t >::elementAt (unsignedindex)"
Get a managed object using an index offset, rather tan an ID\&. This method is meant for convenience only and should not be used for non-performance oriented applications\&.
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP The index ID that an object exists at\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to an object managed by *this\&. 
.RE
.PP

.PP
Definition at line 107 of file manager_impl\&.h\&.
.SS "template<typename hash_t , typename data_t > void \fBls::game::manager\fP< hash_t, data_t >::erase (const hash_t &id)"
Free the memory used by an object that's managed by *this\&. This function doe nothing if no object exists at ID\&.
.PP
\fBParameters:\fP
.RS 4
\fIid\fP The ID that is used to reference an object contained within *this\&. 
.RE
.PP

.PP
Definition at line 69 of file manager_impl\&.h\&.
.SS "template<typename hash_t , typename data_t > data_t * \fBls::game::manager\fP< hash_t, data_t >::get (const hash_t &id) const\fC [inline]\fP"
Retrieve the raw pointer to an object that is currently managed by *this\&.
.PP
\fBParameters:\fP
.RS 4
\fIid\fP The ID that is used to reference a managed object\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A const pointer to a managed object, or NULL if nothing at ID exists\&. 
.RE
.PP

.PP
Definition at line 90 of file manager_impl\&.h\&.
.SS "template<typename hash_t , typename data_t > data_t * \fBls::game::manager\fP< hash_t, data_t >::get (const hash_t &id)\fC [inline]\fP"
Retrieve the raw pointer to an object that is currently managed by *this\&.
.PP
\fBParameters:\fP
.RS 4
\fIid\fP The ID that is used to reference a managed object\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to a managed object, or NULL if nothing at ID exists\&. 
.RE
.PP

.PP
Definition at line 99 of file manager_impl\&.h\&.
.SS "template<typename hash_t , typename data_t > const \fBmanager\fP< hash_t, data_t >::\fBmap_t\fP & \fBls::game::manager\fP< hash_t, data_t >::getDataMap () const\fC [inline]\fP"
Retrieve the implementing hash table that is used internally by this object\&.
.PP
\fBReturns:\fP
.RS 4
A reference to the internal std::unordered_map used by *this\&. 
.RE
.PP

.PP
Definition at line 144 of file manager_impl\&.h\&.
.SS "template<typename hash_t , typename data_t > \fBmanager\fP< hash_t, data_t >::\fBmap_t\fP & \fBls::game::manager\fP< hash_t, data_t >::getDataMap ()\fC [inline]\fP"
Retrieve the implementing hash table that is used internally by this object\&.
.PP
\fBReturns:\fP
.RS 4
A reference to the internal std::unordered_map used by *this\&. 
.RE
.PP

.PP
Definition at line 154 of file manager_impl\&.h\&.
.SS "template<typename hash_t , typename data_t > void \fBls::game::manager\fP< hash_t, data_t >::manage (const hash_t &id, data_t *constpData)\fC [inline]\fP"
Manage the dynamic memory of an object, given an ID that it can be referenced by\&. If an object referenced by the 'ID' parameter is already managed by *this, then no management operations will be performed\&. The member function 'contains()' should be used before calling 'manage()\&.'
.PP
\fBParameters:\fP
.RS 4
\fIpData\fP A pointer to a dynamic object that should be managed by *this\&.
.br
\fIid\fP The ID that *this object should be referenced by *this\&. 
.RE
.PP

.PP
Definition at line 44 of file manager_impl\&.h\&.
.SS "template<typename hash_t, typename data_t> \fBmanager\fP& \fBls::game::manager\fP< hash_t, data_t >::operator= (const \fBmanager\fP< hash_t, data_t > &)\fC [delete]\fP"

.PP
Copy Operator -- DELETED\&. 
.SS "template<typename hash_t , typename data_t > \fBmanager\fP< hash_t, data_t > & \fBls::game::manager\fP< hash_t, data_t >::operator= (\fBmanager\fP< hash_t, data_t > &&m)"

.PP
Move Operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fIm\fP An r-value reference to a manager object\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to *this\&. 
.RE
.PP

.PP
Definition at line 33 of file manager_impl\&.h\&.
.SS "template<typename hash_t , typename data_t > unsigned \fBls::game::manager\fP< hash_t, data_t >::size () const\fC [inline]\fP"
Get the number of objects that are currently managed by *this\&.
.PP
\fBReturns:\fP
.RS 4
A unsigned integer, representing the number of objects managed by *this\&. 
.RE
.PP

.PP
Definition at line 134 of file manager_impl\&.h\&.
.SS "template<typename hash_t , typename data_t > data_t * \fBls::game::manager\fP< hash_t, data_t >::unmanage (const hash_t &id)"
Remove an object from the list of things managed by *this\&. This function essentially tells the manager that it should forget about an object, leaving the programmer to manage it manually\&.
.PP
\fBParameters:\fP
.RS 4
\fIid\fP The ID used to identify an object\&.
.RE
.PP
\fBReturns:\fP
.RS 4
data_t* A pointer to an object (previously) managed by *this\&. 
.RE
.PP

.PP
Definition at line 54 of file manager_impl\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for LightSky from the source code\&.
