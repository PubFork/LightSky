.TH "C:/Users/miles/C++/projects/LightSky/lightsky/utils/assert.h" 3 "Sun Oct 26 2014" "Version Pre-Alpha" "LightSky" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/miles/C++/projects/LightSky/lightsky/utils/assert.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'lightsky/setup/macros\&.h'\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBls\fP"
.br
.ti -1c
.RI " \fBls::utils\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBLS_ASSERT_BASIC\fP(x, fileName, lineNum, type)"
.br
.ti -1c
.RI "#define \fBLS_ASSERT\fP(x)   \fBLS_ASSERT_BASIC\fP(x, __FILE__, __LINE__, \fBls::utils::ERROR\fP)"
.br
.ti -1c
.RI "#define \fBLS_DEBUG_ASSERT\fP"
.br
.ti -1c
.RI "#define \fBLS_WARN\fP(x)   \fBLS_ASSERT_BASIC\fP(x, __FILE__, __LINE__, \fBls::utils::WARNING\fP)"
.br
.ti -1c
.RI "#define \fBLS_ALERT\fP(x)   \fBLS_ASSERT_BASIC\fP(x, __FILE__, __LINE__, \fBls::utils::ALERT\fP)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBls::utils::error_t\fP : int { \fBls::utils::ALERT\fP, \fBls::utils::WARNING\fP, \fBls::utils::ERROR\fP }"
.br
.RI "\fIerror_t A basic enumeration for lightsky assertions\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBls::utils::runtime_assert\fP (bool condition, error_t type, const char *const msg)"
.br
.RI "\fIruntime_assert Throw an \fBls::utils::error_t\fP and/or send a message to stdout/stderr\&. \fP"
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define LS_ALERT(x)   \fBLS_ASSERT_BASIC\fP(x, __FILE__, __LINE__, \fBls::utils::ALERT\fP)"

.PP
Definition at line 103 of file assert\&.h\&.
.SS "#define LS_ASSERT(x)   \fBLS_ASSERT_BASIC\fP(x, __FILE__, __LINE__, \fBls::utils::ERROR\fP)"

.PP
Definition at line 78 of file assert\&.h\&.
.SS "#define LS_ASSERT_BASIC(x, fileName, lineNum, type)"
\fBValue:\fP
.PP
.nf
ls::utils::runtime_assert(\
            (x), type,\
            "Assertion failed"\
            " on line " LS_STRINGIFY(lineNum)\
            " of " LS_STRINGIFY(fileName)\
            ": (" LS_STRINGIFY(x) ")"\
        )
.fi
.PP
Definition at line 64 of file assert\&.h\&.
.SS "#define LS_DEBUG_ASSERT"

.PP
Definition at line 89 of file assert\&.h\&.
.SS "#define LS_WARN(x)   \fBLS_ASSERT_BASIC\fP(x, __FILE__, __LINE__, \fBls::utils::WARNING\fP)"

.PP
Definition at line 96 of file assert\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for LightSky from the source code\&.
