.TH "ls::draw::context" 3 "Sun Oct 26 2014" "Version Pre-Alpha" "LightSky" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ls::draw::context \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <context\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBcontext\fP ()"
.br
.RI "\fIConstructor\&. \fP"
.ti -1c
.RI "\fBcontext\fP (const \fBcontext\fP &)=delete"
.br
.ti -1c
.RI "\fBcontext\fP (\fBcontext\fP &&ctx)"
.br
.RI "\fIMove Constructor\&. \fP"
.ti -1c
.RI "\fB~context\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "\fBcontext\fP & \fBoperator=\fP (const \fBcontext\fP &ctx)=delete"
.br
.ti -1c
.RI "\fBcontext\fP & \fBoperator=\fP (\fBcontext\fP &&ctx)"
.br
.RI "\fIMove Operator\&. \fP"
.ti -1c
.RI "bool \fBinit\fP (const \fBdisplay\fP &disp, bool useVsync=true)"
.br
.RI "\fIInitializer method for *this\&. \fP"
.ti -1c
.RI "void \fBterminate\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "void \fBmakeCurrent\fP (const \fBdisplay\fP &disp) const "
.br
.ti -1c
.RI "void * \fBgetContext\fP () const "
.br
.ti -1c
.RI "void \fBsetVsync\fP (bool vsync)"
.br
.RI "\fIEnable/Disable VSync\&. \fP"
.ti -1c
.RI "bool \fBgetVsync\fP () const "
.br
.ti -1c
.RI "void \fBflip\fP (const \fBdisplay\fP &disp) const "
.br
.in -1c
.SH "Detailed Description"
.PP 
The render context is a wrapper class for an SDL_GLContext structure\&. This class helps to provide RAII to the OpenGL context created from a display\&. If is also useful in providing information about the currently loaded OpenGL resource handle\&. 
.PP
Definition at line 22 of file context\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ls::draw::context::context ()"

.PP
Constructor\&. 
.PP
Definition at line 23 of file context\&.cpp\&.
.SS "ls::draw::context::context (const \fBcontext\fP &)\fC [delete]\fP"
Copy Constructor -- DELETED 
.SS "ls::draw::context::context (\fBcontext\fP &&ctx)"

.PP
Move Constructor\&. Moves all render context data from the input parameter into *this\&. No copies are performed\&.
.PP
\fBParameters:\fP
.RS 4
\fIctx\fP An R-Value reference to a render context\&. 
.RE
.PP

.PP
Definition at line 30 of file context\&.cpp\&.
.SS "ls::draw::context::~context ()"

.PP
Destructor\&. Frees all hardware handles and memory resources used by *this\&. This effectively does the same thing as 'terminate()\&.' Make sure the display object that this was created with has not yet been destroyed\&. 
.PP
Definition at line 49 of file context\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void ls::draw::context::flip (const \fBdisplay\fP &disp) const"
Swap the current display's front and back buffers\&. This method should only be called on one display and one display only\&. Binding this render context to more than one display may cause OpenGL to crash\&.
.PP
This context must have been made current in order to be used\&.
.PP
\fBParameters:\fP
.RS 4
\fIdisp\fP A constant reference to the dsplay object that *this context has been initialized with\&. 
.RE
.PP

.PP
Definition at line 148 of file context\&.cpp\&.
.SS "void * ls::draw::context::getContext () const\fC [inline]\fP"
Get a pointer to the SDL_GLContext that is used by the active display\&. This context must have been made current in order to be used\&.
.PP
\fBReturns:\fP
.RS 4
A void pointer that can be safely casted to a SDL_GLContext\&. 
.RE
.PP

.PP
Definition at line 9 of file context_impl\&.h\&.
.SS "bool ls::draw::context::getVsync () const"
Determine if VSync is enabled or disabled within the current window\&. This context must have been made current in order to be used\&.
.PP
\fBReturns:\fP
.RS 4
TRUE if VSync is enabled, FALSE if not\&. 
.RE
.PP

.PP
Definition at line 141 of file context\&.cpp\&.
.SS "bool ls::draw::context::init (const \fBdisplay\fP &disp, booluseVsync = \fCtrue\fP)"

.PP
Initializer method for *this\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdisp\fP A reference to a constant display object\&. This display object must have already been initialized and created with OpenGL 3\&.3 core attributes\&.
.RE
.PP
\fBReturns:\fP
.RS 4
bool TRUE if a context was able to be created from the input display object, FALSE if not\&. 
.RE
.PP

.PP
Definition at line 56 of file context\&.cpp\&.
.SS "void ls::draw::context::makeCurrent (const \fBdisplay\fP &disp) const"
Bind this render context to the active display\&. This method should only be called on one display and one display only\&. Binding this render context to more than one display may cause OpenGL to crash\&.
.PP
\fBParameters:\fP
.RS 4
\fIdisp\fP A constant reference to the dsplay object that *this context has been initialized with\&. 
.RE
.PP

.PP
Definition at line 127 of file context\&.cpp\&.
.SS "\fBcontext\fP& ls::draw::context::operator= (const \fBcontext\fP &ctx)\fC [delete]\fP"
Copy Operator -- DELETED 
.SS "\fBcontext\fP & ls::draw::context::operator= (\fBcontext\fP &&ctx)"

.PP
Move Operator\&. Moves all render context data from the input parameter into *this\&. No copies are performed\&.
.PP
\fBParameters:\fP
.RS 4
\fIcontext&&\fP An R-Value reference to a render context\&. 
.RE
.PP

.PP
Definition at line 39 of file context\&.cpp\&.
.SS "void ls::draw::context::setVsync (boolvsync)"

.PP
Enable/Disable VSync\&. This context must have been made current in order to be used\&.
.PP
\fBParameters:\fP
.RS 4
\fITRUE\fP if vsync is desired, FALSE to disable it\&. 
.RE
.PP

.PP
Definition at line 134 of file context\&.cpp\&.
.SS "void ls::draw::context::terminate ()"

.PP
Destructor\&. Frees all hardware handles and memory resources used by *this\&. Make sure the display object that this was created with has not yet been destroyed\&. 
.PP
Definition at line 117 of file context\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for LightSky from the source code\&.
