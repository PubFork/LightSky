.TH "ls::draw::meshModel" 3 "Sun Oct 26 2014" "Version Pre-Alpha" "LightSky" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ls::draw::meshModel \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <meshModel\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBmeshModel\fP ()"
.br
.RI "\fIDefault Constructor\&. \fP"
.ti -1c
.RI "\fBmeshModel\fP (const \fBmeshModel\fP &mm)=delete"
.br
.ti -1c
.RI "\fBmeshModel\fP (\fBmeshModel\fP &&mm)"
.br
.RI "\fIMove Constructor\&. \fP"
.ti -1c
.RI "\fB~meshModel\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "\fBmeshModel\fP & \fBoperator=\fP (const \fBmeshModel\fP &mm)=delete"
.br
.ti -1c
.RI "\fBmeshModel\fP & \fBoperator=\fP (\fBmeshModel\fP &&mm)"
.br
.RI "\fIMove Operator\&. \fP"
.ti -1c
.RI "unsigned \fBgetId\fP () const "
.br
.ti -1c
.RI "bool \fBinit\fP (const \fBmesh\fP &meshRef, const \fBtexture\fP &texRef)"
.br
.ti -1c
.RI "void \fBterminate\fP ()"
.br
.ti -1c
.RI "const \fBmesh\fP & \fBgetMesh\fP () const "
.br
.ti -1c
.RI "const \fBtexture\fP & \fBgetTexture\fP () const "
.br
.ti -1c
.RI "void \fBsetTexture\fP (const \fBtexture\fP &texRef)"
.br
.ti -1c
.RI "int \fBgetNumInstances\fP () const "
.br
.ti -1c
.RI "void \fBsetNumInstances\fP (int instanceCount, const math::mat4 *const modelMatrices)"
.br
.ti -1c
.RI "void \fBmodifyInstance\fP (int index, const math::mat4 &modelMatrix)"
.br
.ti -1c
.RI "bool \fBcanDraw\fP () const "
.br
.ti -1c
.RI "void \fBdraw\fP () const "
.br
.RI "\fIDraw a mesh\&. \fP"
.ti -1c
.RI "void \fBdrawSubMesh\fP (int startPos, int endPos) const "
.br
.in -1c
.SH "Detailed Description"
.PP 
A \fBmeshModel\fP represents a single renderable mesh that can be drawn multiple times by attaching both an mesh and a set of model matrices\&. The more model matrices that are bound to a mesh model, the more instances will be rendered by OpenGL\&. 
.PP
Definition at line 25 of file meshModel\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ls::draw::meshModel::meshModel ()"

.PP
Default Constructor\&. 
.PP
Definition at line 22 of file meshModel\&.cpp\&.
.SS "ls::draw::meshModel::meshModel (const \fBmeshModel\fP &mm)\fC [delete]\fP"
Copy Constructor -- DELETED 
.SS "ls::draw::meshModel::meshModel (\fBmeshModel\fP &&mm)"

.PP
Move Constructor\&. Moves all data from the input parameter into *this\&. No copies are performed\&.
.PP
\fBParameters:\fP
.RS 4
\fImm\fP An R-Value reference to an \fBmeshModel\fP that is about to go out of scope\&. 
.RE
.PP

.PP
Definition at line 28 of file meshModel\&.cpp\&.
.SS "ls::draw::meshModel::~meshModel ()"

.PP
Destructor\&. Frees All memory and resources used by *this\&. 
.PP
Definition at line 43 of file meshModel\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "bool ls::draw::meshModel::canDraw () const\fC [inline]\fP"
Determine if this current model is able to be rendered\&.
.PP
\fBReturns:\fP
.RS 4
TRUE if both the current mesh and current texture point to non-null, objects\&. 
.RE
.PP

.PP
Definition at line 44 of file meshModel_impl\&.h\&.
.SS "void ls::draw::meshModel::draw () const\fC [inline]\fP"

.PP
Draw a mesh\&. This method renders a mesh to the currently bound framebuffer\&. 
.PP
Definition at line 51 of file meshModel_impl\&.h\&.
.SS "void ls::draw::meshModel::drawSubMesh (intstartPos, intendPos) const\fC [inline]\fP"
Draw a single part of the total sub-meshes contained within *this\&. This function already takes the vertex counts into account\&.
.PP
\fBParameters:\fP
.RS 4
\fIstartPos\fP indicates the starting offset to the the mesh contained within *this that should be drawn\&.
.br
\fIendPos\fP indicates the offset to the final sub-mesh contained within *this that should be drawn\&. 
.RE
.PP

.PP
Definition at line 62 of file meshModel_impl\&.h\&.
.SS "unsigned ls::draw::meshModel::getId () const\fC [inline]\fP"
Get the GPU-Assigned ID associated with this mesh model\&. This ID is directly correlated to the VAO which holds all model matrices and vertex data for the mesh bound to *this\&.
.PP
\fBReturns:\fP
.RS 4
An unsigned integral type representing a unique ID for this mesh model\&. 
.RE
.PP

.PP
Definition at line 8 of file meshModel_impl\&.h\&.
.SS "const \fBmesh\fP & ls::draw::meshModel::getMesh () const\fC [inline]\fP"
Get the mesh that is currently used by this model
.PP
\fBReturns:\fP
.RS 4
a const reference to the mesh used by *this\&. 
.RE
.PP

.PP
Definition at line 15 of file meshModel_impl\&.h\&.
.SS "int ls::draw::meshModel::getNumInstances () const\fC [inline]\fP"
Get the number of instances that will be rendered when a call to 'draw()' is made\&.
.PP
\fBReturns:\fP
.RS 4
the number of meshes/model matrices rendered by/with this mesh\&. 
.RE
.PP

.PP
Definition at line 37 of file meshModel_impl\&.h\&.
.SS "const \fBtexture\fP & ls::draw::meshModel::getTexture () const\fC [inline]\fP"
Get the texture that is currently used by this model
.PP
\fBReturns:\fP
.RS 4
A const reference to a texture object\&. 
.RE
.PP

.PP
Definition at line 22 of file meshModel_impl\&.h\&.
.SS "bool ls::draw::meshModel::init (const \fBmesh\fP &meshRef, const \fBtexture\fP &texRef)"
Set the mesh and texture to be used by this object during a draw operation\&.
.PP
\fBParameters:\fP
.RS 4
\fImeshRef\fP A const reference to an mesh
.br
\fItexRef\fP A const reference to an texture
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the mesh was successfully loaded with a VBO assigned to handle model matrices, FALSE if otherwise\&. 
.RE
.PP

.PP
Definition at line 126 of file meshModel\&.cpp\&.
.SS "void ls::draw::meshModel::modifyInstance (intindex, const math::mat4 &modelMatrix)"
Change the model matrix for a single instance
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP The index to specify which model matrix in *this should be modified\&. Model matrices are sent directly to an instance/array buffer on the GPU\&.
.br
\fImodelMatrix\fP A constant reference to a model matrix which is to replace the one on the GPU, specified by 'index\&.' 
.RE
.PP

.PP
Definition at line 174 of file meshModel\&.cpp\&.
.SS "\fBmeshModel\fP& ls::draw::meshModel::operator= (const \fBmeshModel\fP &mm)\fC [delete]\fP"
Copy Operator -- DELETED 
.SS "\fBmeshModel\fP & ls::draw::meshModel::operator= (\fBmeshModel\fP &&mm)"

.PP
Move Operator\&. Moves all data from the input parameter into *this\&.
.PP
\fBParameters:\fP
.RS 4
\fImm\fP An R-Value reference to an \fBmeshModel\fP that is about to go out of scope\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to *this\&. 
.RE
.PP

.PP
Definition at line 47 of file meshModel\&.cpp\&.
.SS "void ls::draw::meshModel::setNumInstances (intinstanceCount, const math::mat4 *constmodelMatrices)"
All meshes support instanced draws by default\&. This will set the number of instances that will appear when drawing a mesh\&.
.PP
\fBParameters:\fP
.RS 4
\fIinstanceCount\fP The number of instances (and modelMatrices) that will be drawn by this mesh\&.
.br
\fImodelMatrices\fP A pointer to an array of model matrices that will be applied to each mesh instance\&. 
.RE
.PP

.PP
Definition at line 161 of file meshModel\&.cpp\&.
.SS "void ls::draw::meshModel::setTexture (const \fBtexture\fP &texRef)\fC [inline]\fP"
Set the texture ID to be used by this object during a draw operation\&.
.PP
\fBParameters:\fP
.RS 4
\fItexRef\fP A const reference to a texture 
.RE
.PP

.PP
Definition at line 29 of file meshModel_impl\&.h\&.
.SS "void ls::draw::meshModel::terminate ()"
Clear all draw parameters to their default, null values and free any allocated resources used by *this\&.
.PP
This method will also terminate any internal VAO and VBO objects that are used internally\&. 
.PP
Definition at line 115 of file meshModel\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for LightSky from the source code\&.
