.TH "ls::draw::shaderProgram" 3 "Sun Oct 26 2014" "Version Pre-Alpha" "LightSky" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ls::draw::shaderProgram \- 
.PP
Shader Program\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <shaderProgram\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBshaderProgram\fP ()"
.br
.RI "\fIConstructor\&. \fP"
.ti -1c
.RI "\fBshaderProgram\fP (const \fBshaderProgram\fP &)=delete"
.br
.RI "\fICopy Constructor -- Deleted\&. \fP"
.ti -1c
.RI "\fBshaderProgram\fP (\fBshaderProgram\fP &&)"
.br
.RI "\fIMove Constructor\&. \fP"
.ti -1c
.RI "\fBshaderProgram\fP & \fBoperator=\fP (const \fBshaderProgram\fP &)=delete"
.br
.RI "\fICopy Operator -- Deleted\&. \fP"
.ti -1c
.RI "\fBshaderProgram\fP & \fBoperator=\fP (\fBshaderProgram\fP &&)"
.br
.RI "\fIMove Operator\&. \fP"
.ti -1c
.RI "\fB~shaderProgram\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "void \fBterminate\fP ()"
.br
.ti -1c
.RI "bool \fBattachShaders\fP (const vertexShader &vs, const fragmentShader &fs)"
.br
.ti -1c
.RI "bool \fBattachShaders\fP (const vertexShader &vs, const geometryShader &gs, const fragmentShader &fs)"
.br
.ti -1c
.RI "bool \fBlink\fP ()"
.br
.ti -1c
.RI "void \fBbind\fP () const "
.br
.ti -1c
.RI "void \fBunbind\fP () const "
.br
.ti -1c
.RI "void \fBbindAttribute\fP (GLuint index, const GLchar *const name)"
.br
.ti -1c
.RI "GLint \fBgetAttribute\fP (const GLchar *const name) const "
.br
.ti -1c
.RI "GLint \fBgetUniformLocation\fP (const GLchar *const name) const "
.br
.ti -1c
.RI "std::string \fBgetUniformInfo\fP (int index, GLint *const varSize, GLenum *const varType) const "
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, int val)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, int val0, int val1)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, int val0, int val1, int val2)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, int val0, int val1, int val2, int val3)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, const math::vec2i &val)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, const math::vec3i &val)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, const math::vec4i &val)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, unsigned val)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, unsigned val0, unsigned val1)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, unsigned val0, unsigned val1, unsigned val2)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, unsigned val0, unsigned val1, unsigned val2, unsigned val3)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, const math::vec2ui &val)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, const math::vec3ui &val)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, const math::vec4ui &val)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, float val)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, float val0, float val1)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, float val0, float val1, float val2)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, float val0, float val1, float val2, float val3)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, const math::vec2 &val)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, const math::vec3 &val)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, const math::vec4 &val)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, const math::mat2 &val, bool transpose=false)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, const math::mat3 &val, bool transpose=false)"
.br
.ti -1c
.RI "void \fBsetUniformValue\fP (GLint uniformId, const math::mat4 &val, bool transpose=false)"
.br
.ti -1c
.RI "void \fBbindFragDataLocation\fP (GLuint colorNum, const GLchar *const name)"
.br
.ti -1c
.RI "void \fBbindFragDataLocationIndex\fP (GLuint colorNum, GLuint index, const GLchar *const name)"
.br
.ti -1c
.RI "GLint \fBgetFragDataIndex\fP (const GLchar *const name) const "
.br
.ti -1c
.RI "GLint \fBgetFragDataLocation\fP (const GLchar *const name) const "
.br
.in -1c
.SH "Detailed Description"
.PP 
Shader Program\&. 

Represents a combination of OpenGL vertex, fragment, and geometry shader objects\&. 
.PP
Definition at line 26 of file shaderProgram\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ls::draw::shaderProgram::shaderProgram ()"

.PP
Constructor\&. 
.PP
Definition at line 18 of file shaderProgram\&.cpp\&.
.SS "ls::draw::shaderProgram::shaderProgram (const \fBshaderProgram\fP &)\fC [delete]\fP"

.PP
Copy Constructor -- Deleted\&. 
.SS "ls::draw::shaderProgram::shaderProgram (\fBshaderProgram\fP &&tempProgram)"

.PP
Move Constructor\&. Copy the handle to the shader object owned by the input argument, reset the moved object's shader handle to 0\&.
.PP
\fBParameters:\fP
.RS 4
\fIsp\fP A, r-value reference to a shader program object to move into *this\&. 
.RE
.PP

.PP
Definition at line 25 of file shaderProgram\&.cpp\&.
.SS "ls::draw::shaderProgram::~shaderProgram ()"

.PP
Destructor\&. Destroy this object and free any GPU memory it uses\&. 
.PP
Definition at line 34 of file shaderProgram\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "bool ls::draw::shaderProgram::attachShaders (const vertexShader &vs, const fragmentShader &fs)"
Attach a set of shader units to the program
.PP
\fBParameters:\fP
.RS 4
\fIvs\fP A vertex shader unit that should be attached to *this\&.
.br
\fIfs\fP A fragment shader unit that should be attached to *this\&.
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the input shader units were successfully attached to *this\&. 
.RE
.PP

.PP
Definition at line 58 of file shaderProgram\&.cpp\&.
.SS "bool ls::draw::shaderProgram::attachShaders (const vertexShader &vs, const geometryShader &gs, const fragmentShader &fs)"
Attach a set of shader units to the program
.PP
\fBParameters:\fP
.RS 4
\fIvs\fP A vertex shader unit that should be attached to *this\&.
.br
\fIgs\fP A geometry shader unit that should be attached to *this\&.
.br
\fIfs\fP A fragment shader unit that should be attached to *this\&.
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the input shader units were successfully attached to *this\&. 
.RE
.PP

.PP
Definition at line 82 of file shaderProgram\&.cpp\&.
.SS "void ls::draw::shaderProgram::bind () const\fC [inline]\fP"
Bind this program to the current context 
.PP
Definition at line 8 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::bindAttribute (GLuintindex, const GLchar *constname)\fC [inline]\fP"
Bind a vertex attribute to a shader\&.
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP An unsigned integral type which specifies the vertex array location of an attachment to bind\&.
.br
\fIname\fP The exact name of the vertex array attribute in *this to bind\&. 
.RE
.PP

.PP
Definition at line 22 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::bindFragDataLocation (GLuintcolorNum, const GLchar *constname)\fC [inline]\fP"
Bind data to a fragment shader 
.PP
Definition at line 215 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::bindFragDataLocationIndex (GLuintcolorNum, GLuintindex, const GLchar *constname)\fC [inline]\fP"
Bind data to a fragment shader 
.PP
Definition at line 222 of file shaderProgram_impl\&.h\&.
.SS "GLint ls::draw::shaderProgram::getAttribute (const GLchar *constname) const\fC [inline]\fP"
Get the location of a vertex attribute
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The exact name of the vertex array attribute in *this whose index location should be retrieved\&.
.RE
.PP
\fBReturns:\fP
.RS 4
GLint A positive value to indicate the attribute's location in OpenGL or -1 for an invalid index\&. 
.RE
.PP

.PP
Definition at line 29 of file shaderProgram_impl\&.h\&.
.SS "GLint ls::draw::shaderProgram::getFragDataIndex (const GLchar *constname) const\fC [inline]\fP"
Query the bindings of color indices to a user-defined varying out variable 
.PP
Definition at line 229 of file shaderProgram_impl\&.h\&.
.SS "GLint ls::draw::shaderProgram::getFragDataLocation (const GLchar *constname) const\fC [inline]\fP"
Query the bindings of color numbers to user-defined varying out variables 
.PP
Definition at line 236 of file shaderProgram_impl\&.h\&.
.SS "std::string ls::draw::shaderProgram::getUniformInfo (intindex, GLint *constvarSize, GLenum *constvarType) const"
Get information about an active uniform located in a shader\&.
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP - indicates the index of the uniform to be queried\&.
.br
\fIvarSize\fP - indicates the number of elements contained within the uniform\&. This will be a value of 1 for all variables that are not arrays\&.
.br
\fIvarType\fP - used to determine the variable's data type; such as an int, float, sampler, matrix, or sampler array\&.
.RE
.PP
\fBReturns:\fP
.RS 4
the name of the variable as it is known in the shader source code\&. 
.RE
.PP

.PP
Definition at line 137 of file shaderProgram\&.cpp\&.
.SS "GLint ls::draw::shaderProgram::getUniformLocation (const GLchar *constname) const\fC [inline]\fP"
Get the location of a uniform variable\&.
.PP
\fBReturns:\fP
.RS 4
GLint A positive value to indicate the uniform's location in OpenGL or -1 for an invalid uniform index\&. 
.RE
.PP

.PP
Definition at line 40 of file shaderProgram_impl\&.h\&.
.SS "bool ls::draw::shaderProgram::link ()"
Link the attached shader units to this and create an entire GPU-side shader program\&.
.PP
\fBReturns:\fP
.RS 4
TRUE if *this object was successfully linked with its attached shader units\&. 
.RE
.PP

.PP
Definition at line 108 of file shaderProgram\&.cpp\&.
.SS "\fBshaderProgram\fP& ls::draw::shaderProgram::operator= (const \fBshaderProgram\fP &)\fC [delete]\fP"

.PP
Copy Operator -- Deleted\&. 
.SS "\fBshaderProgram\fP & ls::draw::shaderProgram::operator= (\fBshaderProgram\fP &&tempProgram)"

.PP
Move Operator\&. Move the values of the input argument and reset the moved object's values to 0\&.
.PP
\fBParameters:\fP
.RS 4
\fIsp\fP A, r-value reference to a shader program object to move into *this\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to *this 
.RE
.PP

.PP
Definition at line 41 of file shaderProgram\&.cpp\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, intval)\fC [inline]\fP"
Set a single uniform integer variable 
.PP
Definition at line 47 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, intval0, intval1)\fC [inline]\fP"
Set two uniform integer variables 
.PP
Definition at line 54 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, intval0, intval1, intval2)\fC [inline]\fP"
Set three uniform integer variables 
.PP
Definition at line 61 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, intval0, intval1, intval2, intval3)\fC [inline]\fP"
Set four uniform integer variables 
.PP
Definition at line 68 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, const math::vec2i &val)\fC [inline]\fP"
Set a uniform 2d vector of integers 
.PP
Definition at line 75 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, const math::vec3i &val)\fC [inline]\fP"
Set a uniform 3d vector of integers 
.PP
Definition at line 82 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, const math::vec4i &val)\fC [inline]\fP"
Set a uniform 4d vector of integers 
.PP
Definition at line 89 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, unsignedval)\fC [inline]\fP"
Set a single uniform unsigned int variable 
.PP
Definition at line 96 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, unsignedval0, unsignedval1)\fC [inline]\fP"
Set two uniform unsigned int variables 
.PP
Definition at line 103 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, unsignedval0, unsignedval1, unsignedval2)\fC [inline]\fP"
Set three uniform unsigned int variables 
.PP
Definition at line 110 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, unsignedval0, unsignedval1, unsignedval2, unsignedval3)\fC [inline]\fP"
Set four uniform unsigned int variables 
.PP
Definition at line 117 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, const math::vec2ui &val)\fC [inline]\fP"
Set a uniform 2d vector of unsigned ints 
.PP
Definition at line 124 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, const math::vec3ui &val)\fC [inline]\fP"
Set a uniform 3d vector of unsigned ints 
.PP
Definition at line 131 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, const math::vec4ui &val)\fC [inline]\fP"
Set a uniform 4d vector of unsigned ints 
.PP
Definition at line 138 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, floatval)\fC [inline]\fP"
Set a single uniform float variable 
.PP
Definition at line 145 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, floatval0, floatval1)\fC [inline]\fP"
Set two uniform float variables 
.PP
Definition at line 152 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, floatval0, floatval1, floatval2)\fC [inline]\fP"
Set three uniform float variables 
.PP
Definition at line 159 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, floatval0, floatval1, floatval2, floatval3)\fC [inline]\fP"
Set four uniform float variables 
.PP
Definition at line 166 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, const math::vec2 &val)\fC [inline]\fP"
Set a uniform 2d vector of floats 
.PP
Definition at line 173 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, const math::vec3 &val)\fC [inline]\fP"
Set a uniform 3d vector of floats 
.PP
Definition at line 180 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, const math::vec4 &val)\fC [inline]\fP"
Set a uniform 4d vector of floats 
.PP
Definition at line 187 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, const math::mat2 &val, booltranspose = \fCfalse\fP)\fC [inline]\fP"
Set a uniform 2d matrix 
.PP
Definition at line 194 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, const math::mat3 &val, booltranspose = \fCfalse\fP)\fC [inline]\fP"
Set a uniform 3d matrix 
.PP
Definition at line 201 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::setUniformValue (GLintuniformId, const math::mat4 &val, booltranspose = \fCfalse\fP)\fC [inline]\fP"
Set a uniform 4d matrix 
.PP
Definition at line 208 of file shaderProgram_impl\&.h\&.
.SS "void ls::draw::shaderProgram::terminate ()"
Free all memory used by this shader object\&. 
.PP
Definition at line 50 of file shaderProgram\&.cpp\&.
.SS "void ls::draw::shaderProgram::unbind () const\fC [inline]\fP"
Unbind this program from the context\&. 
.PP
Definition at line 15 of file shaderProgram_impl\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for LightSky from the source code\&.
