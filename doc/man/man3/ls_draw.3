.TH "ls::draw" 3 "Sun Oct 26 2014" "Version Pre-Alpha" "LightSky" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ls::draw \- 
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBgeometry\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBatlas\fP"
.br
.RI "\fITexture Atlas Class\&. \fP"
.ti -1c
.RI "struct \fBatlasEntry\fP"
.br
.RI "\fI\fBatlasEntry\fP \fP"
.ti -1c
.RI "class \fBblendObject\fP"
.br
.ti -1c
.RI "class \fBboundingBox\fP"
.br
.RI "\fIBounding Box Class\&. \fP"
.ti -1c
.RI "class \fBbufferObject\fP"
.br
.RI "\fIVertex Buffer Object\&. \fP"
.ti -1c
.RI "class \fBcontext\fP"
.br
.ti -1c
.RI "class \fBdepthObject\fP"
.br
.RI "\fIRender Depth Manipulation Object\&. \fP"
.ti -1c
.RI "class \fBdisplay\fP"
.br
.RI "\fIDisplay Class\&. \fP"
.ti -1c
.RI "class \fBfontResource\fP"
.br
.RI "\fIFont File loader\&. \fP"
.ti -1c
.RI "class \fBframebuffer\fP"
.br
.RI "\fIFramebuffer Object\&. \fP"
.ti -1c
.RI "struct \fBglyph\fP"
.br
.RI "\fIFont Metrics\&. \fP"
.ti -1c
.RI "class \fBimageResource\fP"
.br
.RI "\fIA resource object to load image files\&. \fP"
.ti -1c
.RI "class \fBmatrixStack\fP"
.br
.RI "\fIMatrix Stack\&. \fP"
.ti -1c
.RI "class \fBmesh\fP"
.br
.RI "\fIMesh Object\&. \fP"
.ti -1c
.RI "class \fBmeshModel\fP"
.br
.ti -1c
.RI "class \fBmeshResource\fP"
.br
.ti -1c
.RI "class \fBrenderer\fP"
.br
.RI "\fIRenderer Object On desktop platforms, this object strictly represents an OpenGL 3\&.3 context\&. \fP"
.ti -1c
.RI "class \fBsceneManager\fP"
.br
.ti -1c
.RI "class \fBshaderObject\fP"
.br
.ti -1c
.RI "class \fBshaderProgram\fP"
.br
.RI "\fIShader Program\&. \fP"
.ti -1c
.RI "class \fBtexture\fP"
.br
.ti -1c
.RI "struct \fBvertex\fP"
.br
.ti -1c
.RI "class \fBvertexArray\fP"
.br
.RI "\fIVertex Array Object\&. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBmath::vec4_t\fP< unsigned 
.br
char > \fBcolorub\fP"
.br
.ti -1c
.RI "typedef \fBmath::vec4_t\fP< unsigned 
.br
short > \fBcolorus\fP"
.br
.ti -1c
.RI "typedef \fBmath::vec4_t\fP< unsigned 
.br
int > \fBcolorui\fP"
.br
.ti -1c
.RI "typedef \fBmath::vec4_t\fP< float > \fBcolorf\fP"
.br
.ti -1c
.RI "typedef \fBcolorf\fP \fBcolor\fP"
.br
.ti -1c
.RI "typedef std::deque< \fBmesh\fP * > \fBmeshList\fP"
.br
.ti -1c
.RI "typedef std::deque< \fBmeshModel\fP * > \fBdrawList\fP"
.br
.ti -1c
.RI "typedef std::deque< \fBtexture\fP * > \fBtextureList\fP"
.br
.ti -1c
.RI "typedef std::deque< \fBatlas\fP * > \fBatlasList\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum : int { \fBLS_BLEND\fP = GL_BLEND }"
.br
.ti -1c
.RI "enum \fBblend_color_t\fP : int { \fBLS_BLEND_COLOR\fP = GL_BLEND_COLOR }"
.br
.ti -1c
.RI "enum \fBblend_equ_t\fP : int { \fBLS_BLEND_ADD\fP = GL_FUNC_ADD, \fBLS_BLEND_SUB\fP = GL_FUNC_SUBTRACT, \fBLS_BLEND_REV_SUB\fP = GL_FUNC_REVERSE_SUBTRACT, \fBLS_BLEND_MIN\fP = GL_MIN, \fBLS_BLEND_MAX\fP = GL_MAX, \fBLS_DEFAULT_BLEND_EQU\fP = GL_FUNC_ADD }"
.br
.ti -1c
.RI "enum \fBblend_equ_color_t\fP : int { \fBLS_BLEND_EQUATION_RGB\fP = GL_BLEND_EQUATION_RGB, \fBLS_BLEND_EQUATION_ALPHA\fP = GL_BLEND_EQUATION_ALPHA }"
.br
.ti -1c
.RI "enum \fBblend_func_t\fP : int { \fBLS_ZERO\fP = GL_ZERO, \fBLS_ONE\fP = GL_ONE, \fBLS_SRC_COLOR\fP = GL_SRC_COLOR, \fBLS_ONE_MINUS_SRC_COLOR\fP = GL_ONE_MINUS_SRC_COLOR, \fBLS_DST_COLOR\fP = GL_DST_COLOR, \fBLS_ONE_MINUS_DST_COLOR\fP = GL_ONE_MINUS_DST_COLOR, \fBLS_SRC_ALPHA\fP = GL_SRC_ALPHA, \fBLS_ONE_MINUS_SRC_ALPHA\fP = GL_ONE_MINUS_SRC_ALPHA, \fBLS_DST_ALPHA\fP = GL_DST_ALPHA, \fBLS_ONE_MINUS_DST_ALPHA\fP = GL_ONE_MINUS_DST_ALPHA, \fBLS_CONST_COLOR\fP = GL_CONSTANT_COLOR, \fBLS_ONE_MINUS_CONST_COLOR\fP = GL_ONE_MINUS_CONSTANT_COLOR, \fBLS_CONST_ALPHA\fP = GL_CONSTANT_ALPHA, \fBLS_ONE_MINUS_CONST_ALPHA\fP = GL_ONE_MINUS_CONSTANT_ALPHA }"
.br
.ti -1c
.RI "enum \fBblend_func_color_t\fP : int { \fBLS_BLEND_SRC_RGB\fP = GL_BLEND_SRC_RGB, \fBLS_BLEND_DST_RGB\fP = GL_BLEND_DST_RGB, \fBLS_BLEND_SRC_ALPHA\fP = GL_BLEND_SRC_ALPHA, \fBLS_BLEND_DST_ALPHA\fP = GL_BLEND_DST_ALPHA }"
.br
.ti -1c
.RI "enum \fBbuffer_t\fP : GLenum { \fBLS_ARRAY_BUFFER\fP = GL_ARRAY_BUFFER, \fBLS_ELEMENT_BUFFER\fP = GL_ELEMENT_ARRAY_BUFFER, \fBLS_TEXTURE_BUFFER\fP = GL_TEXTURE_BUFFER, \fBLS_TRANSFORM_FEEDBACK_BUFFER\fP = GL_TRANSFORM_FEEDBACK_BUFFER, \fBLS_UNIFORM_BUFFER\fP = GL_UNIFORM_BUFFER }"
.br
.ti -1c
.RI "enum \fBbuffer_usage_t\fP : GLenum { \fBLS_STATIC_READ\fP = GL_STATIC_READ, \fBLS_STATIC_DRAW\fP = GL_STATIC_DRAW, \fBLS_STATIC_COPY\fP = GL_STATIC_COPY, \fBLS_STREAM_READ\fP = GL_STREAM_READ, \fBLS_STREAM_DRAW\fP = GL_STREAM_DRAW, \fBLS_STREAM_COPY\fP = GL_STREAM_COPY, \fBLS_DYNAMIC_READ\fP = GL_DYNAMIC_READ, \fBLS_DYNAMIC_DRAW\fP = GL_DYNAMIC_DRAW, \fBLS_DYNAMIC_COPY\fP = GL_DYNAMIC_COPY }"
.br
.ti -1c
.RI "enum \fBbuffer_access_t\fP : GLbitfield { \fBLS_MAP_READ_BIT\fP = GL_MAP_READ_BIT, \fBLS_MAP_WRITE_BIT\fP = GL_MAP_WRITE_BIT, \fBLS_MAP_INVALIDATE_RANGE_BIT\fP = GL_MAP_INVALIDATE_RANGE_BIT, \fBLS_MAP_INVALIDATE_BUFFER_BIT\fP = GL_MAP_INVALIDATE_BUFFER_BIT, \fBLS_MAP_FLUSH_EXPLICIT_BIT\fP = GL_MAP_FLUSH_EXPLICIT_BIT, \fBLS_MAP_UNSYNCHRONIZED_BIT\fP = GL_MAP_UNSYNCHRONIZED_BIT, \fBLS_MAP_PERSISTENT_BIT\fP = GL_MAP_PERSISTENT_BIT, \fBLS_MAP_COHERENT_BIT\fP = GL_MAP_COHERENT_BIT }"
.br
.ti -1c
.RI "enum \fBcolor_type_t\fP : int { \fBCOLOR_TYPE_BYTE\fP = GL_BYTE, \fBCOLOR_TYPE_SHORT\fP = GL_SHORT, \fBCOLOR_TYPE_INT\fP = GL_INT, \fBCOLOR_TYPE_FLOAT\fP = GL_FLOAT, \fBCOLOR_TYPE_DOUBLE\fP = GL_DOUBLE, \fBCOLOR_TYPE_UNSIGNED_BYTE\fP = GL_UNSIGNED_BYTE, \fBCOLOR_TYPE_UNSIGNED_SHORT\fP = GL_UNSIGNED_SHORT, \fBCOLOR_TYPE_UNSIGNED_INT\fP = GL_UNSIGNED_INT, \fBCOLOR_TYPE_DEFAULT\fP = GL_UNSIGNED_BYTE, \fBCOLOR_TYPE_INVALID\fP = -1 }"
.br
.RI "\fIFramebuffer/Texture data types\&. \fP"
.ti -1c
.RI "enum \fBpixel_layout_t\fP : int { \fBLS_GRAY\fP = GL_DEPTH_COMPONENT, \fBLS_R\fP = GL_RED, \fBLS_RG\fP = GL_RG, \fBLS_RGB\fP = GL_BGR, \fBLS_RGBA\fP = GL_BGRA, \fBLS_DEFAULT_PIXEL_LAYOUT\fP = GL_BGR, \fBLS_INVALID_PIXEL_LAYOUT\fP = -1 }"
.br
.RI "\fIGPU-side pixel formats\&. \fP"
.ti -1c
.RI "enum \fBpixel_format_t\fP : int { \fBLS_GRAY_8\fP = GL_DEPTH_COMPONENT, \fBLS_R_8\fP = GL_R8, \fBLS_RG_8\fP = GL_RG8, \fBLS_RGB_8\fP = GL_RGB8, \fBLS_RGBA_8\fP = GL_RGBA8, \fBLS_GRAY_16I\fP = GL_DEPTH_COMPONENT16, \fBLS_R_16I\fP = GL_R16I, \fBLS_RG_16I\fP = GL_RG16I, \fBLS_RGB_16I\fP = GL_RGB16I, \fBLS_RGBA_16I\fP = GL_RGBA16I, \fBLS_GRAY_16U\fP = GL_DEPTH_COMPONENT16, \fBLS_R_16U\fP = GL_R16UI, \fBLS_RG_16U\fP = GL_RG16UI, \fBLS_RGB_16U\fP = GL_RGB16UI, \fBLS_RGBA_16U\fP = GL_RGBA16UI, \fBLS_GRAY_32I\fP = GL_DEPTH_COMPONENT32, \fBLS_R_32I\fP = GL_R32I, \fBLS_RG_32I\fP = GL_RG32I, \fBLS_RGB_32I\fP = GL_RGB32I, \fBLS_RGBA_32I\fP = GL_RGBA32I, \fBLS_GRAY_32U\fP = GL_DEPTH_COMPONENT32, \fBLS_R_32U\fP = GL_R32UI, \fBLS_RG_32U\fP = GL_RG32UI, \fBLS_RGB_32U\fP = GL_RGB32UI, \fBLS_RGBA_32U\fP = GL_RGBA32UI, \fBLS_GRAY_16F\fP = GL_R16F, \fBLS_R_8F\fP = GL_R16F, \fBLS_RG_16F\fP = GL_RG16F, \fBLS_RGB_16F\fP = GL_RGB16F, \fBLS_RGBA_16F\fP = GL_RGBA16F, \fBLS_GRAY_32F\fP = GL_DEPTH_COMPONENT32F, \fBLS_R_32F\fP = GL_R32F, \fBLS_RG_32F\fP = GL_RG32F, \fBLS_RGB_32F\fP = GL_RGB32F, \fBLS_RGBA_32F\fP = GL_RGBA32F, \fBLS_SRGB\fP = GL_SRGB, \fBLS_SRGB_8\fP = GL_SRGB8, \fBLS_SRGBA\fP = GL_SRGB_ALPHA, \fBLS_SRGBA_8\fP = GL_SRGB8_ALPHA8, \fBLS_R_C\fP = GL_COMPRESSED_RED, \fBLS_RG_C\fP = GL_COMPRESSED_RG, \fBLS_RGB_C\fP = GL_COMPRESSED_RGB, \fBLS_RGBA_C\fP = GL_COMPRESSED_RGBA, \fBLS_DEFAULT_PIXEL_FORMAT\fP = GL_RGB, \fBLS_INVALID_PIXEL_FORMAT\fP = -1 }"
.br
.RI "\fICPU-Side pixel formats\&. \fP"
.ti -1c
.RI "enum \fBcompare_func_t\fP : int { \fBLS_DEPTH_ALWAYS\fP = GL_ALWAYS, \fBLS_DEPTH_NEVER\fP = GL_NEVER, \fBLS_DEPTH_LESS\fP = GL_LESS, \fBLS_DEPTH_EQUAL\fP = GL_EQUAL, \fBLS_DEPTH_LEQUAL\fP = GL_LEQUAL, \fBLS_DEPTH_GEQUAL\fP = GL_GEQUAL, \fBLS_DEPTH_NEQUAL\fP = GL_NOTEQUAL }"
.br
.RI "\fIDepth Comparison Operations\&. \fP"
.ti -1c
.RI "enum \fBfullscreen_t\fP : int { \fBFULLSCREEN_DISPLAY\fP, \fBFULLSCREEN_WINDOW\fP, \fBFULLSCREEN_DEFAULT\fP = FULLSCREEN_DISPLAY }"
.br
.RI "\fIFull-Screen Flags\&. \fP"
.ti -1c
.RI "enum \fBfbo_attach_t\fP : int { \fBFBO_ATTACHMENT_0\fP = GL_COLOR_ATTACHMENT0, \fBFBO_ATTACHMENT_1\fP = GL_COLOR_ATTACHMENT1, \fBFBO_ATTACHMENT_2\fP = GL_COLOR_ATTACHMENT2, \fBFBO_ATTACHMENT_3\fP = GL_COLOR_ATTACHMENT3, \fBFBO_ATTACHMENT_4\fP = GL_COLOR_ATTACHMENT4, \fBFBO_ATTACHMENT_5\fP = GL_COLOR_ATTACHMENT5, \fBFBO_ATTACHMENT_6\fP = GL_COLOR_ATTACHMENT6, \fBFBO_ATTACHMENT_7\fP = GL_COLOR_ATTACHMENT7, \fBFBO_ATTACHMENT_8\fP = GL_COLOR_ATTACHMENT8, \fBFBO_ATTACHMENT_9\fP = GL_COLOR_ATTACHMENT9, \fBFBO_ATTACHMENT_10\fP = GL_COLOR_ATTACHMENT10, \fBFBO_ATTACHMENT_11\fP = GL_COLOR_ATTACHMENT11, \fBFBO_ATTACHMENT_12\fP = GL_COLOR_ATTACHMENT12, \fBFBO_ATTACHMENT_13\fP = GL_COLOR_ATTACHMENT13, \fBFBO_ATTACHMENT_14\fP = GL_COLOR_ATTACHMENT14, \fBFBO_ATTACHMENT_15\fP = GL_COLOR_ATTACHMENT15, \fBFBO_ATTACHMENT_DEPTH\fP = GL_DEPTH_ATTACHMENT, \fBFBO_ATTACHMENT_STENCIL\fP = GL_STENCIL_ATTACHMENT, \fBFBO_ATTACHMENT_DEPTH_STENCIL\fP = GL_DEPTH_STENCIL_ATTACHMENT }"
.br
.ti -1c
.RI "enum \fBtexture_target_t\fP : int { \fBFBO_1D_TARGET\fP = GL_TEXTURE_1D, \fBFBO_2D_TARGET\fP = GL_TEXTURE_2D, \fBFBO_2D_MS_TARGET\fP = GL_TEXTURE_2D_MULTISAMPLE, \fBFBO_2D_MS_ARRAY_TARGET\fP = GL_TEXTURE_2D_MULTISAMPLE_ARRAY, \fBFBO_RECT_TARGET\fP = GL_TEXTURE_RECTANGLE, \fBFBO_3D_TARGET\fP = GL_TEXTURE_3D, \fBFBO_POS_X_TARGET\fP = GL_TEXTURE_CUBE_MAP_POSITIVE_X, \fBFBO_NEG_X_TARGET\fP = GL_TEXTURE_CUBE_MAP_NEGATIVE_X, \fBFBO_POS_Y_TARGET\fP = GL_TEXTURE_CUBE_MAP_POSITIVE_Y, \fBFBO_NEG_Y_TARGET\fP = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, \fBFBO_POS_Z_TARGET\fP = GL_TEXTURE_CUBE_MAP_POSITIVE_Z, \fBFBO_NEG_Z_TARGET\fP = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z }"
.br
.ti -1c
.RI "enum \fBfbo_access_t\fP : unsigned { \fBFBO_ACCESS_RW\fP = GL_FRAMEBUFFER, \fBFBO_ACCESS_W\fP = GL_DRAW_FRAMEBUFFER, \fBFBO_ACCESS_R\fP = GL_READ_FRAMEBUFFER }"
.br
.ti -1c
.RI "enum \fBfbo_status_t\fP : int { \fBFBO_COMPLETE\fP = GL_FRAMEBUFFER_COMPLETE, \fBFBO_UNDEFINED\fP = GL_FRAMEBUFFER_UNDEFINED, \fBFBO_INCOMPLETE_ATTACHMENT\fP = GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT, \fBFBO_INCOMPLETE_MISSING_ATTACHMENT\fP = GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT, \fBFBO_INCOMPLETE_DRAW_BUFFER\fP = GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER, \fBFBO_INCOMPLETE_READ_BUFFER\fP = GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER, \fBFBO_UNSUPPORTED\fP = GL_FRAMEBUFFER_UNSUPPORTED, \fBFBO_INCOMPLETE_MULTISAMPLE\fP = GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE, \fBFBO_INCOMPLETE_LAYER_TARGETS\fP = GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS }"
.br
.ti -1c
.RI "enum \fBfbo_mask_t\fP : int { \fBFBO_DEPTH_BIT\fP = GL_DEPTH_BUFFER_BIT, \fBFBO_STENCIL_BIT\fP = GL_STENCIL_BUFFER_BIT, \fBFBO_COLOR_BIT\fP = GL_COLOR_BUFFER_BIT }"
.br
.ti -1c
.RI "enum \fBimg_file_t\fP { \fBimg_file_t::IMG_FILE_BMP\fP, \fBimg_file_t::IMG_FILE_EXR\fP, \fBimg_file_t::IMG_FILE_GIF\fP, \fBimg_file_t::IMG_FILE_HDR\fP, \fBimg_file_t::IMG_FILE_ICO\fP, \fBimg_file_t::IMG_FILE_JPG\fP, \fBimg_file_t::IMG_FILE_J2K\fP, \fBimg_file_t::IMG_FILE_PNG\fP, \fBimg_file_t::IMG_FILE_PPM\fP, \fBimg_file_t::IMG_FILE_TGA\fP, \fBimg_file_t::IMG_FILE_TIF\fP, \fBimg_file_t::IMG_FILE_WBP\fP, \fBimg_file_t::IMG_FILE_XPM\fP }"
.br
.ti -1c
.RI "enum \fBmatrix_use_t\fP : unsigned { \fBMATRIX_USE_INVALID\fP = (unsigned)-1, \fBMATRIX_USE_PROJECTION\fP = 0, \fBMATRIX_USE_VIEW\fP = 1, \fBMATRIX_USE_MODEL\fP = 2, \fBMATRIX_USE_MAX\fP = 3 }"
.br
.ti -1c
.RI "enum \fBmesh_property_t\fP : int { \fBMESH_VERTS_PER_GLYPH\fP = 6, \fBMESH_SPACES_PER_TAB\fP = 4 }"
.br
.RI "\fIMesh Properties\&. \fP"
.ti -1c
.RI "enum \fBdraw_mode_t\fP : int { \fBDRAW_MODE_POINTS\fP = GL_POINTS, \fBDRAW_MODE_LINE_STRIP\fP = GL_LINE_STRIP, \fBDRAW_MODE_LINE_LOOP\fP = GL_LINE_LOOP, \fBDRAW_MODE_LINES\fP = GL_LINES, \fBDRAW_MODE_LINE_STRIP_ADJACENCY\fP = GL_LINE_STRIP_ADJACENCY, \fBDRAW_MODE_LINES_ADJACENCY\fP = GL_LINES_ADJACENCY, \fBDRAW_MODE_TRI_STRIP\fP = GL_TRIANGLE_STRIP, \fBDRAW_MODE_TRI_FAN\fP = GL_TRIANGLE_FAN, \fBDRAW_MODE_TRIS\fP = GL_TRIANGLES, \fBDRAW_MODE_TRI_STRIP_ADJACENCY\fP = GL_TRIANGLE_STRIP_ADJACENCY, \fBDRAW_MODE_TRIS_ADJACENCY\fP = GL_TRIANGLES_ADJACENCY, \fBDRAW_MODE_DEFAULT\fP = DRAW_MODE_TRIS }"
.br
.ti -1c
.RI "enum \fBwinding_order_t\fP : int { \fBWINDING_ORDER_CW\fP = GL_CW, \fBWINDING_ORDER_CCW\fP = GL_CCW, \fBWINDING_ORDER_DEFAULT\fP = GL_CCW }"
.br
.RI "\fIWinding order for polygons\&. This also helps determine which faces won't be rendered if face culling is 
.SS "enabled\&. "
\fP"
.ti -1c
.RI "enum \fBface_cull_t\fP : int { \fBFACE_CULL\fP = GL_CULL_FACE, \fBFACE_CULL_FRONT\fP = GL_FRONT, \fBFACE_CULL_BACK\fP = GL_BACK }"
.br
.ti -1c
.RI "enum \fBrender_test_t\fP : int { \fBRENDER_TEST_DEPTH\fP = GL_DEPTH_TEST, \fBRENDER_TEST_STENCIL\fP = GL_STENCIL_TEST }"
.br
.ti -1c
.RI "enum \fBshader_stage_t\fP : unsigned { \fBSHADER_STAGE_VERTEX\fP = GL_VERTEX_SHADER, \fBSHADER_STAGE_GEOMETRY\fP = GL_GEOMETRY_SHADER, \fBSHADER_STAGE_FRAGMENT\fP = GL_FRAGMENT_SHADER }"
.br
.ti -1c
.RI "enum \fBls_tex_param_t\fP : int { \fBLS_TEX_INVALID\fP = -1, \fBLS_TEX_WIDTH\fP = GL_TEXTURE_WIDTH, \fBLS_TEX_HEIGHT\fP = GL_TEXTURE_HEIGHT, \fBLS_TEX_DEPTH\fP = GL_TEXTURE_DEPTH, \fBLS_TEX_MIN_FILTER\fP = GL_TEXTURE_MIN_FILTER, \fBLS_TEX_MAG_FILTER\fP = GL_TEXTURE_MAG_FILTER, \fBLS_TEX_WRAP_S\fP = GL_TEXTURE_WRAP_S, \fBLS_TEX_WRAP_T\fP = GL_TEXTURE_WRAP_T, \fBLS_TEX_WRAP_R\fP = GL_TEXTURE_WRAP_R, \fBLS_TEX_CLAMP_EDGE\fP = GL_CLAMP_TO_EDGE, \fBLS_TEX_CLAMP_BORDER\fP = GL_CLAMP_TO_BORDER, \fBLS_TEX_REPEAT\fP = GL_REPEAT }"
.br
.ti -1c
.RI "enum \fBls_tex_filter_t\fP : int { \fBLS_FILTER_LINEAR\fP = GL_LINEAR, \fBLS_FILTER_NEAREST\fP = GL_NEAREST, \fBLS_FILTER_LINEAR_NEAREST\fP = GL_LINEAR_MIPMAP_NEAREST, \fBLS_FILTER_NEAREST_NEAREST\fP = GL_NEAREST_MIPMAP_NEAREST, \fBLS_FILTER_LINEAR_LINEAR\fP = GL_LINEAR_MIPMAP_LINEAR, \fBLS_FILTER_NEAREST_LINEAR\fP = GL_NEAREST_MIPMAP_LINEAR }"
.br
.ti -1c
.RI "enum \fBls_tex_desc_t\fP : int { \fBLS_TEX_1D\fP = GL_TEXTURE_1D, \fBLS_TEX_2D\fP = GL_TEXTURE_2D, \fBLS_TEX_3D\fP = GL_TEXTURE_3D, \fBLS_TEX_RECT\fP = GL_TEXTURE_RECTANGLE }"
.br
.ti -1c
.RI "enum \fBvertex_attrib_t\fP { \fBVERTEX_ATTRIB_POS\fP = 0, \fBVERTEX_ATTRIB_TEX\fP = 1, \fBVERTEX_ATTRIB_NORM\fP = 2, \fBVERTEX_ATTRIB_MAT_ROW\fP = 3, \fBVERTEX_ATTRIB_MAT_ROW0\fP = 3, \fBVERTEX_ATTRIB_MAT_ROW1\fP = 4, \fBVERTEX_ATTRIB_MAT_ROW2\fP = 5, \fBVERTEX_ATTRIB_MAT_ROW3\fP = 6 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBLS_DECLARE_CLASS_TYPE\fP (vertexBuffer, \fBbufferObject\fP, \fBLS_ARRAY_BUFFER\fP)"
.br
.ti -1c
.RI "\fBLS_DECLARE_CLASS_TYPE\fP (indexBuffer, \fBbufferObject\fP, \fBLS_ELEMENT_BUFFER\fP)"
.br
.ti -1c
.RI "\fBLS_DECLARE_CLASS_TYPE\fP (uvBuffer, \fBbufferObject\fP, \fBLS_ARRAY_BUFFER\fP)"
.br
.ti -1c
.RI "\fBLS_DECLARE_CLASS_TYPE\fP (colorBuffer, \fBbufferObject\fP, \fBLS_ARRAY_BUFFER\fP)"
.br
.ti -1c
.RI "void \fBlsPrintGlError\fP (int, const char *)"
.br
.ti -1c
.RI "\fBLS_DECLARE_CLASS_TYPE\fP (vertexShader, \fBshaderObject\fP, \fBSHADER_STAGE_VERTEX\fP)"
.br
.ti -1c
.RI "\fBLS_DECLARE_CLASS_TYPE\fP (geometryShader, \fBshaderObject\fP, \fBSHADER_STAGE_GEOMETRY\fP)"
.br
.ti -1c
.RI "\fBLS_DECLARE_CLASS_TYPE\fP (fragmentShader, \fBshaderObject\fP, \fBSHADER_STAGE_FRAGMENT\fP)"
.br
.ti -1c
.RI "\fBLS_DEFINE_CLASS_TYPE\fP (\fBbufferObject\fP, \fBLS_ARRAY_BUFFER\fP)"
.br
.ti -1c
.RI "\fBLS_DEFINE_CLASS_TYPE\fP (\fBbufferObject\fP, \fBLS_ELEMENT_BUFFER\fP)"
.br
.ti -1c
.RI "void \fBprintWindowFlags\fP (uint32_t flags)"
.br
.ti -1c
.RI "void \fBcopyGlyph\fP (\fBglyph\fP &pGlyph, const FT_GlyphSlot ftGlyph)"
.br
.ti -1c
.RI "void \fBprintImageLoadError\fP (FREE_IMAGE_FORMAT, const char *)"
.br
.ti -1c
.RI "FREE_IMAGE_FORMAT \fBdeduceImageFormat\fP (const std::string &filename)"
.br
.ti -1c
.RI "int \fBgetImageFlags\fP (FREE_IMAGE_FORMAT inFormat)"
.br
.ti -1c
.RI "\fBcolor_type_t\fP \fBgetBitmapSize\fP (FIBITMAP *pImg)"
.br
.ti -1c
.RI "void \fBgetPixelFormat\fP (FIBITMAP *pImg, unsigned bpp, \fBpixel_format_t\fP &intFmt, \fBpixel_layout_t\fP &extFmt)"
.br
.ti -1c
.RI "unsigned \fBgetDrawableCharCount\fP (const char *const str)"
.br
.ti -1c
.RI "\fBLS_DEFINE_CLASS_TYPE\fP (\fBshaderObject\fP, \fBSHADER_STAGE_VERTEX\fP)"
.br
.ti -1c
.RI "\fBLS_DEFINE_CLASS_TYPE\fP (\fBshaderObject\fP, \fBSHADER_STAGE_GEOMETRY\fP)"
.br
.ti -1c
.RI "\fBLS_DEFINE_CLASS_TYPE\fP (\fBshaderObject\fP, \fBSHADER_STAGE_FRAGMENT\fP)"
.br
.ti -1c
.RI "bool \fBgetGpuHandle\fP (unsigned &texId)"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef std::deque<\fBatlas\fP*> \fBls::draw::atlasList\fP"

.PP
Definition at line 37 of file sceneManager\&.h\&.
.SS "typedef \fBcolorf\fP \fBls::draw::color\fP"

.PP
Definition at line 131 of file color\&.h\&.
.SS "typedef \fBmath::vec4_t\fP<float> \fBls::draw::colorf\fP"

.PP
Definition at line 129 of file color\&.h\&.
.SS "typedef \fBmath::vec4_t\fP<unsigned char> \fBls::draw::colorub\fP"

.PP
Definition at line 126 of file color\&.h\&.
.SS "typedef \fBmath::vec4_t\fP<unsigned int> \fBls::draw::colorui\fP"

.PP
Definition at line 128 of file color\&.h\&.
.SS "typedef \fBmath::vec4_t\fP<unsigned short> \fBls::draw::colorus\fP"

.PP
Definition at line 127 of file color\&.h\&.
.SS "typedef std::deque<\fBmeshModel\fP*> \fBls::draw::drawList\fP"

.PP
Definition at line 35 of file sceneManager\&.h\&.
.SS "typedef std::deque<\fBmesh\fP*> \fBls::draw::meshList\fP"

.PP
Definition at line 34 of file sceneManager\&.h\&.
.SS "typedef std::deque<\fBtexture\fP*> \fBls::draw::textureList\fP"

.PP
Definition at line 36 of file sceneManager\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum : int"
Blending equations that can be used when rendering\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILS_BLEND \fP\fP
.PP
Definition at line 25 of file blendObject\&.h\&.
.SS "enum \fBls::draw::blend_color_t\fP : int"
Blending colors 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILS_BLEND_COLOR \fP\fP
.PP
Definition at line 32 of file blendObject\&.h\&.
.SS "enum \fBls::draw::blend_equ_color_t\fP : int"
Blending Equation Color 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILS_BLEND_EQUATION_RGB \fP\fP
.TP
\fB\fILS_BLEND_EQUATION_ALPHA \fP\fP
.PP
Definition at line 51 of file blendObject\&.h\&.
.SS "enum \fBls::draw::blend_equ_t\fP : int"
Blending equations 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILS_BLEND_ADD \fP\fP
.TP
\fB\fILS_BLEND_SUB \fP\fP
.TP
\fB\fILS_BLEND_REV_SUB \fP\fP
.TP
\fB\fILS_BLEND_MIN \fP\fP
.TP
\fB\fILS_BLEND_MAX \fP\fP
.TP
\fB\fILS_DEFAULT_BLEND_EQU \fP\fP
.PP
Definition at line 39 of file blendObject\&.h\&.
.SS "enum \fBls::draw::blend_func_color_t\fP : int"
Blending Function Color 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILS_BLEND_SRC_RGB \fP\fP
.TP
\fB\fILS_BLEND_DST_RGB \fP\fP
.TP
\fB\fILS_BLEND_SRC_ALPHA \fP\fP
.TP
\fB\fILS_BLEND_DST_ALPHA \fP\fP
.PP
Definition at line 80 of file blendObject\&.h\&.
.SS "enum \fBls::draw::blend_func_t\fP : int"
Blend functions which help determine the type of blending that's applied to a renderable object\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILS_ZERO \fP\fP
.TP
\fB\fILS_ONE \fP\fP
.TP
\fB\fILS_SRC_COLOR \fP\fP
.TP
\fB\fILS_ONE_MINUS_SRC_COLOR \fP\fP
.TP
\fB\fILS_DST_COLOR \fP\fP
.TP
\fB\fILS_ONE_MINUS_DST_COLOR \fP\fP
.TP
\fB\fILS_SRC_ALPHA \fP\fP
.TP
\fB\fILS_ONE_MINUS_SRC_ALPHA \fP\fP
.TP
\fB\fILS_DST_ALPHA \fP\fP
.TP
\fB\fILS_ONE_MINUS_DST_ALPHA \fP\fP
.TP
\fB\fILS_CONST_COLOR \fP\fP
.TP
\fB\fILS_ONE_MINUS_CONST_COLOR \fP\fP
.TP
\fB\fILS_CONST_ALPHA \fP\fP
.TP
\fB\fILS_ONE_MINUS_CONST_ALPHA \fP\fP
.PP
Definition at line 60 of file blendObject\&.h\&.
.SS "enum \fBls::draw::buffer_access_t\fP : GLbitfield"
Memory mapping bit flags used for DMA transfers between CPU and GPU memory\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILS_MAP_READ_BIT \fP\fP
.TP
\fB\fILS_MAP_WRITE_BIT \fP\fP
.TP
\fB\fILS_MAP_INVALIDATE_RANGE_BIT \fP\fP
.TP
\fB\fILS_MAP_INVALIDATE_BUFFER_BIT \fP\fP
.TP
\fB\fILS_MAP_FLUSH_EXPLICIT_BIT \fP\fP
.TP
\fB\fILS_MAP_UNSYNCHRONIZED_BIT \fP\fP
.TP
\fB\fILS_MAP_PERSISTENT_BIT \fP\fP
.TP
\fB\fILS_MAP_COHERENT_BIT \fP\fP
.PP
Definition at line 53 of file bufferObject\&.h\&.
.SS "enum \fBls::draw::buffer_t\fP : GLenum"
This enumeration outlines the basic types of buffers are available for use in a render context\&. It will be updated as more features are written\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILS_ARRAY_BUFFER \fP\fP
.TP
\fB\fILS_ELEMENT_BUFFER \fP\fP
.TP
\fB\fILS_TEXTURE_BUFFER \fP\fP
.TP
\fB\fILS_TRANSFORM_FEEDBACK_BUFFER \fP\fP
.TP
\fB\fILS_UNIFORM_BUFFER \fP\fP
.PP
Definition at line 25 of file bufferObject\&.h\&.
.SS "enum \fBls::draw::buffer_usage_t\fP : GLenum"
Different usage parameters that determine how a buffer may be used\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILS_STATIC_READ \fP\fP
.TP
\fB\fILS_STATIC_DRAW \fP\fP
.TP
\fB\fILS_STATIC_COPY \fP\fP
.TP
\fB\fILS_STREAM_READ \fP\fP
.TP
\fB\fILS_STREAM_DRAW \fP\fP
.TP
\fB\fILS_STREAM_COPY \fP\fP
.TP
\fB\fILS_DYNAMIC_READ \fP\fP
.TP
\fB\fILS_DYNAMIC_DRAW \fP\fP
.TP
\fB\fILS_DYNAMIC_COPY \fP\fP
.PP
Definition at line 36 of file bufferObject\&.h\&.
.SS "enum \fBls::draw::color_type_t\fP : int"

.PP
Framebuffer/Texture data types\&. These enumerations are used to specify the basic data type each pixel of a texture or framebuffer\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fICOLOR_TYPE_BYTE \fP\fP
.TP
\fB\fICOLOR_TYPE_SHORT \fP\fP
.TP
\fB\fICOLOR_TYPE_INT \fP\fP
.TP
\fB\fICOLOR_TYPE_FLOAT \fP\fP
.TP
\fB\fICOLOR_TYPE_DOUBLE \fP\fP
.TP
\fB\fICOLOR_TYPE_UNSIGNED_BYTE \fP\fP
.TP
\fB\fICOLOR_TYPE_UNSIGNED_SHORT \fP\fP
.TP
\fB\fICOLOR_TYPE_UNSIGNED_INT \fP\fP
.TP
\fB\fICOLOR_TYPE_DEFAULT \fP\fP
.TP
\fB\fICOLOR_TYPE_INVALID \fP\fP
.PP
Definition at line 27 of file color\&.h\&.
.SS "enum \fBls::draw::compare_func_t\fP : int"

.PP
Depth Comparison Operations\&. 
.PP
 These can be sent to OpenGL in order to determine how to compare the depth 
.SS "of rasterized fragments\&. "

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILS_DEPTH_ALWAYS \fP\fP
.TP
\fB\fILS_DEPTH_NEVER \fP\fP
.TP
\fB\fILS_DEPTH_LESS \fP\fP
.TP
\fB\fILS_DEPTH_EQUAL \fP\fP
.TP
\fB\fILS_DEPTH_LEQUAL \fP\fP
.TP
\fB\fILS_DEPTH_GEQUAL \fP\fP
.TP
\fB\fILS_DEPTH_NEQUAL \fP\fP
.PP
Definition at line 25 of file depthObject\&.h\&.
.SS "enum \fBls::draw::draw_mode_t\fP : int"

.PP
 
.SS "Draw modes for renderable types\&. "

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIDRAW_MODE_POINTS \fP\fP
.TP
\fB\fIDRAW_MODE_LINE_STRIP \fP\fP
.TP
\fB\fIDRAW_MODE_LINE_LOOP \fP\fP
.TP
\fB\fIDRAW_MODE_LINES \fP\fP
.TP
\fB\fIDRAW_MODE_LINE_STRIP_ADJACENCY \fP\fP
.TP
\fB\fIDRAW_MODE_LINES_ADJACENCY \fP\fP
.TP
\fB\fIDRAW_MODE_TRI_STRIP \fP\fP
.TP
\fB\fIDRAW_MODE_TRI_FAN \fP\fP
.TP
\fB\fIDRAW_MODE_TRIS \fP\fP
.TP
\fB\fIDRAW_MODE_TRI_STRIP_ADJACENCY \fP\fP
.TP
\fB\fIDRAW_MODE_TRIS_ADJACENCY \fP\fP
.TP
\fB\fIDRAW_MODE_DEFAULT \fP\fP
.PP
Definition at line 23 of file renderer\&.h\&.
.SS "enum \fBls::draw::face_cull_t\fP : int"

.PP
 
.SS "Face culling modes for polygons\&. "

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFACE_CULL \fP\fP
.TP
\fB\fIFACE_CULL_FRONT \fP\fP
.TP
\fB\fIFACE_CULL_BACK \fP\fP
.PP
Definition at line 54 of file renderer\&.h\&.
.SS "enum \fBls::draw::fbo_access_t\fP : unsigned"

.PP
 
.SS "Draw/Read access control for framebuffer objects\&. "

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFBO_ACCESS_RW \fP\fP
.TP
\fB\fIFBO_ACCESS_W \fP\fP
.TP
\fB\fIFBO_ACCESS_R \fP\fP
.PP
Definition at line 69 of file framebuffer\&.h\&.
.SS "enum \fBls::draw::fbo_attach_t\fP : int"

.PP
 
.SS "Draw buffers for fbo render targets "

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFBO_ATTACHMENT_0 \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_1 \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_2 \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_3 \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_4 \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_5 \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_6 \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_7 \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_8 \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_9 \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_10 \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_11 \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_12 \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_13 \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_14 \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_15 \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_DEPTH \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_STENCIL \fP\fP
.TP
\fB\fIFBO_ATTACHMENT_DEPTH_STENCIL \fP\fP
.PP
Definition at line 22 of file framebuffer\&.h\&.
.SS "enum \fBls::draw::fbo_mask_t\fP : int"

.PP
 Bitmasks that can help determine what aspects of a framebuffer should be 
.SS "modified during read/draw calls\&. "

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFBO_DEPTH_BIT \fP\fP
.TP
\fB\fIFBO_STENCIL_BIT \fP\fP
.TP
\fB\fIFBO_COLOR_BIT \fP\fP
.PP
Definition at line 94 of file framebuffer\&.h\&.
.SS "enum \fBls::draw::fbo_status_t\fP : int"

.PP
 
.SS "Framebuffer status codes "

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFBO_COMPLETE \fP\fP
.TP
\fB\fIFBO_UNDEFINED \fP\fP
.TP
\fB\fIFBO_INCOMPLETE_ATTACHMENT \fP\fP
.TP
\fB\fIFBO_INCOMPLETE_MISSING_ATTACHMENT \fP\fP
.TP
\fB\fIFBO_INCOMPLETE_DRAW_BUFFER \fP\fP
.TP
\fB\fIFBO_INCOMPLETE_READ_BUFFER \fP\fP
.TP
\fB\fIFBO_UNSUPPORTED \fP\fP
.TP
\fB\fIFBO_INCOMPLETE_MULTISAMPLE \fP\fP
.TP
\fB\fIFBO_INCOMPLETE_LAYER_TARGETS \fP\fP
.PP
Definition at line 78 of file framebuffer\&.h\&.
.SS "enum \fBls::draw::fullscreen_t\fP : int"

.PP
Full-Screen Flags\&. 
.PP
 These flags can be used to determine the full-screen mode of a display 
.SS "object\&. "

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFULLSCREEN_DISPLAY \fP\fP
Display in standard fullscreen 
.TP
\fB\fIFULLSCREEN_WINDOW \fP\fP
Display a borderless window at the current display's full resolution\&. 
.TP
\fB\fIFULLSCREEN_DEFAULT \fP\fP
Default Full-Screen mode\&. Currently uses a standard full-screen mode\&. 
.PP
Definition at line 27 of file display\&.h\&.
.SS "enum \fBls::draw::img_file_t\fP\fC [strong]\fP"

.PP
 
.SS "Enumerations for saving image files\&. "

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIIMG_FILE_BMP \fP\fP
.TP
\fB\fIIMG_FILE_EXR \fP\fP
.TP
\fB\fIIMG_FILE_GIF \fP\fP
.TP
\fB\fIIMG_FILE_HDR \fP\fP
.TP
\fB\fIIMG_FILE_ICO \fP\fP
.TP
\fB\fIIMG_FILE_JPG \fP\fP
.TP
\fB\fIIMG_FILE_J2K \fP\fP
.TP
\fB\fIIMG_FILE_PNG \fP\fP
.TP
\fB\fIIMG_FILE_PPM \fP\fP
.TP
\fB\fIIMG_FILE_TGA \fP\fP
.TP
\fB\fIIMG_FILE_TIF \fP\fP
.TP
\fB\fIIMG_FILE_WBP \fP\fP
.TP
\fB\fIIMG_FILE_XPM \fP\fP
.PP
Definition at line 23 of file imageResource\&.h\&.
.SS "enum \fBls::draw::ls_tex_desc_t\fP : int"

.PP
 
.SS "Descriptors for different texture types "

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILS_TEX_1D \fP\fP
.TP
\fB\fILS_TEX_2D \fP\fP
.TP
\fB\fILS_TEX_3D \fP\fP
.TP
\fB\fILS_TEX_RECT \fP\fP
.PP
Definition at line 59 of file texture\&.h\&.
.SS "enum \fBls::draw::ls_tex_filter_t\fP : int"

.PP
 
.SS "Framebuffer filtering specifiers "

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILS_FILTER_LINEAR \fP\fP
.TP
\fB\fILS_FILTER_NEAREST \fP\fP
.TP
\fB\fILS_FILTER_LINEAR_NEAREST \fP\fP
.TP
\fB\fILS_FILTER_NEAREST_NEAREST \fP\fP
.TP
\fB\fILS_FILTER_LINEAR_LINEAR \fP\fP
.TP
\fB\fILS_FILTER_NEAREST_LINEAR \fP\fP
.PP
Definition at line 45 of file texture\&.h\&.
.SS "enum \fBls::draw::ls_tex_param_t\fP : int"

.PP
 
.SS "Parameters for creating or modifying texture objects\&. "

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILS_TEX_INVALID \fP\fP
.TP
\fB\fILS_TEX_WIDTH \fP\fP
.TP
\fB\fILS_TEX_HEIGHT \fP\fP
.TP
\fB\fILS_TEX_DEPTH \fP\fP
.TP
\fB\fILS_TEX_MIN_FILTER \fP\fP
.TP
\fB\fILS_TEX_MAG_FILTER \fP\fP
.TP
\fB\fILS_TEX_WRAP_S \fP\fP
.TP
\fB\fILS_TEX_WRAP_T \fP\fP
.TP
\fB\fILS_TEX_WRAP_R \fP\fP
.TP
\fB\fILS_TEX_CLAMP_EDGE \fP\fP
.TP
\fB\fILS_TEX_CLAMP_BORDER \fP\fP
.TP
\fB\fILS_TEX_REPEAT \fP\fP
.PP
Definition at line 23 of file texture\&.h\&.
.SS "enum \fBls::draw::matrix_use_t\fP : unsigned"

.PP
 
.SS "Enumeration to facilitate matrix manipulations within the matrix stack\&. "

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMATRIX_USE_INVALID \fP\fP
.TP
\fB\fIMATRIX_USE_PROJECTION \fP\fP
.TP
\fB\fIMATRIX_USE_VIEW \fP\fP
.TP
\fB\fIMATRIX_USE_MODEL \fP\fP
.TP
\fB\fIMATRIX_USE_MAX \fP\fP
.PP
Definition at line 21 of file matrixStack\&.h\&.
.SS "enum \fBls::draw::mesh_property_t\fP : int"

.PP
Mesh Properties\&. 
.PP
 These enumerations contains properties for different types of mesh objects\&. These constants used within contain vital information that's used within the 
.SS "mesh object's implementation\&. "

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMESH_VERTS_PER_GLYPH \fP\fP
.TP
\fB\fIMESH_SPACES_PER_TAB \fP\fP
.PP
Definition at line 34 of file mesh\&.h\&.
.SS "enum \fBls::draw::pixel_format_t\fP : int"

.PP
CPU-Side pixel formats\&. OpenGL refers to these types as the 'internalFormat' parameter in functions such as 'glRenderbufferStorage()' and 'glTexImage()' 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILS_GRAY_8 \fP\fP
.TP
\fB\fILS_R_8 \fP\fP
.TP
\fB\fILS_RG_8 \fP\fP
.TP
\fB\fILS_RGB_8 \fP\fP
.TP
\fB\fILS_RGBA_8 \fP\fP
.TP
\fB\fILS_GRAY_16I \fP\fP
.TP
\fB\fILS_R_16I \fP\fP
.TP
\fB\fILS_RG_16I \fP\fP
.TP
\fB\fILS_RGB_16I \fP\fP
.TP
\fB\fILS_RGBA_16I \fP\fP
.TP
\fB\fILS_GRAY_16U \fP\fP
.TP
\fB\fILS_R_16U \fP\fP
.TP
\fB\fILS_RG_16U \fP\fP
.TP
\fB\fILS_RGB_16U \fP\fP
.TP
\fB\fILS_RGBA_16U \fP\fP
.TP
\fB\fILS_GRAY_32I \fP\fP
.TP
\fB\fILS_R_32I \fP\fP
.TP
\fB\fILS_RG_32I \fP\fP
.TP
\fB\fILS_RGB_32I \fP\fP
.TP
\fB\fILS_RGBA_32I \fP\fP
.TP
\fB\fILS_GRAY_32U \fP\fP
.TP
\fB\fILS_R_32U \fP\fP
.TP
\fB\fILS_RG_32U \fP\fP
.TP
\fB\fILS_RGB_32U \fP\fP
.TP
\fB\fILS_RGBA_32U \fP\fP
.TP
\fB\fILS_GRAY_16F \fP\fP
.TP
\fB\fILS_R_8F \fP\fP
.TP
\fB\fILS_RG_16F \fP\fP
.TP
\fB\fILS_RGB_16F \fP\fP
.TP
\fB\fILS_RGBA_16F \fP\fP
.TP
\fB\fILS_GRAY_32F \fP\fP
.TP
\fB\fILS_R_32F \fP\fP
.TP
\fB\fILS_RG_32F \fP\fP
.TP
\fB\fILS_RGB_32F \fP\fP
.TP
\fB\fILS_RGBA_32F \fP\fP
.TP
\fB\fILS_SRGB \fP\fP
.TP
\fB\fILS_SRGB_8 \fP\fP
.TP
\fB\fILS_SRGBA \fP\fP
.TP
\fB\fILS_SRGBA_8 \fP\fP
.TP
\fB\fILS_R_C \fP\fP
.TP
\fB\fILS_RG_C \fP\fP
.TP
\fB\fILS_RGB_C \fP\fP
.TP
\fB\fILS_RGBA_C \fP\fP
.TP
\fB\fILS_DEFAULT_PIXEL_FORMAT \fP\fP
.TP
\fB\fILS_INVALID_PIXEL_FORMAT \fP\fP
.PP
Definition at line 66 of file color\&.h\&.
.SS "enum \fBls::draw::pixel_layout_t\fP : int"

.PP
GPU-side pixel formats\&. OpenGL refers to these as the 'format' parameter when using operations such as 'glTexImage()\&.' 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILS_GRAY \fP\fP
.TP
\fB\fILS_R \fP\fP
.TP
\fB\fILS_RG \fP\fP
.TP
\fB\fILS_RGB \fP\fP
.TP
\fB\fILS_RGBA \fP\fP
.TP
\fB\fILS_DEFAULT_PIXEL_LAYOUT \fP\fP
.TP
\fB\fILS_INVALID_PIXEL_LAYOUT \fP\fP
.PP
Definition at line 49 of file color\&.h\&.
.SS "enum \fBls::draw::render_test_t\fP : int"
Display tests 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIRENDER_TEST_DEPTH \fP\fP
.TP
\fB\fIRENDER_TEST_STENCIL \fP\fP
.PP
Definition at line 63 of file renderer\&.h\&.
.SS "enum \fBls::draw::shader_stage_t\fP : unsigned"

.PP
 
.SS "Enumeration to determine the type of shader that should be created on the GPU "

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISHADER_STAGE_VERTEX \fP\fP
.TP
\fB\fISHADER_STAGE_GEOMETRY \fP\fP
.TP
\fB\fISHADER_STAGE_FRAGMENT \fP\fP
.PP
Definition at line 22 of file shaderObject\&.h\&.
.SS "enum \fBls::draw::texture_target_t\fP : int"

.PP
 
.SS "Texture targets that can be bound to an FBO "

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFBO_1D_TARGET \fP\fP
.TP
\fB\fIFBO_2D_TARGET \fP\fP
.TP
\fB\fIFBO_2D_MS_TARGET \fP\fP
.TP
\fB\fIFBO_2D_MS_ARRAY_TARGET \fP\fP
.TP
\fB\fIFBO_RECT_TARGET \fP\fP
.TP
\fB\fIFBO_3D_TARGET \fP\fP
.TP
\fB\fIFBO_POS_X_TARGET \fP\fP
.TP
\fB\fIFBO_NEG_X_TARGET \fP\fP
.TP
\fB\fIFBO_POS_Y_TARGET \fP\fP
.TP
\fB\fIFBO_NEG_Y_TARGET \fP\fP
.TP
\fB\fIFBO_POS_Z_TARGET \fP\fP
.TP
\fB\fIFBO_NEG_Z_TARGET \fP\fP
.PP
Definition at line 48 of file framebuffer\&.h\&.
.SS "enum \fBls::draw::vertex_attrib_t\fP"
These enumerations can be used to describe vertex layouts to VAO objects\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIVERTEX_ATTRIB_POS \fP\fP
.TP
\fB\fIVERTEX_ATTRIB_TEX \fP\fP
.TP
\fB\fIVERTEX_ATTRIB_NORM \fP\fP
.TP
\fB\fIVERTEX_ATTRIB_MAT_ROW \fP\fP
.TP
\fB\fIVERTEX_ATTRIB_MAT_ROW0 \fP\fP
.TP
\fB\fIVERTEX_ATTRIB_MAT_ROW1 \fP\fP
.TP
\fB\fIVERTEX_ATTRIB_MAT_ROW2 \fP\fP
.TP
\fB\fIVERTEX_ATTRIB_MAT_ROW3 \fP\fP
.PP
Definition at line 35 of file vertex\&.h\&.
.SS "enum \fBls::draw::winding_order_t\fP : int"

.PP
Winding order for polygons\&. This also helps determine which faces won't be rendered if face culling is 
.SS "enabled\&. "

.PP
 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIWINDING_ORDER_CW \fP\fP
.TP
\fB\fIWINDING_ORDER_CCW \fP\fP
.TP
\fB\fIWINDING_ORDER_DEFAULT \fP\fP
.PP
Definition at line 45 of file renderer\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void ls::draw::copyGlyph (glyph &pGlyph, const FT_GlyphSlotftGlyph)"

.PP
 
.SS "Helper function to load a glyph "

.PP
Definition at line 42 of file fontResource\&.cpp\&.
.SS "FREE_IMAGE_FORMAT ls::draw::deduceImageFormat (const std::string &filename)"

.PP
Definition at line 40 of file imageResource\&.cpp\&.
.SS "\fBcolor_type_t\fP ls::draw::getBitmapSize (FIBITMAP *pImg)"

.PP
Definition at line 63 of file imageResource\&.cpp\&.
.SS "unsigned ls::draw::getDrawableCharCount (const char *conststr)"

.PP
Definition at line 23 of file mesh\&.cpp\&.
.SS "bool ls::draw::getGpuHandle (unsigned &texId)"
Simple helper function that can help reduce a few lines of code during texture initialization\&.
.PP
\fBReturns:\fP
.RS 4
TRUE if the texture was created properly, FALSE if not\&. 
.RE
.PP

.PP
Definition at line 22 of file texture\&.cpp\&.
.SS "int ls::draw::getImageFlags (FREE_IMAGE_FORMATinFormat)"

.PP
Definition at line 51 of file imageResource\&.cpp\&.
.SS "void ls::draw::getPixelFormat (FIBITMAP *pImg, unsignedbpp, pixel_format_t &intFmt, pixel_layout_t &extFmt)"

.PP
Definition at line 122 of file imageResource\&.cpp\&.
.SS "ls::draw::LS_DECLARE_CLASS_TYPE (vertexShader, shaderObject, SHADER_STAGE_VERTEX)"

.SS "ls::draw::LS_DECLARE_CLASS_TYPE (geometryShader, shaderObject, SHADER_STAGE_GEOMETRY)"

.SS "ls::draw::LS_DECLARE_CLASS_TYPE (fragmentShader, shaderObject, SHADER_STAGE_FRAGMENT)"

.SS "ls::draw::LS_DECLARE_CLASS_TYPE (vertexBuffer, bufferObject, LS_ARRAY_BUFFER)"

.SS "ls::draw::LS_DECLARE_CLASS_TYPE (indexBuffer, bufferObject, LS_ELEMENT_BUFFER)"

.SS "ls::draw::LS_DECLARE_CLASS_TYPE (uvBuffer, bufferObject, LS_ARRAY_BUFFER)"

.SS "ls::draw::LS_DECLARE_CLASS_TYPE (colorBuffer, bufferObject, LS_ARRAY_BUFFER)"

.SS "ls::draw::LS_DEFINE_CLASS_TYPE (bufferObject, LS_ARRAY_BUFFER)"

.SS "ls::draw::LS_DEFINE_CLASS_TYPE (shaderObject, SHADER_STAGE_VERTEX)"

.SS "ls::draw::LS_DEFINE_CLASS_TYPE (shaderObject, SHADER_STAGE_GEOMETRY)"

.SS "ls::draw::LS_DEFINE_CLASS_TYPE (bufferObject, LS_ELEMENT_BUFFER)"

.SS "ls::draw::LS_DEFINE_CLASS_TYPE (shaderObject, SHADER_STAGE_FRAGMENT)"

.SS "void ls::draw::lsPrintGlError (int, const char *)"

.PP
Definition at line 71 of file setup\&.h\&.
.SS "void ls::draw::printImageLoadError (FREE_IMAGE_FORMAT, const char *)"

.PP
Definition at line 34 of file imageResource\&.cpp\&.
.SS "void ls::draw::printWindowFlags (uint32_tflags)"
Print SDL window flags to the console\&. This is primarily used for debugging\&.
.PP
\fBParameters:\fP
.RS 4
\fIflags\fP A bit field of difference SDL flags\&., see https://wiki.libsdl.org/ for more information\&. 
.RE
.PP

.PP
Definition at line 29 of file display\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for LightSky from the source code\&.
