.TH "ls::draw::vertexArray" 3 "Sun Oct 26 2014" "Version Pre-Alpha" "LightSky" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ls::draw::vertexArray \- 
.PP
Vertex Array Object\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vertexArray\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBvertexArray\fP ()"
.br
.RI "\fIConstructor\&. \fP"
.ti -1c
.RI "\fBvertexArray\fP (const \fBvertexArray\fP &)=delete"
.br
.RI "\fICopy Constructor - DELETED\&. \fP"
.ti -1c
.RI "\fBvertexArray\fP (\fBvertexArray\fP &&)"
.br
.RI "\fIMove Constructor\&. \fP"
.ti -1c
.RI "\fB~vertexArray\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "\fBvertexArray\fP & \fBoperator=\fP (const \fBvertexArray\fP &)=delete"
.br
.RI "\fICopy Operator - DELETED\&. \fP"
.ti -1c
.RI "\fBvertexArray\fP & \fBoperator=\fP (\fBvertexArray\fP &&)"
.br
.RI "\fIMove Operator\&. \fP"
.ti -1c
.RI "bool \fBinit\fP ()"
.br
.RI "\fIArray initialization\&. \fP"
.ti -1c
.RI "void \fBterminate\fP ()"
.br
.ti -1c
.RI "bool \fBisValid\fP () const "
.br
.ti -1c
.RI "unsigned \fBgetId\fP () const "
.br
.ti -1c
.RI "void \fBenableAttrib\fP (int index)"
.br
.ti -1c
.RI "void \fBdisableAttrib\fP (int index)"
.br
.ti -1c
.RI "void \fBsetAttribOffset\fP (unsigned index, unsigned elementsPerVert, int type, bool normalize, int vertexOffset, const void *elementOffset)"
.br
.ti -1c
.RI "void * \fBgetAttribOffset\fP (int index) const "
.br
.ti -1c
.RI "void \fBsetAttribInstanceRate\fP (int index, int instancesPerAttrib)"
.br
.ti -1c
.RI "void \fBbind\fP () const "
.br
.ti -1c
.RI "void \fBunbind\fP () const "
.br
.in -1c
.SH "Detailed Description"
.PP 
Vertex Array Object\&. 

Represents a single VAO within OpenGL\&. VAO object store the state of multiple vertex buffer object attributes into one container\&. 
.PP
Definition at line 22 of file vertexArray\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ls::draw::vertexArray::vertexArray ()"

.PP
Constructor\&. 
.PP
Definition at line 16 of file vertexArray\&.cpp\&.
.SS "ls::draw::vertexArray::vertexArray (const \fBvertexArray\fP &)\fC [delete]\fP"

.PP
Copy Constructor - DELETED\&. 
.SS "ls::draw::vertexArray::vertexArray (\fBvertexArray\fP &&va)"

.PP
Move Constructor\&. This moves the data contained within the constructor parameter into *this\&. No copies are performed\&.
.PP
\fBParameters:\fP
.RS 4
\fIva\fP A \fBvertexArray\fP object whose data will be moved into *this\&. 
.RE
.PP

.PP
Definition at line 22 of file vertexArray\&.cpp\&.
.SS "ls::draw::vertexArray::~vertexArray ()"

.PP
Destructor\&. Releases all resources used by *this\&. 
.PP
Definition at line 31 of file vertexArray\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void ls::draw::vertexArray::bind () const\fC [inline]\fP"
Bind this vertex array to the current global rendering context\&. 
.PP
Definition at line 264 of file vertexArray\&.h\&.
.SS "void ls::draw::vertexArray::disableAttrib (intindex)\fC [inline]\fP"
Disable an attribute contained in the array\&.
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP The array-index to an attribute that is to be disabled\&. 
.RE
.PP

.PP
Definition at line 226 of file vertexArray\&.h\&.
.SS "void ls::draw::vertexArray::enableAttrib (intindex)\fC [inline]\fP"
Enable an attribute contained within the vertex array\&.
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP The array-index to an attribute that is to be enabled\&. 
.RE
.PP

.PP
Definition at line 219 of file vertexArray\&.h\&.
.SS "void * ls::draw::vertexArray::getAttribOffset (intindex) const\fC [inline]\fP"
Get the byte-offset to an element in the array\&.
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP An element's index in the array\&.
.RE
.PP
\fBReturns:\fP
.RS 4
a byte-offset to the attribute requested\&. 
.RE
.PP

.PP
Definition at line 247 of file vertexArray\&.h\&.
.SS "unsigned ls::draw::vertexArray::getId () const\fC [inline]\fP"
Get the GPU-assigned ID for this VAO
.PP
\fBReturns:\fP
.RS 4
an unsigned integral type representing this VAO\&. 
.RE
.PP

.PP
Definition at line 212 of file vertexArray\&.h\&.
.SS "bool ls::draw::vertexArray::init ()"

.PP
Array initialization\&. Generates a vertex array object on the GPY that will be used to describe the memory layout of a data buffer\&.
.PP
\fBReturns:\fP
.RS 4
true if the buffer was successfully created, false if not\&. 
.RE
.PP

.PP
Definition at line 47 of file vertexArray\&.cpp\&.
.SS "bool ls::draw::vertexArray::isValid () const\fC [inline]\fP"
Determine if there is data used by this object
.PP
\fBReturns:\fP
.RS 4
true if this object has data residing on GPU memory, false if not\&. 
.RE
.PP

.PP
Definition at line 205 of file vertexArray\&.h\&.
.SS "\fBvertexArray\fP& ls::draw::vertexArray::operator= (const \fBvertexArray\fP &)\fC [delete]\fP"

.PP
Copy Operator - DELETED\&. 
.SS "\fBvertexArray\fP & ls::draw::vertexArray::operator= (\fBvertexArray\fP &&va)"

.PP
Move Operator\&. This moves the data contained within the method parameter into *this\&. No copies are performed\&.
.PP
\fBParameters:\fP
.RS 4
\fIva\fP A \fBvertexArray\fP object whose data will be moved into *this\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to *this\&. 
.RE
.PP

.PP
Definition at line 38 of file vertexArray\&.cpp\&.
.SS "void ls::draw::vertexArray::setAttribInstanceRate (intindex, intinstancesPerAttrib)\fC [inline]\fP"
Set the rate at which an attribute should repeat during instanced draw calls on the GPU\&.
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP The attribute's index within the array\&.
.br
\fIinstancesPerAttrib\fP The number of instances that should be drawn before repeating another render of the array attribute\&. 
.RE
.PP

.PP
Definition at line 257 of file vertexArray\&.h\&.
.SS "void ls::draw::vertexArray::setAttribOffset (unsignedindex, unsignedelementsPerVert, inttype, boolnormalize, intvertexOffset, const void *elementOffset)\fC [inline]\fP"
Set the memory layout/offset of an attribute in the vertex array\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP The array attribute to be modified
.br
\fIelementsPerVert\fP The number of elements contained within the vertex\&.
.br
\fItype\fP The openGL data type\&.
.br
\fInormalize\fP Should the data be normalized to a float?
.br
\fIvertexOffset\fP An offset, in bytes, between each vertex in the array\&.
.br
\fIelementOffset\fP A byte-offset from the start of each vertex\&. 
.RE
.PP

.PP
Definition at line 233 of file vertexArray\&.h\&.
.SS "void ls::draw::vertexArray::terminate ()\fC [inline]\fP"
Terminate the vertex array and release all of its resources back to the GPU\&. 
.PP
Definition at line 197 of file vertexArray\&.h\&.
.SS "void ls::draw::vertexArray::unbind () const\fC [inline]\fP"
Unbind this vertex array object from the current render context\&. 
.PP
Definition at line 271 of file vertexArray\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for LightSky from the source code\&.
