.TH "ls::game::system" 3 "Sun Oct 26 2014" "Version Pre-Alpha" "LightSky" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ls::game::system \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <system\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBsystem\fP ()"
.br
.RI "\fIConstructor\&. \fP"
.ti -1c
.RI "\fBsystem\fP (const \fBsystem\fP &)=delete"
.br
.RI "\fICopy Constructor -- DELETED\&. \fP"
.ti -1c
.RI "\fBsystem\fP (\fBsystem\fP &&sys)"
.br
.RI "\fIMove constructor\&. \fP"
.ti -1c
.RI "\fB~system\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "\fBsystem\fP & \fBoperator=\fP (const \fBsystem\fP &)=delete"
.br
.RI "\fICopy operator -- DELETED\&. \fP"
.ti -1c
.RI "\fBsystem\fP & \fBoperator=\fP (\fBsystem\fP &&sys)"
.br
.RI "\fIMove operator\&. \fP"
.ti -1c
.RI "bool \fBinit\fP (\fBls::draw::display\fP &disp, bool useVsync=true)"
.br
.RI "\fISubSystem initialization\&. \fP"
.ti -1c
.RI "void \fBterminate\fP ()"
.br
.RI "\fITerminate *this and all sub-states\&. \fP"
.ti -1c
.RI "void \fBrun\fP ()"
.br
.RI "\fIBegin a game loop\&. \fP"
.ti -1c
.RI "void \fBstop\fP ()"
.br
.RI "\fIStop\&. \fP"
.ti -1c
.RI "bool \fBpushGameState\fP (\fBgameState\fP *const pState)"
.br
.ti -1c
.RI "void \fBpopGameState\fP ()"
.br
.ti -1c
.RI "void \fBpopGameState\fP (\fBgameState\fP *const pState)"
.br
.ti -1c
.RI "void \fBpopGameState\fP (unsigned index)"
.br
.ti -1c
.RI "\fBgameState\fP const * \fBgetGameState\fP (unsigned index) const "
.br
.ti -1c
.RI "unsigned \fBgetGameStateIndex\fP (\fBgameState\fP *const pState)"
.br
.RI "\fIGet the index of a game state\&. \fP"
.ti -1c
.RI "unsigned \fBgetGameStackSize\fP () const "
.br
.ti -1c
.RI "const \fBls::draw::display\fP & \fBgetDisplay\fP () const "
.br
.ti -1c
.RI "\fBls::draw::display\fP & \fBgetDisplay\fP ()"
.br
.ti -1c
.RI "const \fBls::draw::context\fP & \fBgetContext\fP () const "
.br
.ti -1c
.RI "\fBls::draw::context\fP & \fBgetContext\fP ()"
.br
.ti -1c
.RI "const \fBls::utils::randomNum\fP & \fBgetPrng\fP () const "
.br
.ti -1c
.RI "\fBls::utils::randomNum\fP & \fBgetPrng\fP ()"
.br
.ti -1c
.RI "float \fBgetTickTime\fP () const "
.br
.ti -1c
.RI "bool \fBisRunning\fP () const "
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
 The system object commands all hardware events and passes them to any \fBgameState\fP objects that it manages\&. Game state objects are freed from memory when this object gets destroyed, therefore, all \fBgameState\fP objects managed by 
.SS "a subSystem must be created using the 'new' operator\&. "

.PP
Definition at line 31 of file system\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ls::game::system::system ()"

.PP
Constructor\&. Initializes all members in *this to their default values\&. 
.PP
Definition at line 24 of file system\&.cpp\&.
.SS "ls::game::system::system (const \fBsystem\fP &)\fC [delete]\fP"

.PP
Copy Constructor -- DELETED\&. Deleted as this would require a copy of all game states held by this object\&. 
.SS "ls::game::system::system (\fBsystem\fP &&sys)"

.PP
Move constructor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP An r-value reference to another state object who's members will be moved into *this\&. 
.RE
.PP

.PP
Definition at line 30 of file system\&.cpp\&.
.SS "ls::game::system::~system ()"

.PP
Destructor\&. The subsystem destructor will call 'terminate(),' releasing the memory of all \fBgameState\fP objects held within the gameStack\&. 
.PP
Definition at line 64 of file system\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "const \fBls::draw::context\fP & ls::game::system::getContext () const\fC [inline]\fP"
Get a constant reference to the object responsible for managing the OpenGL render context\&.
.PP
\fBReturns:\fP
.RS 4
a const reference to a \fBls::draw::context\fP object\&. 
.RE
.PP

.PP
Definition at line 29 of file system_impl\&.h\&.
.SS "\fBls::draw::context\fP & ls::game::system::getContext ()\fC [inline]\fP"
Get a reference to the object responsible for managing the OpenGL render context\&.
.PP
\fBReturns:\fP
.RS 4
a reference to an \fBls::draw::context\fP object\&. 
.RE
.PP

.PP
Definition at line 36 of file system_impl\&.h\&.
.SS "const \fBls::draw::display\fP & ls::game::system::getDisplay () const\fC [inline]\fP"
Get a reference to the current display object\&.
.PP
\fBReturns:\fP
.RS 4
a const reference to a display object\&. 
.RE
.PP

.PP
Definition at line 15 of file system_impl\&.h\&.
.SS "\fBls::draw::display\fP & ls::game::system::getDisplay ()\fC [inline]\fP"
Get a reference to the current display object\&.
.PP
\fBReturns:\fP
.RS 4
a reference to a display object\&. 
.RE
.PP

.PP
Definition at line 22 of file system_impl\&.h\&.
.SS "unsigned ls::game::system::getGameStackSize () const\fC [inline]\fP"
Get the number of game states contained within *this\&.
.PP
\fBReturns:\fP
.RS 4
The number of states managed by this system\&. 
.RE
.PP

.PP
Definition at line 8 of file system_impl\&.h\&.
.SS "\fBgameState\fP const * ls::game::system::getGameState (unsignedindex) const"
Get a game state using an index\&.
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP The index of the desired gamestate contained in *this\&.
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the desired game state\&. Null if the index was out of bounds\&. 
.RE
.PP

.PP
Definition at line 297 of file system\&.cpp\&.
.SS "unsigned ls::game::system::getGameStateIndex (\fBgameState\fP *constpState)"

.PP
Get the index of a game state\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpState\fP A pointer to the desired game state contained in *this\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The index of the game state held within the game list\&. GAME_INVALID if the state was not found\&. 
.RE
.PP

.PP
Definition at line 310 of file system\&.cpp\&.
.SS "const \fBls::utils::randomNum\fP & ls::game::system::getPrng () const\fC [inline]\fP"
Get a reference to the system prng (pseudo-random number generator)\&.
.PP
\fBReturns:\fP
.RS 4
a const reference to a \fBls::utils::randomNum\fP object\&. 
.RE
.PP

.PP
Definition at line 43 of file system_impl\&.h\&.
.SS "\fBls::utils::randomNum\fP & ls::game::system::getPrng ()\fC [inline]\fP"
Get a reference to the system prng (pseudo-random number generator)\&.
.PP
\fBReturns:\fP
.RS 4
a reference to a \fBls::utils::randomNum\fP object\&. 
.RE
.PP

.PP
Definition at line 50 of file system_impl\&.h\&.
.SS "float ls::game::system::getTickTime () const\fC [inline]\fP"
Get the current number of ticks per frame (in milliseconds)\&.
.PP
\fBReturns:\fP
.RS 4
A floating point number which represents the number of milliseconds which have passed since the last complete update\&. 
.RE
.PP

.PP
Definition at line 57 of file system_impl\&.h\&.
.SS "bool ls::game::system::init (\fBls::draw::display\fP &disp, booluseVsync = \fCtrue\fP)"

.PP
SubSystem initialization\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdisp\fP A display object\&. If the display is not already running, this method will cause if to be created\&. The display will remain attached to *this object until 'terminate()' is called\&.
.br
\fIuseVsync\fP Determine if the display should have VSync enabled\&.
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if this object was successfully initialized\&. FALSE if something went wrong\&. 
.RE
.PP

.PP
Definition at line 71 of file system\&.cpp\&.
.SS "bool ls::game::system::isRunning () const\fC [inline]\fP"
Determine if *this system is still running and operational\&. This function has the same effect as querying this->\fBgetGameStackSize()\fP > 0
.PP
\fBReturns:\fP
.RS 4
TRUE if the game list has something pushed onto it, FALSE if otherwise\&. 
.RE
.PP

.PP
Definition at line 64 of file system_impl\&.h\&.
.SS "\fBsystem\fP& ls::game::system::operator= (const \fBsystem\fP &)\fC [delete]\fP"

.PP
Copy operator -- DELETED\&. This method has been deleted in order to avoid a copy of all gameStates managed by this container\&. 
.SS "\fBsystem\fP & ls::game::system::operator= (\fBsystem\fP &&sys)"

.PP
Move operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsys\fP An r-value reference to another state object who's members will be moved into *this\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to *this\&. 
.RE
.PP

.PP
Definition at line 44 of file system\&.cpp\&.
.SS "void ls::game::system::popGameState ()"
Pop the last game state from the list\&. If there are no states left in the list, the system will stop\&. 
.PP
Definition at line 264 of file system\&.cpp\&.
.SS "void ls::game::system::popGameState (\fBgameState\fP *constpState)"
Search for a game state in the list and remove it if it exists\&.
.PP
\fBParameters:\fP
.RS 4
\fIpState\fP A pointer to the desired game state\&. 
.RE
.PP

.PP
Definition at line 273 of file system\&.cpp\&.
.SS "void ls::game::system::popGameState (unsignedindex)"
Search for a game state in the list and remove it if it exists\&.
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP An index of the desired game state\&. 
.RE
.PP

.PP
Definition at line 285 of file system\&.cpp\&.
.SS "bool ls::game::system::pushGameState (\fBgameState\fP *constpState)"
Push a game state onto the state list\&. All prior states will be paused, allowing the topmost state to receive hardware events\&.
.PP
\fBParameters:\fP
.RS 4
\fIpState\fP A pointer to a \fBgameState\fP object allocated with 'new\&.' 
.RE
.PP

.PP
Definition at line 248 of file system\&.cpp\&.
.SS "void ls::game::system::run ()"

.PP
Begin a game loop\&. This method will iterate through all gameStates , pass them hardware events, and call their methods to start, stop, pause, or update\&. This method must be called in a program's main loop\&. 
.PP
Definition at line 135 of file system\&.cpp\&.
.SS "void ls::game::system::stop ()"

.PP
Stop\&. This method will iterate through each managed game state and stop them, thereby destroying each owned state\&. 
.PP
Definition at line 324 of file system\&.cpp\&.
.SS "void ls::game::system::terminate ()"

.PP
Terminate *this and all sub-states\&. This method will free all memory and resources of all game states managed by this container\&. 
.PP
Definition at line 116 of file system\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for LightSky from the source code\&.
