.TH "ls::draw::texture" 3 "Sun Oct 26 2014" "Version Pre-Alpha" "LightSky" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ls::draw::texture \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <texture\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBtexture\fP (\fBls_tex_desc_t\fP td=\fBLS_TEX_2D\fP)"
.br
.RI "\fIConstructor\&. \fP"
.ti -1c
.RI "\fBtexture\fP (const \fBtexture\fP &)=delete"
.br
.RI "\fICopy Constructor -- DELETED\&. \fP"
.ti -1c
.RI "\fBtexture\fP (\fBtexture\fP &&t)"
.br
.RI "\fIMove Constructor\&. \fP"
.ti -1c
.RI "\fB~texture\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "\fBtexture\fP & \fBoperator=\fP (const \fBtexture\fP &)=delete"
.br
.RI "\fICopy Operator -- DELETED\&. \fP"
.ti -1c
.RI "\fBtexture\fP & \fBoperator=\fP (\fBtexture\fP &&t)"
.br
.RI "\fIMove Operator -- DELETED\&. \fP"
.ti -1c
.RI "unsigned \fBgetId\fP () const "
.br
.ti -1c
.RI "void \fBbind\fP () const "
.br
.ti -1c
.RI "void \fBunbind\fP () const "
.br
.ti -1c
.RI "void \fBsetParameter\fP (int paramName, int param) const "
.br
.ti -1c
.RI "void \fBsetParameter\fP (int paramName, float param) const "
.br
.RI "\fISet a float texture parameter\&. \fP"
.ti -1c
.RI "bool \fBinit\fP (int mipmapLevel, \fBpixel_format_t\fP internalFormat, int size, \fBpixel_layout_t\fP format, \fBcolor_type_t\fP dataType, void *const data)"
.br
.ti -1c
.RI "bool \fBinit\fP (int mipmapLevel, \fBpixel_format_t\fP internalFormat, math::vec2i size, \fBpixel_layout_t\fP format, \fBcolor_type_t\fP dataType, void *const data)"
.br
.ti -1c
.RI "bool \fBinit\fP (int mipmapLevel, \fBpixel_format_t\fP internalFormat, math::vec3i size, \fBpixel_layout_t\fP format, \fBcolor_type_t\fP dataType, void *const data)"
.br
.ti -1c
.RI "bool \fBinit\fP (int mipmapLevel, int size, const \fBimageResource\fP &)"
.br
.ti -1c
.RI "bool \fBinit\fP (int mipmapLevel, math::vec2i size, const \fBimageResource\fP &)"
.br
.ti -1c
.RI "bool \fBinit\fP (int mipmapLevel, math::vec3i size, const \fBimageResource\fP &)"
.br
.ti -1c
.RI "void \fBmodify\fP (int offset, int size, int format, int dataType, void *data)"
.br
.ti -1c
.RI "void \fBmodify\fP (math::vec2i offset, math::vec2i size, int format, int dataType, void *data)"
.br
.ti -1c
.RI "void \fBmodify\fP (math::vec3i offset, math::vec3i size, int format, int dataType, void *data)"
.br
.ti -1c
.RI "void \fBterminate\fP ()"
.br
.ti -1c
.RI "unsigned \fBgetWidth\fP () const "
.br
.ti -1c
.RI "unsigned \fBgetHeight\fP () const "
.br
.ti -1c
.RI "unsigned \fBgetDepth\fP () const "
.br
.ti -1c
.RI "\fBls_tex_desc_t\fP \fBgetTextType\fP () const "
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static int \fBgetMaxTextureSize\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
 
.SS "Texture Objects "

.PP
Definition at line 69 of file texture\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ls::draw::texture::texture (\fBls_tex_desc_t\fPtd = \fC\fBLS_TEX_2D\fP\fP)"

.PP
Constructor\&. 
.PP
Definition at line 38 of file texture\&.cpp\&.
.SS "ls::draw::texture::texture (const \fBtexture\fP &)\fC [delete]\fP"

.PP
Copy Constructor -- DELETED\&. 
.SS "ls::draw::texture::texture (\fBtexture\fP &&t)"

.PP
Move Constructor\&. Reassigns the texture ID at *this to the one referenced by the source operand\&. Resets the source operand to 0\&.
.PP
\fBParameters:\fP
.RS 4
\fIt\fP An r-value reference to another texture object\&. 
.RE
.PP

.PP
Definition at line 46 of file texture\&.cpp\&.
.SS "ls::draw::texture::~texture ()"

.PP
Destructor\&. Releases all memory referenced by texId 
.PP
Definition at line 56 of file texture\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void ls::draw::texture::bind () const\fC [inline]\fP"
Bind the current texture to OpenGL 
.PP
Definition at line 15 of file texture_impl\&.h\&.
.SS "unsigned ls::draw::texture::getDepth () const\fC [inline]\fP"
Get the depth of the texture referenced by texId\&.
.PP
\fBReturns:\fP
.RS 4
an unsigned integral type which indicates the size, in pixels of the texture depth used by *this\&. 
.RE
.PP

.PP
Definition at line 137 of file texture_impl\&.h\&.
.SS "unsigned ls::draw::texture::getHeight () const\fC [inline]\fP"
Get the height of the texture referenced by texId\&.
.PP
\fBReturns:\fP
.RS 4
an unsigned integral type which indicates the size, in pixels of the texture height used by *this\&. 
.RE
.PP

.PP
Definition at line 128 of file texture_impl\&.h\&.
.SS "unsigned ls::draw::texture::getId () const\fC [inline]\fP"
Get the GPU-Assigned ID used by *this\&.
.PP
\fBReturns:\fP
.RS 4
An unsigned integral type that correlates to a texture on the GPU\&. 
.RE
.PP

.PP
Definition at line 8 of file texture_impl\&.h\&.
.SS "int ls::draw::texture::getMaxTextureSize ()\fC [inline]\fP, \fC [static]\fP"
Get the maximum texture size supported by OpenGL\&.
.PP
\fBReturns:\fP
.RS 4
an integral type which can be used to determine the maximum byte size of a texture supported by the GPU\&. 
.RE
.PP

.PP
Definition at line 153 of file texture_impl\&.h\&.
.SS "\fBls_tex_desc_t\fP ls::draw::texture::getTextType () const\fC [inline]\fP"
Get the texture type of that this texture uses in OpenGL\&.
.PP
\fBReturns:\fP
.RS 4
the GPU-descriptor that's used to apply *this texture object onto polygons\&. 
.RE
.PP

.PP
Definition at line 146 of file texture_impl\&.h\&.
.SS "unsigned ls::draw::texture::getWidth () const\fC [inline]\fP"
Get the width of the texture referenced by texId
.PP
\fBReturns:\fP
.RS 4
an unsigned integral type which indicates the size, in pixels of the texture width used by *this\&. 
.RE
.PP

.PP
Definition at line 119 of file texture_impl\&.h\&.
.SS "bool ls::draw::texture::init (intmipmapLevel, \fBpixel_format_t\fPinternalFormat, intsize, \fBpixel_layout_t\fPformat, \fBcolor_type_t\fPdataType, void *constdata)"
Create an OpenGL texture by using preexisting image data\&.
.PP
\fBSee also:\fP
.RS 4
OpenGL's documentation for glTexImage()
.RE
.PP
\fBReturns:\fP
.RS 4
true if the operation was successful\&. False if otherwise\&. 
.RE
.PP

.PP
Definition at line 75 of file texture\&.cpp\&.
.SS "bool ls::draw::texture::init (intmipmapLevel, \fBpixel_format_t\fPinternalFormat, math::vec2isize, \fBpixel_layout_t\fPformat, \fBcolor_type_t\fPdataType, void *constdata)"
Create an OpenGL texture by using preexisting image data\&.
.PP
\fBSee also:\fP
.RS 4
OpenGL's documentation for glTexImage()
.RE
.PP
\fBReturns:\fP
.RS 4
true if the operation was successful\&. False if otherwise\&. 
.RE
.PP

.PP
Definition at line 99 of file texture\&.cpp\&.
.SS "bool ls::draw::texture::init (intmipmapLevel, \fBpixel_format_t\fPinternalFormat, math::vec3isize, \fBpixel_layout_t\fPformat, \fBcolor_type_t\fPdataType, void *constdata)"
Create an OpenGL texture by using preexisting image data\&.
.PP
\fBSee also:\fP
.RS 4
OpenGL's documentation for glTexImage()
.RE
.PP
\fBReturns:\fP
.RS 4
true if the operation was successful\&. False if otherwise\&. 
.RE
.PP

.PP
Definition at line 126 of file texture\&.cpp\&.
.SS "bool ls::draw::texture::init (intmipmapLevel, intsize, const \fBimageResource\fP &resource)\fC [inline]\fP"
Create an OpenGL texture by using preexisting image data\&.
.PP
\fBSee also:\fP
.RS 4
OpenGL's documentation for glTexImage()
.RE
.PP
\fBReturns:\fP
.RS 4
true if the operation was successful\&. False if otherwise\&. 
.RE
.PP

.PP
Definition at line 45 of file texture_impl\&.h\&.
.SS "bool ls::draw::texture::init (intmipmapLevel, math::vec2isize, const \fBimageResource\fP &resource)\fC [inline]\fP"
Create an OpenGL texture by using preexisting image data\&.
.PP
\fBSee also:\fP
.RS 4
OpenGL's documentation for glTexImage()
.RE
.PP
\fBReturns:\fP
.RS 4
true if the operation was successful\&. False if otherwise\&. 
.RE
.PP

.PP
Definition at line 59 of file texture_impl\&.h\&.
.SS "bool ls::draw::texture::init (intmipmapLevel, math::vec3isize, const \fBimageResource\fP &resource)\fC [inline]\fP"
Create an OpenGL texture by using preexisting image data\&.
.PP
\fBSee also:\fP
.RS 4
OpenGL's documentation for glTexImage()
.RE
.PP
\fBReturns:\fP
.RS 4
true if the operation was successful\&. False if otherwise\&. 
.RE
.PP

.PP
Definition at line 73 of file texture_impl\&.h\&.
.SS "void ls::draw::texture::modify (intoffset, intsize, intformat, intdataType, void *data)\fC [inline]\fP"
Modify the internal data of a texture\&.
.PP
\fBSee also:\fP
.RS 4
OpenGL's documentation for glTexImage() 
.RE
.PP

.PP
Definition at line 87 of file texture_impl\&.h\&.
.SS "void ls::draw::texture::modify (math::vec2ioffset, math::vec2isize, intformat, intdataType, void *data)\fC [inline]\fP"
Modify the internal data of a texture\&. 
.PP
Definition at line 95 of file texture_impl\&.h\&.
.SS "void ls::draw::texture::modify (math::vec3ioffset, math::vec3isize, intformat, intdataType, void *data)\fC [inline]\fP"
Modify the internal data of a texture\&. 
.PP
Definition at line 103 of file texture_impl\&.h\&.
.SS "\fBtexture\fP& ls::draw::texture::operator= (const \fBtexture\fP &)\fC [delete]\fP"

.PP
Copy Operator -- DELETED\&. 
.SS "\fBtexture\fP & ls::draw::texture::operator= (\fBtexture\fP &&t)"

.PP
Move Operator -- DELETED\&. 
.PP
Definition at line 63 of file texture\&.cpp\&.
.SS "void ls::draw::texture::setParameter (intparamName, intparam) const\fC [inline]\fP"
Set a integer texture parameter\&. Make sure that 'bind()' has been called before using this method\&.
.PP
\fBParameters:\fP
.RS 4
\fIparamName\fP The name/type of texture parameter which should be modified on the GPU\&.
.br
\fIparam\fP The particular texture setting to use for *this\&. 
.RE
.PP

.PP
Definition at line 30 of file texture_impl\&.h\&.
.SS "void ls::draw::texture::setParameter (intparamName, floatparam) const\fC [inline]\fP"

.PP
Set a float texture parameter\&. Make sure that 'bind()' has been called before using this method\&.
.PP
\fBParameters:\fP
.RS 4
\fIparamName\fP The name/type of texture parameter which should be modified on the GPU\&.
.br
\fIparam\fP The particular texture setting to use for *this\&. 
.RE
.PP

.PP
Definition at line 38 of file texture_impl\&.h\&.
.SS "void ls::draw::texture::terminate ()\fC [inline]\fP"
Release all memory referenced by *this\&. 
.PP
Definition at line 111 of file texture_impl\&.h\&.
.SS "void ls::draw::texture::unbind () const\fC [inline]\fP"
Unbind the current texture to OpenGL 
.PP
Definition at line 22 of file texture_impl\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for LightSky from the source code\&.
