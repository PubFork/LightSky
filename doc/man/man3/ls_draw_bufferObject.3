.TH "ls::draw::bufferObject< bufferType >" 3 "Sun Oct 26 2014" "Version Pre-Alpha" "LightSky" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ls::draw::bufferObject< bufferType > \- 
.PP
Vertex Buffer Object\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <bufferObject\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbufferObject\fP ()"
.br
.RI "\fIConstructor\&. \fP"
.ti -1c
.RI "\fBbufferObject\fP (const \fBbufferObject\fP &)=delete"
.br
.ti -1c
.RI "\fBbufferObject\fP (\fBbufferObject\fP &&vb)"
.br
.RI "\fIMove Constructor\&. \fP"
.ti -1c
.RI "\fB~bufferObject\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "\fBbufferObject\fP & \fBoperator=\fP (const \fBbufferObject\fP &)=delete"
.br
.ti -1c
.RI "\fBbufferObject\fP & \fBoperator=\fP (\fBbufferObject\fP &&vb)"
.br
.RI "\fIMove Operator\&. \fP"
.ti -1c
.RI "bool \fBinit\fP ()"
.br
.RI "\fIBuffer initialization\&. \fP"
.ti -1c
.RI "void \fBterminate\fP ()"
.br
.ti -1c
.RI "unsigned \fBgetId\fP () const "
.br
.ti -1c
.RI "bool \fBisValid\fP () const "
.br
.ti -1c
.RI "void \fBbind\fP () const "
.br
.ti -1c
.RI "void \fBunbind\fP () const "
.br
.ti -1c
.RI "void \fBsetData\fP (ptrdiff_t size, const void *pData, \fBbuffer_usage_t\fP usage)"
.br
.ti -1c
.RI "void \fBsetSubData\fP (ptrdiff_t offset, ptrdiff_t size, const void *pData)"
.br
.ti -1c
.RI "void * \fBmapData\fP (ptrdiff_t offset, ptrdiff_t range, \fBbuffer_access_t\fP access)"
.br
.ti -1c
.RI "bool \fBunmapData\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<buffer_t bufferType>class ls::draw::bufferObject< bufferType >"
Vertex Buffer Object\&. 

This object provides RAII to an OpenGL vertex Buffer Object\&. Different VBO types can be generated by modifying the template parameter\&. 
.PP
Definition at line 74 of file bufferObject\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<buffer_t bufferType> \fBls::draw::bufferObject\fP< bufferType >::\fBbufferObject\fP ()"

.PP
Constructor\&. 
.PP
Definition at line 9 of file bufferObject_impl\&.h\&.
.SS "template<buffer_t bufferType> \fBls::draw::bufferObject\fP< bufferType >::\fBbufferObject\fP (const \fBbufferObject\fP< bufferType > &)\fC [delete]\fP"
Copy Constructor - DELETED 
.SS "template<buffer_t bufferType> \fBls::draw::bufferObject\fP< bufferType >::\fBbufferObject\fP (\fBbufferObject\fP< bufferType > &&vb)"

.PP
Move Constructor\&. This moves the data contained within the constructor parameter into *this\&. No copies are performed\&.
.PP
\fBParameters:\fP
.RS 4
\fIvb\fP A vertex buffer object whose data will be moved into *this\&. 
.RE
.PP

.PP
Definition at line 16 of file bufferObject_impl\&.h\&.
.SS "template<buffer_t bufferType> \fBls::draw::bufferObject\fP< bufferType >::~\fBbufferObject\fP ()"

.PP
Destructor\&. Releases all resources used by *this\&. 
.PP
Definition at line 26 of file bufferObject_impl\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "template<buffer_t bufferType> void \fBls::draw::bufferObject\fP< bufferType >::bind () const\fC [inline]\fP"
Bind this vertex buffer to the current global rendering context\&. 
.PP
Definition at line 81 of file bufferObject_impl\&.h\&.
.SS "template<buffer_t bufferType> unsigned \fBls::draw::bufferObject\fP< bufferType >::getId () const\fC [inline]\fP"
Get the GPU-assigned handle of this buffer object 
.PP
\fBReturns:\fP
.RS 4
An unsigned integer, representing the GPU-side buffer that this object represents\&. 
.RE
.PP

.PP
Definition at line 65 of file bufferObject_impl\&.h\&.
.SS "template<buffer_t bufferType> bool \fBls::draw::bufferObject\fP< bufferType >::init ()\fC [inline]\fP"

.PP
Buffer initialization\&. Generates a vertex buffer object on the GPY that will be used to contain a large pool of data\&.
.PP
\fBReturns:\fP
.RS 4
true if the buffer was successfully created, false if not\&. 
.RE
.PP

.PP
Definition at line 44 of file bufferObject_impl\&.h\&.
.SS "template<buffer_t bufferType> bool \fBls::draw::bufferObject\fP< bufferType >::isValid () const\fC [inline]\fP"
Determine if there is data used by this object
.PP
\fBReturns:\fP
.RS 4
true if this object has data residing on GPU memory, false if not\&. 
.RE
.PP

.PP
Definition at line 73 of file bufferObject_impl\&.h\&.
.SS "template<buffer_t bufferType> void * \fBls::draw::bufferObject\fP< bufferType >::mapData (ptrdiff_toffset, ptrdiff_trange, \fBbuffer_access_t\fPaccess)\fC [inline]\fP"
Map the contents of the buffer into memory in order to perform a DMA transfer of data to the GPU\&.
.PP
\fBParameters:\fP
.RS 4
\fIoffset\fP The offset, in bytes, to where the data should be placed in *this\&.
.br
\fIrange\fP The range of bytes that will be mapped to memory\&.
.br
\fIaccess\fP Specifies a combination of access flags indicating the desired access to the range of memory\&.
.RE
.PP
\fBReturns:\fP
.RS 4
void* A pointer to the location in memory where the data will be mapped\&. A NULL pointer may be returned, indicating an error that may have occurred while attempting to map the buffer to memory\&. 
.RE
.PP

.PP
Definition at line 124 of file bufferObject_impl\&.h\&.
.SS "template<buffer_t bufferType> \fBbufferObject\fP& \fBls::draw::bufferObject\fP< bufferType >::operator= (const \fBbufferObject\fP< bufferType > &)\fC [delete]\fP"
Copy Operator - DELETED 
.SS "template<buffer_t bufferType> \fBbufferObject\fP< bufferType > & \fBls::draw::bufferObject\fP< bufferType >::operator= (\fBbufferObject\fP< bufferType > &&vb)"

.PP
Move Operator\&. This moves the data contained within the method parameter into *this\&. No copies are performed\&.
.PP
\fBParameters:\fP
.RS 4
\fIvb\fP A vertex buffer object whose data will be moved into *this\&. 
.RE
.PP

.PP
Definition at line 34 of file bufferObject_impl\&.h\&.
.SS "template<buffer_t bufferType> void \fBls::draw::bufferObject\fP< bufferType >::setData (ptrdiff_tsize, const void *pData, \fBbuffer_usage_t\fPusage)\fC [inline]\fP"
Set the data within the buffer to whatever is set at 'pData\&.'
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP The size, in bytes, of the data that the buffer should contain\&.
.br
\fIpData\fP A pointer to the data contained within the buffer\&. This argument can be NULL to indicate that an empty buffer should be allocated and will have its contents filled later\&.
.br
\fIusage\fP The usage of this buffer\&. This can indicate that the buffer is static, should be used to stream data occasionally, or the data is dynamic and will be updated on a regular basis\&. 
.RE
.PP

.PP
Definition at line 97 of file bufferObject_impl\&.h\&.
.SS "template<buffer_t bufferType> void \fBls::draw::bufferObject\fP< bufferType >::setSubData (ptrdiff_toffset, ptrdiff_tsize, const void *pData)\fC [inline]\fP"
Modify the data within a buffer to contain whatever is in 'pData\&.' at an offset of a specified amount of bytes\&.
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP The size, in bytes, of the data that the buffer should contain\&.
.br
\fIoffset\fP The offset, in bytes, to where the data should be placed in *this\&.
.br
\fIpData\fP A pointer to the data contained within the buffer\&. 
.RE
.PP

.PP
Definition at line 111 of file bufferObject_impl\&.h\&.
.SS "template<buffer_t bufferType> void \fBls::draw::bufferObject\fP< bufferType >::terminate ()\fC [inline]\fP"
Terminate the vertex buffer and release all of its resources back to the GPU\&. 
.PP
Definition at line 56 of file bufferObject_impl\&.h\&.
.SS "template<buffer_t bufferType> void \fBls::draw::bufferObject\fP< bufferType >::unbind () const\fC [inline]\fP"
Unbind this vertex buffer object from the current render context\&. 
.PP
Definition at line 89 of file bufferObject_impl\&.h\&.
.SS "template<buffer_t bufferType> bool \fBls::draw::bufferObject\fP< bufferType >::unmapData ()\fC [inline]\fP"
Notify the GPU that all data has been uploaded to the requested location in memory and that the DMA transfer can now be performed\&. 
.PP
Definition at line 137 of file bufferObject_impl\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for LightSky from the source code\&.
