.TH "ls::utils::randomNum" 3 "Sun Oct 26 2014" "Version Pre-Alpha" "LightSky" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ls::utils::randomNum \- 
.PP
Pseudo-randomn number generator using the WELLRNC 512 algorithm\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <randomNum\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBrandomNum\fP (unsigned long s)"
.br
.RI "\fISeed Constructor Seeds the PRNG in order to make random values available immediately after construction\&. \fP"
.ti -1c
.RI "\fBrandomNum\fP ()"
.br
.RI "\fIConstructor Initializes a non-seeded PRNG\&. \fP"
.ti -1c
.RI "\fBrandomNum\fP (const \fBrandomNum\fP &prng)"
.br
.RI "\fICopy Constructor Copies all data from the input parameter into *this\&. \fP"
.ti -1c
.RI "\fBrandomNum\fP (\fBrandomNum\fP &&prng)"
.br
.RI "\fIMove Constructor Copies all data from the input parameter into *this\&. \fP"
.ti -1c
.RI "\fB~randomNum\fP ()"
.br
.RI "\fIDestructor Frees all resources used by this\&. \fP"
.ti -1c
.RI "\fBrandomNum\fP & \fBoperator=\fP (const \fBrandomNum\fP &)"
.br
.RI "\fICopy Operator Copies all data from the input parameter into *this\&. \fP"
.ti -1c
.RI "\fBrandomNum\fP & \fBoperator=\fP (\fBrandomNum\fP &&)"
.br
.RI "\fIMove Operator Copies all data from the input parameter into *this\&. \fP"
.ti -1c
.RI "void \fBseed\fP (unsigned long s)"
.br
.RI "\fISeed Seeds the PRNG in order to provide a new set of pseudo-random numbers\&. \fP"
.ti -1c
.RI "void \fBseed\fP ()"
.br
.RI "\fISeed Seeds the PRNG in order to provide a new set of pseudo-random numbers\&. \fP"
.ti -1c
.RI "unsigned long \fBoperator()\fP ()"
.br
.RI "\fIOverloaded function operator\&. Generates a pseudo-random number using the WELL-512 PRNG algorithm\&. \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static float \fBrandRangeF\fP (\fBrandomNum\fP &prng, float low, float high)"
.br
.RI "\fIrandRangeF Generates a random floating-point number in between two specified values (inclusive)\&. \fP"
.ti -1c
.RI "static int \fBrandRangeI\fP (\fBrandomNum\fP &prng, int low, int high)"
.br
.RI "\fIrandRangeF Generates a random integral value in between two specified values (inclusive)\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Pseudo-randomn number generator using the WELLRNC 512 algorithm\&. 

The implementation was adapted from: http://www.lomont.org/Math/Papers/Papers.php (see: Random Number Generation) http://www.lomont.org/Math/Papers/2008/Lomont_PRNG_2008.pdf 
.PP
Definition at line 16 of file randomNum\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ls::utils::randomNum::randomNum (unsigned longs)"

.PP
Seed Constructor Seeds the PRNG in order to make random values available immediately after construction\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP An initial seed value that can be used to initialize the internal PRNG algorithm\&. The same seed can be used repeatedly in order to generate the same set of values\&. 
.RE
.PP

.PP
Definition at line 14 of file randomNum\&.cpp\&.
.SS "ls::utils::randomNum::randomNum ()"

.PP
Constructor Initializes a non-seeded PRNG\&. 
.PP
Definition at line 21 of file randomNum\&.cpp\&.
.SS "ls::utils::randomNum::randomNum (const \fBrandomNum\fP &prng)"

.PP
Copy Constructor Copies all data from the input parameter into *this\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprng\fP A constant reference to another pseudo-random number generator\&. 
.RE
.PP

.PP
Definition at line 27 of file randomNum\&.cpp\&.
.SS "ls::utils::randomNum::randomNum (\fBrandomNum\fP &&prng)"

.PP
Move Constructor Copies all data from the input parameter into *this\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprng\fP An r-value reference to another pseudo-random number generator\&. 
.RE
.PP

.PP
Definition at line 38 of file randomNum\&.cpp\&.
.SS "ls::utils::randomNum::~randomNum ()"

.PP
Destructor Frees all resources used by this\&. 
.PP
Definition at line 49 of file randomNum\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "unsigned long ls::utils::randomNum::operator() ()"

.PP
Overloaded function operator\&. Generates a pseudo-random number using the WELL-512 PRNG algorithm\&. 
.PP
\fBReturns:\fP
.RS 4
a randomly generated unsigned integral type\&. 
.RE
.PP

.PP
Definition at line 97 of file randomNum\&.cpp\&.
.SS "\fBrandomNum\fP & ls::utils::randomNum::operator= (const \fBrandomNum\fP &rn)"

.PP
Copy Operator Copies all data from the input parameter into *this\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprng\fP An r-value reference to another pseudo-random number generator\&.
.RE
.PP
\fBReturns:\fP
.RS 4
a reference to *this\&. 
.RE
.PP

.PP
Definition at line 55 of file randomNum\&.cpp\&.
.SS "\fBrandomNum\fP & ls::utils::randomNum::operator= (\fBrandomNum\fP &&rn)"

.PP
Move Operator Copies all data from the input parameter into *this\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprng\fP An r-value reference to another pseudo-random number generator\&.
.RE
.PP
\fBReturns:\fP
.RS 4
a reference to *this\&. 
.RE
.PP

.PP
Definition at line 67 of file randomNum\&.cpp\&.
.SS "float ls::utils::randomNum::randRangeF (\fBrandomNum\fP &prng, floatlow, floathigh)\fC [static]\fP"

.PP
randRangeF Generates a random floating-point number in between two specified values (inclusive)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprng\fP A reference to a random-number generator\&.
.br
\fIlow\fP The lower-bound used to clamp a prng value\&.
.br
\fIhigh\fP The upper-bound used to clamp a prng value\&.
.RE
.PP
\fBReturns:\fP
.RS 4
a pseudo-random floating-point value clamped in between 'low' and 'high\&.' 
.RE
.PP

.PP
Definition at line 115 of file randomNum\&.cpp\&.
.SS "int ls::utils::randomNum::randRangeI (\fBrandomNum\fP &prng, intlow, inthigh)\fC [static]\fP"

.PP
randRangeF Generates a random integral value in between two specified values (inclusive)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprng\fP A reference to a random-number generator\&.
.br
\fIlow\fP The lower-bound used to clamp a prng value\&.
.br
\fIhigh\fP The upper-bound used to clamp a prng value\&.
.RE
.PP
\fBReturns:\fP
.RS 4
a pseudo-random integer value clamped in between 'low' and 'high\&.' 
.RE
.PP

.PP
Definition at line 128 of file randomNum\&.cpp\&.
.SS "void ls::utils::randomNum::seed (unsigned longs)"

.PP
Seed Seeds the PRNG in order to provide a new set of pseudo-random numbers\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP A seed value that can be used to initialize the internal PRNG algorithm\&. The same seed can be used repeatedly in order to generate the same set of values\&. 
.RE
.PP

.PP
Definition at line 79 of file randomNum\&.cpp\&.
.SS "void ls::utils::randomNum::seed ()"

.PP
Seed Seeds the PRNG in order to provide a new set of pseudo-random numbers\&. This method uses the current system time in order to seed the internal PRNG algorithm\&. 
.PP
Definition at line 90 of file randomNum\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for LightSky from the source code\&.
